Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    NEWLINE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMI vars funcion main
Rule 2     programa -> PROGRAM ID SEMI funcion main
Rule 3     programa -> PROGRAM ID SEMI vars main
Rule 4     programa -> PROGRAM ID SEMI main
Rule 5     main -> MAIN function_name verifica_name LPARENT RPARENT function_all end_main
Rule 6     vars -> vars list_vars SEMI
Rule 7     vars -> VAR list_vars SEMI
Rule 8     list_vars -> list_vars COMMA vars_array
Rule 9     list_vars -> list_vars COMMA ID vars_name vars_type
Rule 10    list_vars -> memType vars_array
Rule 11    list_vars -> memType ID vars_name vars_type
Rule 12    vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory
Rule 13    func_vars -> memType ID vars_name vars_type param_type COMMA func_vars
Rule 14    func_vars -> memType ID vars_name vars_type param_type
Rule 15    memType -> INT loType
Rule 16    memType -> FLOAT loType
Rule 17    memType -> CHAR loType
Rule 18    function_all -> LBRACKET vars statement_func RBRACKET
Rule 19    function_all -> LBRACKET vars RBRACKET
Rule 20    function_all -> LBRACKET statement_func RBRACKET
Rule 21    function_all -> LBRACKET RBRACKET
Rule 22    bloque -> LBRACKET statement_func RBRACKET
Rule 23    bloque -> LBRACKET RBRACKET
Rule 24    statement_func -> statement statement_func
Rule 25    statement_func -> statement
Rule 26    statement -> statement_assign SEMI
Rule 27    statement -> statement_function SEMI
Rule 28    statement -> statement_condition
Rule 29    statement -> statement_while
Rule 30    statement -> statement_for
Rule 31    statement -> statement_read SEMI
Rule 32    statement -> statement_write SEMI
Rule 33    statement -> statement_return SEMI
Rule 34    statement -> statement_statistics SEMI
Rule 35    statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
Rule 36    statement_assign -> ID const_id EQ opera_add expression add_tabla
Rule 37    expression -> ID const_id LSQUARE const save_var RSQUARE
Rule 38    expression -> expr oper_y AND opera_add expression
Rule 39    expression -> expr oper_y
Rule 40    expr -> expr_aux oper_o OR opera_add expr
Rule 41    expr -> expr_aux oper_o
Rule 42    expr_aux -> expr_sumres expr_rel LT opera_add expr_aux
Rule 43    expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux
Rule 44    expr_aux -> expr_sumres expr_rel GT opera_add expr_aux
Rule 45    expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux
Rule 46    expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux
Rule 47    expr_aux -> expr_sumres expr_rel NE opera_add expr_aux
Rule 48    expr_aux -> expr_sumres expr_rel
Rule 49    expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres
Rule 50    expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres
Rule 51    expr_sumres -> expr_muldiv term_sumres
Rule 52    expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv
Rule 53    expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv
Rule 54    expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv
Rule 55    expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv
Rule 56    expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv
Rule 57    expr_muldiv -> const term_muldiv
Rule 58    const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
Rule 59    const -> INTEGERCTE const_int
Rule 60    const -> FLOATCTE const_float
Rule 61    const -> CHARCTE const_char
Rule 62    const -> ID const_id
Rule 63    funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
Rule 64    funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
Rule 65    funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
Rule 66    funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
Rule 67    parametro -> LPARENT func_vars RPARENT
Rule 68    parametro -> LPARENT RPARENT
Rule 69    statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
Rule 70    statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
Rule 71    funcion_aux -> expression revisar_parametro
Rule 72    funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux
Rule 73    statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
Rule 74    statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
Rule 75    statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
Rule 76    statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
Rule 77    statement_read -> READ LPARENT read_1 RPARENT
Rule 78    read_1 -> ID read_instr read_1
Rule 79    read_1 -> ID read_instr
Rule 80    statement_write -> WRITE LPARENT write_1 RPARENT
Rule 81    write_1 -> expression write_instr COMMA write_1
Rule 82    write_1 -> STRINGCTE const_str write_instr COMMA write_1
Rule 83    write_1 -> expression write_instr
Rule 84    write_1 -> STRINGCTE const_str write_instr
Rule 85    statement_return -> RETURN return_function LPARENT expression RPARENT return_save_quadruple
Rule 86    statement_statistics -> MEDIA LPARENT const read_arg_mean RPARENT
Rule 87    statement_statistics -> MEDIANA LPARENT const read_arg_median RPARENT
Rule 88    statement_statistics -> MODA LPARENT const read_arg_mode RPARENT
Rule 89    statement_statistics -> VARIANZA LPARENT const read_arg_varianza RPARENT
Rule 90    statement_statistics -> ESDEV LPARENT const read_arg_esdev RPARENT
Rule 91    loType -> <empty>
Rule 92    vars_name -> <empty>
Rule 93    vars_type -> <empty>
Rule 94    add_memory -> <empty>
Rule 95    const_id -> <empty>
Rule 96    const_int -> <empty>
Rule 97    const_float -> <empty>
Rule 98    const_char -> <empty>
Rule 99    const_str -> <empty>
Rule 100   add_tabla -> <empty>
Rule 101   save_var -> <empty>
Rule 102   opera_add -> <empty>
Rule 103   term_sumres -> <empty>
Rule 104   term_muldiv -> <empty>
Rule 105   expr_rel -> <empty>
Rule 106   oper_o -> <empty>
Rule 107   oper_y -> <empty>
Rule 108   fondo_virtual -> <empty>
Rule 109   pop_fondo_virtual -> <empty>
Rule 110   verifica_name -> <empty>
Rule 111   param_type -> <empty>
Rule 112   rev_quad -> <empty>
Rule 113   function_name -> <empty>
Rule 114   fin_funcion -> <empty>
Rule 115   existe_funcion -> <empty>
Rule 116   crea_funcion -> <empty>
Rule 117   crea_subfuncion -> <empty>
Rule 118   verifica_param -> <empty>
Rule 119   cuenta_parametro -> <empty>
Rule 120   revisar_parametro -> <empty>
Rule 121   revisar_expression -> <empty>
Rule 122   else_expression -> <empty>
Rule 123   condition_end -> <empty>
Rule 124   opera_while -> <empty>
Rule 125   condicion_while -> <empty>
Rule 126   loop_while -> <empty>
Rule 127   opera_for -> <empty>
Rule 128   compara_for -> <empty>
Rule 129   condicion_for -> <empty>
Rule 130   aumenta -> <empty>
Rule 131   loop_for -> <empty>
Rule 132   read_arg_mean -> <empty>
Rule 133   read_arg_median -> <empty>
Rule 134   read_arg_mode -> <empty>
Rule 135   read_arg_varianza -> <empty>
Rule 136   read_arg_esdev -> <empty>
Rule 137   read_instr -> <empty>
Rule 138   write_instr -> <empty>
Rule 139   return_function -> <empty>
Rule 140   return_save_quadruple -> <empty>
Rule 141   end_main -> <empty>

Terminals, with rules where they appear

AND                  : 38
CHAR                 : 17
CHARCTE              : 61
COMMA                : 8 9 13 72 81 82
COMMENT              : 
DIVENT               : 53
DIVIDE               : 54
DO                   : 75 76
ELSE                 : 73
EQ                   : 35 36
ESDEV                : 90
FLOAT                : 16
FLOATCTE             : 60
FOR                  : 76
FUNCION              : 63 64 65 66
GT                   : 44
GTE                  : 45
ID                   : 1 2 3 4 9 11 12 13 14 35 36 37 62 63 64 65 66 69 70 78 79
IF                   : 73 74
INT                  : 15
INTEGERCTE           : 59
LBRACKET             : 18 19 20 21 22 23
LPARENT              : 5 58 67 68 69 70 73 74 75 77 80 85 86 87 88 89 90
LSQUARE              : 12 35 37
LT                   : 42
LTE                  : 43
MAIN                 : 5
MEDIA                : 86
MEDIANA              : 87
MINUS                : 50
MODA                 : 88
MODULE               : 55
NE                   : 47
NEWLINE              : 
OR                   : 40
PLUS                 : 49
POWER                : 56
PROGRAM              : 1 2 3 4
RBRACKET             : 18 19 20 21 22 23
READ                 : 77
RETURN               : 85
RPARENT              : 5 58 67 68 69 70 73 74 75 77 80 85 86 87 88 89 90
RSQUARE              : 12 35 37
SEMI                 : 1 2 3 4 6 7 26 27 31 32 33 34
SIM                  : 46
STRINGCTE            : 82 84
THEN                 : 73 74
TIMES                : 52
TO                   : 76
VAR                  : 7
VARIANZA             : 89
VOID                 : 63 65
WHILE                : 75
WRITE                : 80
error                : 

Nonterminals, with rules where they appear

add_memory           : 12
add_tabla            : 35 36
aumenta              : 76
bloque               : 73 73 74 75 76
compara_for          : 76
condicion_for        : 76
condicion_while      : 75
condition_end        : 73 74
const                : 12 35 37 52 53 54 55 56 57 76 86 87 88 89 90
const_char           : 61
const_float          : 60
const_id             : 35 36 37 62
const_int            : 59
const_str            : 82 84
crea_funcion         : 69 70
crea_subfuncion      : 69 70
cuenta_parametro     : 72
else_expression      : 73
end_main             : 5
existe_funcion       : 69 70
expr                 : 38 39 40
expr_aux             : 40 41 42 43 44 45 46 47
expr_muldiv          : 49 50 51 52 53 54 55 56
expr_rel             : 42 43 44 45 46 47 48
expr_sumres          : 42 43 44 45 46 47 48 49 50
expression           : 35 36 38 58 71 72 73 74 75 81 83 85
fin_funcion          : 63 64 65 66
fondo_virtual        : 58
func_vars            : 13 67
funcion              : 1 2 63 64
funcion_aux          : 69 72
function_all         : 5 63 64 65 66
function_name        : 5 63 64 65 66
list_vars            : 6 7 8 9
loType               : 15 16 17 63 65
loop_for             : 76
loop_while           : 75
main                 : 1 2 3 4
memType              : 10 11 13 14 64 66
oper_o               : 40 41
oper_y               : 38 39
opera_add            : 35 36 38 40 42 43 44 45 46 47 49 50 52 53 54 55 56
opera_for            : 76
opera_while          : 75
param_type           : 13 14
parametro            : 63 64 65 66
pop_fondo_virtual    : 58
programa             : 0
read_1               : 77 78
read_arg_esdev       : 90
read_arg_mean        : 86
read_arg_median      : 87
read_arg_mode        : 88
read_arg_varianza    : 89
read_instr           : 78 79
return_function      : 85
return_save_quadruple : 85
rev_quad             : 63 64 65 66
revisar_expression   : 73 74
revisar_parametro    : 71 72
save_var             : 35 37
statement            : 24 25
statement_assign     : 26 76
statement_condition  : 28
statement_for        : 30
statement_func       : 18 20 22 24
statement_function   : 27
statement_read       : 31
statement_return     : 33
statement_statistics : 34
statement_while      : 29
statement_write      : 32
term_muldiv          : 52 53 54 55 56 57
term_sumres          : 49 50 51
vars                 : 1 3 6 18 19
vars_array           : 8 10
vars_name            : 9 11 12 13 14
vars_type            : 9 11 12 13 14
verifica_name        : 5
verifica_param       : 69
write_1              : 80 81 82
write_instr          : 81 82 83 84

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMI vars funcion main
    (2) programa -> . PROGRAM ID SEMI funcion main
    (3) programa -> . PROGRAM ID SEMI vars main
    (4) programa -> . PROGRAM ID SEMI main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMI vars funcion main
    (2) programa -> PROGRAM . ID SEMI funcion main
    (3) programa -> PROGRAM . ID SEMI vars main
    (4) programa -> PROGRAM . ID SEMI main

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMI vars funcion main
    (2) programa -> PROGRAM ID . SEMI funcion main
    (3) programa -> PROGRAM ID . SEMI vars main
    (4) programa -> PROGRAM ID . SEMI main

    SEMI            shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMI . vars funcion main
    (2) programa -> PROGRAM ID SEMI . funcion main
    (3) programa -> PROGRAM ID SEMI . vars main
    (4) programa -> PROGRAM ID SEMI . main
    (6) vars -> . vars list_vars SEMI
    (7) vars -> . VAR list_vars SEMI
    (63) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (64) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (66) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main

    VAR             shift and go to state 8
    FUNCION         shift and go to state 9
    MAIN            shift and go to state 10

    vars                           shift and go to state 5
    funcion                        shift and go to state 6
    main                           shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMI vars . funcion main
    (3) programa -> PROGRAM ID SEMI vars . main
    (6) vars -> vars . list_vars SEMI
    (63) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (64) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (66) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main
    (8) list_vars -> . list_vars COMMA vars_array
    (9) list_vars -> . list_vars COMMA ID vars_name vars_type
    (10) list_vars -> . memType vars_array
    (11) list_vars -> . memType ID vars_name vars_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    FUNCION         shift and go to state 9
    MAIN            shift and go to state 10
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    funcion                        shift and go to state 11
    main                           shift and go to state 12
    list_vars                      shift and go to state 13
    memType                        shift and go to state 14

state 6

    (2) programa -> PROGRAM ID SEMI funcion . main
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main

    MAIN            shift and go to state 10

    main                           shift and go to state 18

state 7

    (4) programa -> PROGRAM ID SEMI main .

    $end            reduce using rule 4 (programa -> PROGRAM ID SEMI main .)


state 8

    (7) vars -> VAR . list_vars SEMI
    (8) list_vars -> . list_vars COMMA vars_array
    (9) list_vars -> . list_vars COMMA ID vars_name vars_type
    (10) list_vars -> . memType vars_array
    (11) list_vars -> . memType ID vars_name vars_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    list_vars                      shift and go to state 19
    memType                        shift and go to state 14

state 9

    (63) funcion -> FUNCION . VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (64) funcion -> FUNCION . memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> FUNCION . VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (66) funcion -> FUNCION . memType ID function_name parametro rev_quad function_all fin_funcion
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    VOID            shift and go to state 20
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    memType                        shift and go to state 21

state 10

    (5) main -> MAIN . function_name verifica_name LPARENT RPARENT function_all end_main
    (113) function_name -> .

    LPARENT         reduce using rule 113 (function_name -> .)

    function_name                  shift and go to state 22

state 11

    (1) programa -> PROGRAM ID SEMI vars funcion . main
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main

    MAIN            shift and go to state 10

    main                           shift and go to state 23

state 12

    (3) programa -> PROGRAM ID SEMI vars main .

    $end            reduce using rule 3 (programa -> PROGRAM ID SEMI vars main .)


state 13

    (6) vars -> vars list_vars . SEMI
    (8) list_vars -> list_vars . COMMA vars_array
    (9) list_vars -> list_vars . COMMA ID vars_name vars_type

    SEMI            shift and go to state 24
    COMMA           shift and go to state 25


state 14

    (10) list_vars -> memType . vars_array
    (11) list_vars -> memType . ID vars_name vars_type
    (12) vars_array -> . ID vars_name vars_type LSQUARE const RSQUARE add_memory

    ID              shift and go to state 27

    vars_array                     shift and go to state 26

state 15

    (15) memType -> INT . loType
    (91) loType -> .

    ID              reduce using rule 91 (loType -> .)

    loType                         shift and go to state 28

state 16

    (16) memType -> FLOAT . loType
    (91) loType -> .

    ID              reduce using rule 91 (loType -> .)

    loType                         shift and go to state 29

state 17

    (17) memType -> CHAR . loType
    (91) loType -> .

    ID              reduce using rule 91 (loType -> .)

    loType                         shift and go to state 30

state 18

    (2) programa -> PROGRAM ID SEMI funcion main .

    $end            reduce using rule 2 (programa -> PROGRAM ID SEMI funcion main .)


state 19

    (7) vars -> VAR list_vars . SEMI
    (8) list_vars -> list_vars . COMMA vars_array
    (9) list_vars -> list_vars . COMMA ID vars_name vars_type

    SEMI            shift and go to state 31
    COMMA           shift and go to state 25


state 20

    (63) funcion -> FUNCION VOID . loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> FUNCION VOID . loType ID function_name parametro rev_quad function_all fin_funcion
    (91) loType -> .

    ID              reduce using rule 91 (loType -> .)

    loType                         shift and go to state 32

state 21

    (64) funcion -> FUNCION memType . ID function_name parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> FUNCION memType . ID function_name parametro rev_quad function_all fin_funcion

    ID              shift and go to state 33


state 22

    (5) main -> MAIN function_name . verifica_name LPARENT RPARENT function_all end_main
    (110) verifica_name -> .

    LPARENT         reduce using rule 110 (verifica_name -> .)

    verifica_name                  shift and go to state 34

state 23

    (1) programa -> PROGRAM ID SEMI vars funcion main .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMI vars funcion main .)


state 24

    (6) vars -> vars list_vars SEMI .

    FUNCION         reduce using rule 6 (vars -> vars list_vars SEMI .)
    MAIN            reduce using rule 6 (vars -> vars list_vars SEMI .)
    INT             reduce using rule 6 (vars -> vars list_vars SEMI .)
    FLOAT           reduce using rule 6 (vars -> vars list_vars SEMI .)
    CHAR            reduce using rule 6 (vars -> vars list_vars SEMI .)
    RBRACKET        reduce using rule 6 (vars -> vars list_vars SEMI .)
    ID              reduce using rule 6 (vars -> vars list_vars SEMI .)
    IF              reduce using rule 6 (vars -> vars list_vars SEMI .)
    WHILE           reduce using rule 6 (vars -> vars list_vars SEMI .)
    FOR             reduce using rule 6 (vars -> vars list_vars SEMI .)
    READ            reduce using rule 6 (vars -> vars list_vars SEMI .)
    WRITE           reduce using rule 6 (vars -> vars list_vars SEMI .)
    RETURN          reduce using rule 6 (vars -> vars list_vars SEMI .)
    MEDIA           reduce using rule 6 (vars -> vars list_vars SEMI .)
    MEDIANA         reduce using rule 6 (vars -> vars list_vars SEMI .)
    MODA            reduce using rule 6 (vars -> vars list_vars SEMI .)
    VARIANZA        reduce using rule 6 (vars -> vars list_vars SEMI .)
    ESDEV           reduce using rule 6 (vars -> vars list_vars SEMI .)


state 25

    (8) list_vars -> list_vars COMMA . vars_array
    (9) list_vars -> list_vars COMMA . ID vars_name vars_type
    (12) vars_array -> . ID vars_name vars_type LSQUARE const RSQUARE add_memory

    ID              shift and go to state 36

    vars_array                     shift and go to state 35

state 26

    (10) list_vars -> memType vars_array .

    SEMI            reduce using rule 10 (list_vars -> memType vars_array .)
    COMMA           reduce using rule 10 (list_vars -> memType vars_array .)


state 27

    (11) list_vars -> memType ID . vars_name vars_type
    (12) vars_array -> ID . vars_name vars_type LSQUARE const RSQUARE add_memory
    (92) vars_name -> .

    LSQUARE         reduce using rule 92 (vars_name -> .)
    SEMI            reduce using rule 92 (vars_name -> .)
    COMMA           reduce using rule 92 (vars_name -> .)

    vars_name                      shift and go to state 37

state 28

    (15) memType -> INT loType .

    ID              reduce using rule 15 (memType -> INT loType .)


state 29

    (16) memType -> FLOAT loType .

    ID              reduce using rule 16 (memType -> FLOAT loType .)


state 30

    (17) memType -> CHAR loType .

    ID              reduce using rule 17 (memType -> CHAR loType .)


state 31

    (7) vars -> VAR list_vars SEMI .

    FUNCION         reduce using rule 7 (vars -> VAR list_vars SEMI .)
    MAIN            reduce using rule 7 (vars -> VAR list_vars SEMI .)
    INT             reduce using rule 7 (vars -> VAR list_vars SEMI .)
    FLOAT           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    CHAR            reduce using rule 7 (vars -> VAR list_vars SEMI .)
    RBRACKET        reduce using rule 7 (vars -> VAR list_vars SEMI .)
    ID              reduce using rule 7 (vars -> VAR list_vars SEMI .)
    IF              reduce using rule 7 (vars -> VAR list_vars SEMI .)
    WHILE           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    FOR             reduce using rule 7 (vars -> VAR list_vars SEMI .)
    READ            reduce using rule 7 (vars -> VAR list_vars SEMI .)
    WRITE           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    RETURN          reduce using rule 7 (vars -> VAR list_vars SEMI .)
    MEDIA           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    MEDIANA         reduce using rule 7 (vars -> VAR list_vars SEMI .)
    MODA            reduce using rule 7 (vars -> VAR list_vars SEMI .)
    VARIANZA        reduce using rule 7 (vars -> VAR list_vars SEMI .)
    ESDEV           reduce using rule 7 (vars -> VAR list_vars SEMI .)


state 32

    (63) funcion -> FUNCION VOID loType . ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> FUNCION VOID loType . ID function_name parametro rev_quad function_all fin_funcion

    ID              shift and go to state 38


state 33

    (64) funcion -> FUNCION memType ID . function_name parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> FUNCION memType ID . function_name parametro rev_quad function_all fin_funcion
    (113) function_name -> .

    LPARENT         reduce using rule 113 (function_name -> .)

    function_name                  shift and go to state 39

state 34

    (5) main -> MAIN function_name verifica_name . LPARENT RPARENT function_all end_main

    LPARENT         shift and go to state 40


state 35

    (8) list_vars -> list_vars COMMA vars_array .

    SEMI            reduce using rule 8 (list_vars -> list_vars COMMA vars_array .)
    COMMA           reduce using rule 8 (list_vars -> list_vars COMMA vars_array .)


state 36

    (9) list_vars -> list_vars COMMA ID . vars_name vars_type
    (12) vars_array -> ID . vars_name vars_type LSQUARE const RSQUARE add_memory
    (92) vars_name -> .

    LSQUARE         reduce using rule 92 (vars_name -> .)
    SEMI            reduce using rule 92 (vars_name -> .)
    COMMA           reduce using rule 92 (vars_name -> .)

    vars_name                      shift and go to state 41

state 37

    (11) list_vars -> memType ID vars_name . vars_type
    (12) vars_array -> ID vars_name . vars_type LSQUARE const RSQUARE add_memory
    (93) vars_type -> .

    LSQUARE         reduce using rule 93 (vars_type -> .)
    SEMI            reduce using rule 93 (vars_type -> .)
    COMMA           reduce using rule 93 (vars_type -> .)

    vars_type                      shift and go to state 42

state 38

    (63) funcion -> FUNCION VOID loType ID . function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> FUNCION VOID loType ID . function_name parametro rev_quad function_all fin_funcion
    (113) function_name -> .

    LPARENT         reduce using rule 113 (function_name -> .)

    function_name                  shift and go to state 43

state 39

    (64) funcion -> FUNCION memType ID function_name . parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> FUNCION memType ID function_name . parametro rev_quad function_all fin_funcion
    (67) parametro -> . LPARENT func_vars RPARENT
    (68) parametro -> . LPARENT RPARENT

    LPARENT         shift and go to state 45

    parametro                      shift and go to state 44

state 40

    (5) main -> MAIN function_name verifica_name LPARENT . RPARENT function_all end_main

    RPARENT         shift and go to state 46


state 41

    (9) list_vars -> list_vars COMMA ID vars_name . vars_type
    (12) vars_array -> ID vars_name . vars_type LSQUARE const RSQUARE add_memory
    (93) vars_type -> .

    LSQUARE         reduce using rule 93 (vars_type -> .)
    SEMI            reduce using rule 93 (vars_type -> .)
    COMMA           reduce using rule 93 (vars_type -> .)

    vars_type                      shift and go to state 47

state 42

    (11) list_vars -> memType ID vars_name vars_type .
    (12) vars_array -> ID vars_name vars_type . LSQUARE const RSQUARE add_memory

    SEMI            reduce using rule 11 (list_vars -> memType ID vars_name vars_type .)
    COMMA           reduce using rule 11 (list_vars -> memType ID vars_name vars_type .)
    LSQUARE         shift and go to state 48


state 43

    (63) funcion -> FUNCION VOID loType ID function_name . parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> FUNCION VOID loType ID function_name . parametro rev_quad function_all fin_funcion
    (67) parametro -> . LPARENT func_vars RPARENT
    (68) parametro -> . LPARENT RPARENT

    LPARENT         shift and go to state 45

    parametro                      shift and go to state 49

state 44

    (64) funcion -> FUNCION memType ID function_name parametro . rev_quad function_all fin_funcion funcion
    (66) funcion -> FUNCION memType ID function_name parametro . rev_quad function_all fin_funcion
    (112) rev_quad -> .

    LBRACKET        reduce using rule 112 (rev_quad -> .)

    rev_quad                       shift and go to state 50

state 45

    (67) parametro -> LPARENT . func_vars RPARENT
    (68) parametro -> LPARENT . RPARENT
    (13) func_vars -> . memType ID vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> . memType ID vars_name vars_type param_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    RPARENT         shift and go to state 52
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    func_vars                      shift and go to state 51
    memType                        shift and go to state 53

state 46

    (5) main -> MAIN function_name verifica_name LPARENT RPARENT . function_all end_main
    (18) function_all -> . LBRACKET vars statement_func RBRACKET
    (19) function_all -> . LBRACKET vars RBRACKET
    (20) function_all -> . LBRACKET statement_func RBRACKET
    (21) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 55

    function_all                   shift and go to state 54

state 47

    (9) list_vars -> list_vars COMMA ID vars_name vars_type .
    (12) vars_array -> ID vars_name vars_type . LSQUARE const RSQUARE add_memory

    SEMI            reduce using rule 9 (list_vars -> list_vars COMMA ID vars_name vars_type .)
    COMMA           reduce using rule 9 (list_vars -> list_vars COMMA ID vars_name vars_type .)
    LSQUARE         shift and go to state 48


state 48

    (12) vars_array -> ID vars_name vars_type LSQUARE . const RSQUARE add_memory
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 57

state 49

    (63) funcion -> FUNCION VOID loType ID function_name parametro . rev_quad function_all fin_funcion funcion
    (65) funcion -> FUNCION VOID loType ID function_name parametro . rev_quad function_all fin_funcion
    (112) rev_quad -> .

    LBRACKET        reduce using rule 112 (rev_quad -> .)

    rev_quad                       shift and go to state 62

state 50

    (64) funcion -> FUNCION memType ID function_name parametro rev_quad . function_all fin_funcion funcion
    (66) funcion -> FUNCION memType ID function_name parametro rev_quad . function_all fin_funcion
    (18) function_all -> . LBRACKET vars statement_func RBRACKET
    (19) function_all -> . LBRACKET vars RBRACKET
    (20) function_all -> . LBRACKET statement_func RBRACKET
    (21) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 55

    function_all                   shift and go to state 63

state 51

    (67) parametro -> LPARENT func_vars . RPARENT

    RPARENT         shift and go to state 64


state 52

    (68) parametro -> LPARENT RPARENT .

    LBRACKET        reduce using rule 68 (parametro -> LPARENT RPARENT .)


state 53

    (13) func_vars -> memType . ID vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> memType . ID vars_name vars_type param_type

    ID              shift and go to state 65


state 54

    (5) main -> MAIN function_name verifica_name LPARENT RPARENT function_all . end_main
    (141) end_main -> .

    $end            reduce using rule 141 (end_main -> .)

    end_main                       shift and go to state 66

state 55

    (18) function_all -> LBRACKET . vars statement_func RBRACKET
    (19) function_all -> LBRACKET . vars RBRACKET
    (20) function_all -> LBRACKET . statement_func RBRACKET
    (21) function_all -> LBRACKET . RBRACKET
    (6) vars -> . vars list_vars SEMI
    (7) vars -> . VAR list_vars SEMI
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (34) statement -> . statement_statistics SEMI
    (35) statement_assign -> . ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (36) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (69) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (70) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (73) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (74) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (75) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (76) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (77) statement_read -> . READ LPARENT read_1 RPARENT
    (80) statement_write -> . WRITE LPARENT write_1 RPARENT
    (85) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple
    (86) statement_statistics -> . MEDIA LPARENT const read_arg_mean RPARENT
    (87) statement_statistics -> . MEDIANA LPARENT const read_arg_median RPARENT
    (88) statement_statistics -> . MODA LPARENT const read_arg_mode RPARENT
    (89) statement_statistics -> . VARIANZA LPARENT const read_arg_varianza RPARENT
    (90) statement_statistics -> . ESDEV LPARENT const read_arg_esdev RPARENT

    RBRACKET        shift and go to state 69
    VAR             shift and go to state 8
    ID              shift and go to state 80
    IF              shift and go to state 81
    WHILE           shift and go to state 82
    FOR             shift and go to state 83
    READ            shift and go to state 84
    WRITE           shift and go to state 85
    RETURN          shift and go to state 86
    MEDIA           shift and go to state 87
    MEDIANA         shift and go to state 88
    MODA            shift and go to state 89
    VARIANZA        shift and go to state 90
    ESDEV           shift and go to state 91

    vars                           shift and go to state 67
    statement_func                 shift and go to state 68
    statement                      shift and go to state 70
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78
    statement_statistics           shift and go to state 79

state 56

    (62) const -> ID . const_id
    (95) const_id -> .

    RSQUARE         reduce using rule 95 (const_id -> .)
    RPARENT         reduce using rule 95 (const_id -> .)
    DO              reduce using rule 95 (const_id -> .)
    TIMES           reduce using rule 95 (const_id -> .)
    DIVENT          reduce using rule 95 (const_id -> .)
    DIVIDE          reduce using rule 95 (const_id -> .)
    MODULE          reduce using rule 95 (const_id -> .)
    POWER           reduce using rule 95 (const_id -> .)
    PLUS            reduce using rule 95 (const_id -> .)
    MINUS           reduce using rule 95 (const_id -> .)
    LT              reduce using rule 95 (const_id -> .)
    LTE             reduce using rule 95 (const_id -> .)
    GT              reduce using rule 95 (const_id -> .)
    GTE             reduce using rule 95 (const_id -> .)
    SIM             reduce using rule 95 (const_id -> .)
    NE              reduce using rule 95 (const_id -> .)
    OR              reduce using rule 95 (const_id -> .)
    AND             reduce using rule 95 (const_id -> .)
    COMMA           reduce using rule 95 (const_id -> .)
    SEMI            reduce using rule 95 (const_id -> .)
    TO              reduce using rule 95 (const_id -> .)

    const_id                       shift and go to state 92

state 57

    (12) vars_array -> ID vars_name vars_type LSQUARE const . RSQUARE add_memory

    RSQUARE         shift and go to state 93


state 58

    (58) const -> LPARENT . fondo_virtual expression RPARENT pop_fondo_virtual
    (108) fondo_virtual -> .

    ID              reduce using rule 108 (fondo_virtual -> .)
    LPARENT         reduce using rule 108 (fondo_virtual -> .)
    INTEGERCTE      reduce using rule 108 (fondo_virtual -> .)
    FLOATCTE        reduce using rule 108 (fondo_virtual -> .)
    CHARCTE         reduce using rule 108 (fondo_virtual -> .)

    fondo_virtual                  shift and go to state 94

state 59

    (59) const -> INTEGERCTE . const_int
    (96) const_int -> .

    RSQUARE         reduce using rule 96 (const_int -> .)
    TIMES           reduce using rule 96 (const_int -> .)
    DIVENT          reduce using rule 96 (const_int -> .)
    DIVIDE          reduce using rule 96 (const_int -> .)
    MODULE          reduce using rule 96 (const_int -> .)
    POWER           reduce using rule 96 (const_int -> .)
    PLUS            reduce using rule 96 (const_int -> .)
    MINUS           reduce using rule 96 (const_int -> .)
    LT              reduce using rule 96 (const_int -> .)
    LTE             reduce using rule 96 (const_int -> .)
    GT              reduce using rule 96 (const_int -> .)
    GTE             reduce using rule 96 (const_int -> .)
    SIM             reduce using rule 96 (const_int -> .)
    NE              reduce using rule 96 (const_int -> .)
    OR              reduce using rule 96 (const_int -> .)
    AND             reduce using rule 96 (const_int -> .)
    RPARENT         reduce using rule 96 (const_int -> .)
    COMMA           reduce using rule 96 (const_int -> .)
    SEMI            reduce using rule 96 (const_int -> .)
    TO              reduce using rule 96 (const_int -> .)
    DO              reduce using rule 96 (const_int -> .)

    const_int                      shift and go to state 95

state 60

    (60) const -> FLOATCTE . const_float
    (97) const_float -> .

    RSQUARE         reduce using rule 97 (const_float -> .)
    TIMES           reduce using rule 97 (const_float -> .)
    DIVENT          reduce using rule 97 (const_float -> .)
    DIVIDE          reduce using rule 97 (const_float -> .)
    MODULE          reduce using rule 97 (const_float -> .)
    POWER           reduce using rule 97 (const_float -> .)
    PLUS            reduce using rule 97 (const_float -> .)
    MINUS           reduce using rule 97 (const_float -> .)
    LT              reduce using rule 97 (const_float -> .)
    LTE             reduce using rule 97 (const_float -> .)
    GT              reduce using rule 97 (const_float -> .)
    GTE             reduce using rule 97 (const_float -> .)
    SIM             reduce using rule 97 (const_float -> .)
    NE              reduce using rule 97 (const_float -> .)
    OR              reduce using rule 97 (const_float -> .)
    AND             reduce using rule 97 (const_float -> .)
    RPARENT         reduce using rule 97 (const_float -> .)
    COMMA           reduce using rule 97 (const_float -> .)
    SEMI            reduce using rule 97 (const_float -> .)
    TO              reduce using rule 97 (const_float -> .)
    DO              reduce using rule 97 (const_float -> .)

    const_float                    shift and go to state 96

state 61

    (61) const -> CHARCTE . const_char
    (98) const_char -> .

    RSQUARE         reduce using rule 98 (const_char -> .)
    TIMES           reduce using rule 98 (const_char -> .)
    DIVENT          reduce using rule 98 (const_char -> .)
    DIVIDE          reduce using rule 98 (const_char -> .)
    MODULE          reduce using rule 98 (const_char -> .)
    POWER           reduce using rule 98 (const_char -> .)
    PLUS            reduce using rule 98 (const_char -> .)
    MINUS           reduce using rule 98 (const_char -> .)
    LT              reduce using rule 98 (const_char -> .)
    LTE             reduce using rule 98 (const_char -> .)
    GT              reduce using rule 98 (const_char -> .)
    GTE             reduce using rule 98 (const_char -> .)
    SIM             reduce using rule 98 (const_char -> .)
    NE              reduce using rule 98 (const_char -> .)
    OR              reduce using rule 98 (const_char -> .)
    AND             reduce using rule 98 (const_char -> .)
    RPARENT         reduce using rule 98 (const_char -> .)
    COMMA           reduce using rule 98 (const_char -> .)
    SEMI            reduce using rule 98 (const_char -> .)
    TO              reduce using rule 98 (const_char -> .)
    DO              reduce using rule 98 (const_char -> .)

    const_char                     shift and go to state 97

state 62

    (63) funcion -> FUNCION VOID loType ID function_name parametro rev_quad . function_all fin_funcion funcion
    (65) funcion -> FUNCION VOID loType ID function_name parametro rev_quad . function_all fin_funcion
    (18) function_all -> . LBRACKET vars statement_func RBRACKET
    (19) function_all -> . LBRACKET vars RBRACKET
    (20) function_all -> . LBRACKET statement_func RBRACKET
    (21) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 55

    function_all                   shift and go to state 98

state 63

    (64) funcion -> FUNCION memType ID function_name parametro rev_quad function_all . fin_funcion funcion
    (66) funcion -> FUNCION memType ID function_name parametro rev_quad function_all . fin_funcion
    (114) fin_funcion -> .

    FUNCION         reduce using rule 114 (fin_funcion -> .)
    MAIN            reduce using rule 114 (fin_funcion -> .)

    fin_funcion                    shift and go to state 99

state 64

    (67) parametro -> LPARENT func_vars RPARENT .

    LBRACKET        reduce using rule 67 (parametro -> LPARENT func_vars RPARENT .)


state 65

    (13) func_vars -> memType ID . vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> memType ID . vars_name vars_type param_type
    (92) vars_name -> .

    COMMA           reduce using rule 92 (vars_name -> .)
    RPARENT         reduce using rule 92 (vars_name -> .)

    vars_name                      shift and go to state 100

state 66

    (5) main -> MAIN function_name verifica_name LPARENT RPARENT function_all end_main .

    $end            reduce using rule 5 (main -> MAIN function_name verifica_name LPARENT RPARENT function_all end_main .)


state 67

    (18) function_all -> LBRACKET vars . statement_func RBRACKET
    (19) function_all -> LBRACKET vars . RBRACKET
    (6) vars -> vars . list_vars SEMI
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (8) list_vars -> . list_vars COMMA vars_array
    (9) list_vars -> . list_vars COMMA ID vars_name vars_type
    (10) list_vars -> . memType vars_array
    (11) list_vars -> . memType ID vars_name vars_type
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (34) statement -> . statement_statistics SEMI
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType
    (35) statement_assign -> . ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (36) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (69) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (70) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (73) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (74) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (75) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (76) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (77) statement_read -> . READ LPARENT read_1 RPARENT
    (80) statement_write -> . WRITE LPARENT write_1 RPARENT
    (85) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple
    (86) statement_statistics -> . MEDIA LPARENT const read_arg_mean RPARENT
    (87) statement_statistics -> . MEDIANA LPARENT const read_arg_median RPARENT
    (88) statement_statistics -> . MODA LPARENT const read_arg_mode RPARENT
    (89) statement_statistics -> . VARIANZA LPARENT const read_arg_varianza RPARENT
    (90) statement_statistics -> . ESDEV LPARENT const read_arg_esdev RPARENT

    RBRACKET        shift and go to state 102
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    ID              shift and go to state 80
    IF              shift and go to state 81
    WHILE           shift and go to state 82
    FOR             shift and go to state 83
    READ            shift and go to state 84
    WRITE           shift and go to state 85
    RETURN          shift and go to state 86
    MEDIA           shift and go to state 87
    MEDIANA         shift and go to state 88
    MODA            shift and go to state 89
    VARIANZA        shift and go to state 90
    ESDEV           shift and go to state 91

    statement_func                 shift and go to state 101
    list_vars                      shift and go to state 13
    statement                      shift and go to state 70
    memType                        shift and go to state 14
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78
    statement_statistics           shift and go to state 79

state 68

    (20) function_all -> LBRACKET statement_func . RBRACKET

    RBRACKET        shift and go to state 103


state 69

    (21) function_all -> LBRACKET RBRACKET .

    $end            reduce using rule 21 (function_all -> LBRACKET RBRACKET .)
    FUNCION         reduce using rule 21 (function_all -> LBRACKET RBRACKET .)
    MAIN            reduce using rule 21 (function_all -> LBRACKET RBRACKET .)


state 70

    (24) statement_func -> statement . statement_func
    (25) statement_func -> statement .
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (34) statement -> . statement_statistics SEMI
    (35) statement_assign -> . ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (36) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (69) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (70) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (73) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (74) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (75) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (76) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (77) statement_read -> . READ LPARENT read_1 RPARENT
    (80) statement_write -> . WRITE LPARENT write_1 RPARENT
    (85) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple
    (86) statement_statistics -> . MEDIA LPARENT const read_arg_mean RPARENT
    (87) statement_statistics -> . MEDIANA LPARENT const read_arg_median RPARENT
    (88) statement_statistics -> . MODA LPARENT const read_arg_mode RPARENT
    (89) statement_statistics -> . VARIANZA LPARENT const read_arg_varianza RPARENT
    (90) statement_statistics -> . ESDEV LPARENT const read_arg_esdev RPARENT

    RBRACKET        reduce using rule 25 (statement_func -> statement .)
    ID              shift and go to state 80
    IF              shift and go to state 81
    WHILE           shift and go to state 82
    FOR             shift and go to state 83
    READ            shift and go to state 84
    WRITE           shift and go to state 85
    RETURN          shift and go to state 86
    MEDIA           shift and go to state 87
    MEDIANA         shift and go to state 88
    MODA            shift and go to state 89
    VARIANZA        shift and go to state 90
    ESDEV           shift and go to state 91

    statement                      shift and go to state 70
    statement_func                 shift and go to state 104
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78
    statement_statistics           shift and go to state 79

state 71

    (26) statement -> statement_assign . SEMI

    SEMI            shift and go to state 105


state 72

    (27) statement -> statement_function . SEMI

    SEMI            shift and go to state 106


state 73

    (28) statement -> statement_condition .

    ID              reduce using rule 28 (statement -> statement_condition .)
    IF              reduce using rule 28 (statement -> statement_condition .)
    WHILE           reduce using rule 28 (statement -> statement_condition .)
    FOR             reduce using rule 28 (statement -> statement_condition .)
    READ            reduce using rule 28 (statement -> statement_condition .)
    WRITE           reduce using rule 28 (statement -> statement_condition .)
    RETURN          reduce using rule 28 (statement -> statement_condition .)
    MEDIA           reduce using rule 28 (statement -> statement_condition .)
    MEDIANA         reduce using rule 28 (statement -> statement_condition .)
    MODA            reduce using rule 28 (statement -> statement_condition .)
    VARIANZA        reduce using rule 28 (statement -> statement_condition .)
    ESDEV           reduce using rule 28 (statement -> statement_condition .)
    RBRACKET        reduce using rule 28 (statement -> statement_condition .)


state 74

    (29) statement -> statement_while .

    ID              reduce using rule 29 (statement -> statement_while .)
    IF              reduce using rule 29 (statement -> statement_while .)
    WHILE           reduce using rule 29 (statement -> statement_while .)
    FOR             reduce using rule 29 (statement -> statement_while .)
    READ            reduce using rule 29 (statement -> statement_while .)
    WRITE           reduce using rule 29 (statement -> statement_while .)
    RETURN          reduce using rule 29 (statement -> statement_while .)
    MEDIA           reduce using rule 29 (statement -> statement_while .)
    MEDIANA         reduce using rule 29 (statement -> statement_while .)
    MODA            reduce using rule 29 (statement -> statement_while .)
    VARIANZA        reduce using rule 29 (statement -> statement_while .)
    ESDEV           reduce using rule 29 (statement -> statement_while .)
    RBRACKET        reduce using rule 29 (statement -> statement_while .)


state 75

    (30) statement -> statement_for .

    ID              reduce using rule 30 (statement -> statement_for .)
    IF              reduce using rule 30 (statement -> statement_for .)
    WHILE           reduce using rule 30 (statement -> statement_for .)
    FOR             reduce using rule 30 (statement -> statement_for .)
    READ            reduce using rule 30 (statement -> statement_for .)
    WRITE           reduce using rule 30 (statement -> statement_for .)
    RETURN          reduce using rule 30 (statement -> statement_for .)
    MEDIA           reduce using rule 30 (statement -> statement_for .)
    MEDIANA         reduce using rule 30 (statement -> statement_for .)
    MODA            reduce using rule 30 (statement -> statement_for .)
    VARIANZA        reduce using rule 30 (statement -> statement_for .)
    ESDEV           reduce using rule 30 (statement -> statement_for .)
    RBRACKET        reduce using rule 30 (statement -> statement_for .)


state 76

    (31) statement -> statement_read . SEMI

    SEMI            shift and go to state 107


state 77

    (32) statement -> statement_write . SEMI

    SEMI            shift and go to state 108


state 78

    (33) statement -> statement_return . SEMI

    SEMI            shift and go to state 109


state 79

    (34) statement -> statement_statistics . SEMI

    SEMI            shift and go to state 110


state 80

    (35) statement_assign -> ID . const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (36) statement_assign -> ID . const_id EQ opera_add expression add_tabla
    (69) statement_function -> ID . existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (70) statement_function -> ID . existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (95) const_id -> .
    (115) existe_funcion -> .

    LSQUARE         reduce using rule 95 (const_id -> .)
    EQ              reduce using rule 95 (const_id -> .)
    LPARENT         reduce using rule 115 (existe_funcion -> .)

    const_id                       shift and go to state 111
    existe_funcion                 shift and go to state 112

state 81

    (73) statement_condition -> IF . LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (74) statement_condition -> IF . LPARENT expression RPARENT THEN revisar_expression bloque condition_end

    LPARENT         shift and go to state 113


state 82

    (75) statement_while -> WHILE . opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (124) opera_while -> .

    LPARENT         reduce using rule 124 (opera_while -> .)

    opera_while                    shift and go to state 114

state 83

    (76) statement_for -> FOR . opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (127) opera_for -> .

    ID              reduce using rule 127 (opera_for -> .)

    opera_for                      shift and go to state 115

state 84

    (77) statement_read -> READ . LPARENT read_1 RPARENT

    LPARENT         shift and go to state 116


state 85

    (80) statement_write -> WRITE . LPARENT write_1 RPARENT

    LPARENT         shift and go to state 117


state 86

    (85) statement_return -> RETURN . return_function LPARENT expression RPARENT return_save_quadruple
    (139) return_function -> .

    LPARENT         reduce using rule 139 (return_function -> .)

    return_function                shift and go to state 118

state 87

    (86) statement_statistics -> MEDIA . LPARENT const read_arg_mean RPARENT

    LPARENT         shift and go to state 119


state 88

    (87) statement_statistics -> MEDIANA . LPARENT const read_arg_median RPARENT

    LPARENT         shift and go to state 120


state 89

    (88) statement_statistics -> MODA . LPARENT const read_arg_mode RPARENT

    LPARENT         shift and go to state 121


state 90

    (89) statement_statistics -> VARIANZA . LPARENT const read_arg_varianza RPARENT

    LPARENT         shift and go to state 122


state 91

    (90) statement_statistics -> ESDEV . LPARENT const read_arg_esdev RPARENT

    LPARENT         shift and go to state 123


state 92

    (62) const -> ID const_id .

    RSQUARE         reduce using rule 62 (const -> ID const_id .)
    RPARENT         reduce using rule 62 (const -> ID const_id .)
    DO              reduce using rule 62 (const -> ID const_id .)
    TIMES           reduce using rule 62 (const -> ID const_id .)
    DIVENT          reduce using rule 62 (const -> ID const_id .)
    DIVIDE          reduce using rule 62 (const -> ID const_id .)
    MODULE          reduce using rule 62 (const -> ID const_id .)
    POWER           reduce using rule 62 (const -> ID const_id .)
    PLUS            reduce using rule 62 (const -> ID const_id .)
    MINUS           reduce using rule 62 (const -> ID const_id .)
    LT              reduce using rule 62 (const -> ID const_id .)
    LTE             reduce using rule 62 (const -> ID const_id .)
    GT              reduce using rule 62 (const -> ID const_id .)
    GTE             reduce using rule 62 (const -> ID const_id .)
    SIM             reduce using rule 62 (const -> ID const_id .)
    NE              reduce using rule 62 (const -> ID const_id .)
    OR              reduce using rule 62 (const -> ID const_id .)
    AND             reduce using rule 62 (const -> ID const_id .)
    COMMA           reduce using rule 62 (const -> ID const_id .)
    SEMI            reduce using rule 62 (const -> ID const_id .)
    TO              reduce using rule 62 (const -> ID const_id .)


state 93

    (12) vars_array -> ID vars_name vars_type LSQUARE const RSQUARE . add_memory
    (94) add_memory -> .

    SEMI            reduce using rule 94 (add_memory -> .)
    COMMA           reduce using rule 94 (add_memory -> .)

    add_memory                     shift and go to state 124

state 94

    (58) const -> LPARENT fondo_virtual . expression RPARENT pop_fondo_virtual
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 125
    const                          shift and go to state 127
    expr                           shift and go to state 128
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 95

    (59) const -> INTEGERCTE const_int .

    RSQUARE         reduce using rule 59 (const -> INTEGERCTE const_int .)
    TIMES           reduce using rule 59 (const -> INTEGERCTE const_int .)
    DIVENT          reduce using rule 59 (const -> INTEGERCTE const_int .)
    DIVIDE          reduce using rule 59 (const -> INTEGERCTE const_int .)
    MODULE          reduce using rule 59 (const -> INTEGERCTE const_int .)
    POWER           reduce using rule 59 (const -> INTEGERCTE const_int .)
    PLUS            reduce using rule 59 (const -> INTEGERCTE const_int .)
    MINUS           reduce using rule 59 (const -> INTEGERCTE const_int .)
    LT              reduce using rule 59 (const -> INTEGERCTE const_int .)
    LTE             reduce using rule 59 (const -> INTEGERCTE const_int .)
    GT              reduce using rule 59 (const -> INTEGERCTE const_int .)
    GTE             reduce using rule 59 (const -> INTEGERCTE const_int .)
    SIM             reduce using rule 59 (const -> INTEGERCTE const_int .)
    NE              reduce using rule 59 (const -> INTEGERCTE const_int .)
    OR              reduce using rule 59 (const -> INTEGERCTE const_int .)
    AND             reduce using rule 59 (const -> INTEGERCTE const_int .)
    RPARENT         reduce using rule 59 (const -> INTEGERCTE const_int .)
    COMMA           reduce using rule 59 (const -> INTEGERCTE const_int .)
    SEMI            reduce using rule 59 (const -> INTEGERCTE const_int .)
    TO              reduce using rule 59 (const -> INTEGERCTE const_int .)
    DO              reduce using rule 59 (const -> INTEGERCTE const_int .)


state 96

    (60) const -> FLOATCTE const_float .

    RSQUARE         reduce using rule 60 (const -> FLOATCTE const_float .)
    TIMES           reduce using rule 60 (const -> FLOATCTE const_float .)
    DIVENT          reduce using rule 60 (const -> FLOATCTE const_float .)
    DIVIDE          reduce using rule 60 (const -> FLOATCTE const_float .)
    MODULE          reduce using rule 60 (const -> FLOATCTE const_float .)
    POWER           reduce using rule 60 (const -> FLOATCTE const_float .)
    PLUS            reduce using rule 60 (const -> FLOATCTE const_float .)
    MINUS           reduce using rule 60 (const -> FLOATCTE const_float .)
    LT              reduce using rule 60 (const -> FLOATCTE const_float .)
    LTE             reduce using rule 60 (const -> FLOATCTE const_float .)
    GT              reduce using rule 60 (const -> FLOATCTE const_float .)
    GTE             reduce using rule 60 (const -> FLOATCTE const_float .)
    SIM             reduce using rule 60 (const -> FLOATCTE const_float .)
    NE              reduce using rule 60 (const -> FLOATCTE const_float .)
    OR              reduce using rule 60 (const -> FLOATCTE const_float .)
    AND             reduce using rule 60 (const -> FLOATCTE const_float .)
    RPARENT         reduce using rule 60 (const -> FLOATCTE const_float .)
    COMMA           reduce using rule 60 (const -> FLOATCTE const_float .)
    SEMI            reduce using rule 60 (const -> FLOATCTE const_float .)
    TO              reduce using rule 60 (const -> FLOATCTE const_float .)
    DO              reduce using rule 60 (const -> FLOATCTE const_float .)


state 97

    (61) const -> CHARCTE const_char .

    RSQUARE         reduce using rule 61 (const -> CHARCTE const_char .)
    TIMES           reduce using rule 61 (const -> CHARCTE const_char .)
    DIVENT          reduce using rule 61 (const -> CHARCTE const_char .)
    DIVIDE          reduce using rule 61 (const -> CHARCTE const_char .)
    MODULE          reduce using rule 61 (const -> CHARCTE const_char .)
    POWER           reduce using rule 61 (const -> CHARCTE const_char .)
    PLUS            reduce using rule 61 (const -> CHARCTE const_char .)
    MINUS           reduce using rule 61 (const -> CHARCTE const_char .)
    LT              reduce using rule 61 (const -> CHARCTE const_char .)
    LTE             reduce using rule 61 (const -> CHARCTE const_char .)
    GT              reduce using rule 61 (const -> CHARCTE const_char .)
    GTE             reduce using rule 61 (const -> CHARCTE const_char .)
    SIM             reduce using rule 61 (const -> CHARCTE const_char .)
    NE              reduce using rule 61 (const -> CHARCTE const_char .)
    OR              reduce using rule 61 (const -> CHARCTE const_char .)
    AND             reduce using rule 61 (const -> CHARCTE const_char .)
    RPARENT         reduce using rule 61 (const -> CHARCTE const_char .)
    COMMA           reduce using rule 61 (const -> CHARCTE const_char .)
    SEMI            reduce using rule 61 (const -> CHARCTE const_char .)
    TO              reduce using rule 61 (const -> CHARCTE const_char .)
    DO              reduce using rule 61 (const -> CHARCTE const_char .)


state 98

    (63) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all . fin_funcion funcion
    (65) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all . fin_funcion
    (114) fin_funcion -> .

    FUNCION         reduce using rule 114 (fin_funcion -> .)
    MAIN            reduce using rule 114 (fin_funcion -> .)

    fin_funcion                    shift and go to state 132

state 99

    (64) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion . funcion
    (66) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion .
    (63) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (64) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (66) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion

    MAIN            reduce using rule 66 (funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion .)
    FUNCION         shift and go to state 9

    funcion                        shift and go to state 133

state 100

    (13) func_vars -> memType ID vars_name . vars_type param_type COMMA func_vars
    (14) func_vars -> memType ID vars_name . vars_type param_type
    (93) vars_type -> .

    COMMA           reduce using rule 93 (vars_type -> .)
    RPARENT         reduce using rule 93 (vars_type -> .)

    vars_type                      shift and go to state 134

state 101

    (18) function_all -> LBRACKET vars statement_func . RBRACKET

    RBRACKET        shift and go to state 135


state 102

    (19) function_all -> LBRACKET vars RBRACKET .

    $end            reduce using rule 19 (function_all -> LBRACKET vars RBRACKET .)
    FUNCION         reduce using rule 19 (function_all -> LBRACKET vars RBRACKET .)
    MAIN            reduce using rule 19 (function_all -> LBRACKET vars RBRACKET .)


state 103

    (20) function_all -> LBRACKET statement_func RBRACKET .

    $end            reduce using rule 20 (function_all -> LBRACKET statement_func RBRACKET .)
    FUNCION         reduce using rule 20 (function_all -> LBRACKET statement_func RBRACKET .)
    MAIN            reduce using rule 20 (function_all -> LBRACKET statement_func RBRACKET .)


state 104

    (24) statement_func -> statement statement_func .

    RBRACKET        reduce using rule 24 (statement_func -> statement statement_func .)


state 105

    (26) statement -> statement_assign SEMI .

    ID              reduce using rule 26 (statement -> statement_assign SEMI .)
    IF              reduce using rule 26 (statement -> statement_assign SEMI .)
    WHILE           reduce using rule 26 (statement -> statement_assign SEMI .)
    FOR             reduce using rule 26 (statement -> statement_assign SEMI .)
    READ            reduce using rule 26 (statement -> statement_assign SEMI .)
    WRITE           reduce using rule 26 (statement -> statement_assign SEMI .)
    RETURN          reduce using rule 26 (statement -> statement_assign SEMI .)
    MEDIA           reduce using rule 26 (statement -> statement_assign SEMI .)
    MEDIANA         reduce using rule 26 (statement -> statement_assign SEMI .)
    MODA            reduce using rule 26 (statement -> statement_assign SEMI .)
    VARIANZA        reduce using rule 26 (statement -> statement_assign SEMI .)
    ESDEV           reduce using rule 26 (statement -> statement_assign SEMI .)
    RBRACKET        reduce using rule 26 (statement -> statement_assign SEMI .)


state 106

    (27) statement -> statement_function SEMI .

    ID              reduce using rule 27 (statement -> statement_function SEMI .)
    IF              reduce using rule 27 (statement -> statement_function SEMI .)
    WHILE           reduce using rule 27 (statement -> statement_function SEMI .)
    FOR             reduce using rule 27 (statement -> statement_function SEMI .)
    READ            reduce using rule 27 (statement -> statement_function SEMI .)
    WRITE           reduce using rule 27 (statement -> statement_function SEMI .)
    RETURN          reduce using rule 27 (statement -> statement_function SEMI .)
    MEDIA           reduce using rule 27 (statement -> statement_function SEMI .)
    MEDIANA         reduce using rule 27 (statement -> statement_function SEMI .)
    MODA            reduce using rule 27 (statement -> statement_function SEMI .)
    VARIANZA        reduce using rule 27 (statement -> statement_function SEMI .)
    ESDEV           reduce using rule 27 (statement -> statement_function SEMI .)
    RBRACKET        reduce using rule 27 (statement -> statement_function SEMI .)


state 107

    (31) statement -> statement_read SEMI .

    ID              reduce using rule 31 (statement -> statement_read SEMI .)
    IF              reduce using rule 31 (statement -> statement_read SEMI .)
    WHILE           reduce using rule 31 (statement -> statement_read SEMI .)
    FOR             reduce using rule 31 (statement -> statement_read SEMI .)
    READ            reduce using rule 31 (statement -> statement_read SEMI .)
    WRITE           reduce using rule 31 (statement -> statement_read SEMI .)
    RETURN          reduce using rule 31 (statement -> statement_read SEMI .)
    MEDIA           reduce using rule 31 (statement -> statement_read SEMI .)
    MEDIANA         reduce using rule 31 (statement -> statement_read SEMI .)
    MODA            reduce using rule 31 (statement -> statement_read SEMI .)
    VARIANZA        reduce using rule 31 (statement -> statement_read SEMI .)
    ESDEV           reduce using rule 31 (statement -> statement_read SEMI .)
    RBRACKET        reduce using rule 31 (statement -> statement_read SEMI .)


state 108

    (32) statement -> statement_write SEMI .

    ID              reduce using rule 32 (statement -> statement_write SEMI .)
    IF              reduce using rule 32 (statement -> statement_write SEMI .)
    WHILE           reduce using rule 32 (statement -> statement_write SEMI .)
    FOR             reduce using rule 32 (statement -> statement_write SEMI .)
    READ            reduce using rule 32 (statement -> statement_write SEMI .)
    WRITE           reduce using rule 32 (statement -> statement_write SEMI .)
    RETURN          reduce using rule 32 (statement -> statement_write SEMI .)
    MEDIA           reduce using rule 32 (statement -> statement_write SEMI .)
    MEDIANA         reduce using rule 32 (statement -> statement_write SEMI .)
    MODA            reduce using rule 32 (statement -> statement_write SEMI .)
    VARIANZA        reduce using rule 32 (statement -> statement_write SEMI .)
    ESDEV           reduce using rule 32 (statement -> statement_write SEMI .)
    RBRACKET        reduce using rule 32 (statement -> statement_write SEMI .)


state 109

    (33) statement -> statement_return SEMI .

    ID              reduce using rule 33 (statement -> statement_return SEMI .)
    IF              reduce using rule 33 (statement -> statement_return SEMI .)
    WHILE           reduce using rule 33 (statement -> statement_return SEMI .)
    FOR             reduce using rule 33 (statement -> statement_return SEMI .)
    READ            reduce using rule 33 (statement -> statement_return SEMI .)
    WRITE           reduce using rule 33 (statement -> statement_return SEMI .)
    RETURN          reduce using rule 33 (statement -> statement_return SEMI .)
    MEDIA           reduce using rule 33 (statement -> statement_return SEMI .)
    MEDIANA         reduce using rule 33 (statement -> statement_return SEMI .)
    MODA            reduce using rule 33 (statement -> statement_return SEMI .)
    VARIANZA        reduce using rule 33 (statement -> statement_return SEMI .)
    ESDEV           reduce using rule 33 (statement -> statement_return SEMI .)
    RBRACKET        reduce using rule 33 (statement -> statement_return SEMI .)


state 110

    (34) statement -> statement_statistics SEMI .

    ID              reduce using rule 34 (statement -> statement_statistics SEMI .)
    IF              reduce using rule 34 (statement -> statement_statistics SEMI .)
    WHILE           reduce using rule 34 (statement -> statement_statistics SEMI .)
    FOR             reduce using rule 34 (statement -> statement_statistics SEMI .)
    READ            reduce using rule 34 (statement -> statement_statistics SEMI .)
    WRITE           reduce using rule 34 (statement -> statement_statistics SEMI .)
    RETURN          reduce using rule 34 (statement -> statement_statistics SEMI .)
    MEDIA           reduce using rule 34 (statement -> statement_statistics SEMI .)
    MEDIANA         reduce using rule 34 (statement -> statement_statistics SEMI .)
    MODA            reduce using rule 34 (statement -> statement_statistics SEMI .)
    VARIANZA        reduce using rule 34 (statement -> statement_statistics SEMI .)
    ESDEV           reduce using rule 34 (statement -> statement_statistics SEMI .)
    RBRACKET        reduce using rule 34 (statement -> statement_statistics SEMI .)


state 111

    (35) statement_assign -> ID const_id . LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (36) statement_assign -> ID const_id . EQ opera_add expression add_tabla

    LSQUARE         shift and go to state 136
    EQ              shift and go to state 137


state 112

    (69) statement_function -> ID existe_funcion . crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (70) statement_function -> ID existe_funcion . crea_funcion LPARENT RPARENT crea_subfuncion
    (116) crea_funcion -> .

    LPARENT         reduce using rule 116 (crea_funcion -> .)

    crea_funcion                   shift and go to state 138

state 113

    (73) statement_condition -> IF LPARENT . expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (74) statement_condition -> IF LPARENT . expression RPARENT THEN revisar_expression bloque condition_end
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 139
    const                          shift and go to state 127
    expr                           shift and go to state 128
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 114

    (75) statement_while -> WHILE opera_while . LPARENT expression RPARENT condicion_while DO bloque loop_while

    LPARENT         shift and go to state 140


state 115

    (76) statement_for -> FOR opera_for . statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (35) statement_assign -> . ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (36) statement_assign -> . ID const_id EQ opera_add expression add_tabla

    ID              shift and go to state 142

    statement_assign               shift and go to state 141

state 116

    (77) statement_read -> READ LPARENT . read_1 RPARENT
    (78) read_1 -> . ID read_instr read_1
    (79) read_1 -> . ID read_instr

    ID              shift and go to state 144

    read_1                         shift and go to state 143

state 117

    (80) statement_write -> WRITE LPARENT . write_1 RPARENT
    (81) write_1 -> . expression write_instr COMMA write_1
    (82) write_1 -> . STRINGCTE const_str write_instr COMMA write_1
    (83) write_1 -> . expression write_instr
    (84) write_1 -> . STRINGCTE const_str write_instr
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    STRINGCTE       shift and go to state 147
    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    write_1                        shift and go to state 145
    expression                     shift and go to state 146
    const                          shift and go to state 127
    expr                           shift and go to state 128
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 118

    (85) statement_return -> RETURN return_function . LPARENT expression RPARENT return_save_quadruple

    LPARENT         shift and go to state 148


state 119

    (86) statement_statistics -> MEDIA LPARENT . const read_arg_mean RPARENT
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 149

state 120

    (87) statement_statistics -> MEDIANA LPARENT . const read_arg_median RPARENT
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 150

state 121

    (88) statement_statistics -> MODA LPARENT . const read_arg_mode RPARENT
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 151

state 122

    (89) statement_statistics -> VARIANZA LPARENT . const read_arg_varianza RPARENT
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 152

state 123

    (90) statement_statistics -> ESDEV LPARENT . const read_arg_esdev RPARENT
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 153

state 124

    (12) vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory .

    SEMI            reduce using rule 12 (vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory .)
    COMMA           reduce using rule 12 (vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory .)


state 125

    (58) const -> LPARENT fondo_virtual expression . RPARENT pop_fondo_virtual

    RPARENT         shift and go to state 154


state 126

    (37) expression -> ID . const_id LSQUARE const save_var RSQUARE
    (62) const -> ID . const_id
    (95) const_id -> .

    LSQUARE         reduce using rule 95 (const_id -> .)
    TIMES           reduce using rule 95 (const_id -> .)
    DIVENT          reduce using rule 95 (const_id -> .)
    DIVIDE          reduce using rule 95 (const_id -> .)
    MODULE          reduce using rule 95 (const_id -> .)
    POWER           reduce using rule 95 (const_id -> .)
    PLUS            reduce using rule 95 (const_id -> .)
    MINUS           reduce using rule 95 (const_id -> .)
    LT              reduce using rule 95 (const_id -> .)
    LTE             reduce using rule 95 (const_id -> .)
    GT              reduce using rule 95 (const_id -> .)
    GTE             reduce using rule 95 (const_id -> .)
    SIM             reduce using rule 95 (const_id -> .)
    NE              reduce using rule 95 (const_id -> .)
    OR              reduce using rule 95 (const_id -> .)
    AND             reduce using rule 95 (const_id -> .)
    RPARENT         reduce using rule 95 (const_id -> .)
    COMMA           reduce using rule 95 (const_id -> .)
    SEMI            reduce using rule 95 (const_id -> .)
    TO              reduce using rule 95 (const_id -> .)

    const_id                       shift and go to state 155

state 127

    (52) expr_muldiv -> const . term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> const . term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> const . term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> const . term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> const . term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> const . term_muldiv
    (104) term_muldiv -> .

    TIMES           reduce using rule 104 (term_muldiv -> .)
    DIVENT          reduce using rule 104 (term_muldiv -> .)
    DIVIDE          reduce using rule 104 (term_muldiv -> .)
    MODULE          reduce using rule 104 (term_muldiv -> .)
    POWER           reduce using rule 104 (term_muldiv -> .)
    PLUS            reduce using rule 104 (term_muldiv -> .)
    MINUS           reduce using rule 104 (term_muldiv -> .)
    LT              reduce using rule 104 (term_muldiv -> .)
    LTE             reduce using rule 104 (term_muldiv -> .)
    GT              reduce using rule 104 (term_muldiv -> .)
    GTE             reduce using rule 104 (term_muldiv -> .)
    SIM             reduce using rule 104 (term_muldiv -> .)
    NE              reduce using rule 104 (term_muldiv -> .)
    OR              reduce using rule 104 (term_muldiv -> .)
    AND             reduce using rule 104 (term_muldiv -> .)
    RPARENT         reduce using rule 104 (term_muldiv -> .)
    COMMA           reduce using rule 104 (term_muldiv -> .)
    SEMI            reduce using rule 104 (term_muldiv -> .)
    TO              reduce using rule 104 (term_muldiv -> .)

    term_muldiv                    shift and go to state 156

state 128

    (38) expression -> expr . oper_y AND opera_add expression
    (39) expression -> expr . oper_y
    (107) oper_y -> .

    AND             reduce using rule 107 (oper_y -> .)
    RPARENT         reduce using rule 107 (oper_y -> .)
    COMMA           reduce using rule 107 (oper_y -> .)
    SEMI            reduce using rule 107 (oper_y -> .)
    TO              reduce using rule 107 (oper_y -> .)

    oper_y                         shift and go to state 157

state 129

    (40) expr -> expr_aux . oper_o OR opera_add expr
    (41) expr -> expr_aux . oper_o
    (106) oper_o -> .

    OR              reduce using rule 106 (oper_o -> .)
    AND             reduce using rule 106 (oper_o -> .)
    RPARENT         reduce using rule 106 (oper_o -> .)
    COMMA           reduce using rule 106 (oper_o -> .)
    SEMI            reduce using rule 106 (oper_o -> .)
    TO              reduce using rule 106 (oper_o -> .)

    oper_o                         shift and go to state 158

state 130

    (42) expr_aux -> expr_sumres . expr_rel LT opera_add expr_aux
    (43) expr_aux -> expr_sumres . expr_rel LTE opera_add expr_aux
    (44) expr_aux -> expr_sumres . expr_rel GT opera_add expr_aux
    (45) expr_aux -> expr_sumres . expr_rel GTE opera_add expr_aux
    (46) expr_aux -> expr_sumres . expr_rel SIM opera_add expr_aux
    (47) expr_aux -> expr_sumres . expr_rel NE opera_add expr_aux
    (48) expr_aux -> expr_sumres . expr_rel
    (105) expr_rel -> .

    LT              reduce using rule 105 (expr_rel -> .)
    LTE             reduce using rule 105 (expr_rel -> .)
    GT              reduce using rule 105 (expr_rel -> .)
    GTE             reduce using rule 105 (expr_rel -> .)
    SIM             reduce using rule 105 (expr_rel -> .)
    NE              reduce using rule 105 (expr_rel -> .)
    OR              reduce using rule 105 (expr_rel -> .)
    AND             reduce using rule 105 (expr_rel -> .)
    RPARENT         reduce using rule 105 (expr_rel -> .)
    COMMA           reduce using rule 105 (expr_rel -> .)
    SEMI            reduce using rule 105 (expr_rel -> .)
    TO              reduce using rule 105 (expr_rel -> .)

    expr_rel                       shift and go to state 159

state 131

    (49) expr_sumres -> expr_muldiv . term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> expr_muldiv . term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> expr_muldiv . term_sumres
    (103) term_sumres -> .

    PLUS            reduce using rule 103 (term_sumres -> .)
    MINUS           reduce using rule 103 (term_sumres -> .)
    LT              reduce using rule 103 (term_sumres -> .)
    LTE             reduce using rule 103 (term_sumres -> .)
    GT              reduce using rule 103 (term_sumres -> .)
    GTE             reduce using rule 103 (term_sumres -> .)
    SIM             reduce using rule 103 (term_sumres -> .)
    NE              reduce using rule 103 (term_sumres -> .)
    OR              reduce using rule 103 (term_sumres -> .)
    AND             reduce using rule 103 (term_sumres -> .)
    RPARENT         reduce using rule 103 (term_sumres -> .)
    COMMA           reduce using rule 103 (term_sumres -> .)
    SEMI            reduce using rule 103 (term_sumres -> .)
    TO              reduce using rule 103 (term_sumres -> .)

    term_sumres                    shift and go to state 160

state 132

    (63) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion . funcion
    (65) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion .
    (63) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (64) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (66) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion

    MAIN            reduce using rule 65 (funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion .)
    FUNCION         shift and go to state 9

    funcion                        shift and go to state 161

state 133

    (64) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion .

    MAIN            reduce using rule 64 (funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion .)


state 134

    (13) func_vars -> memType ID vars_name vars_type . param_type COMMA func_vars
    (14) func_vars -> memType ID vars_name vars_type . param_type
    (111) param_type -> .

    COMMA           reduce using rule 111 (param_type -> .)
    RPARENT         reduce using rule 111 (param_type -> .)

    param_type                     shift and go to state 162

state 135

    (18) function_all -> LBRACKET vars statement_func RBRACKET .

    $end            reduce using rule 18 (function_all -> LBRACKET vars statement_func RBRACKET .)
    FUNCION         reduce using rule 18 (function_all -> LBRACKET vars statement_func RBRACKET .)
    MAIN            reduce using rule 18 (function_all -> LBRACKET vars statement_func RBRACKET .)


state 136

    (35) statement_assign -> ID const_id LSQUARE . const save_var RSQUARE EQ opera_add expression add_tabla
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 163

state 137

    (36) statement_assign -> ID const_id EQ . opera_add expression add_tabla
    (102) opera_add -> .

    ID              reduce using rule 102 (opera_add -> .)
    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 164

state 138

    (69) statement_function -> ID existe_funcion crea_funcion . LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (70) statement_function -> ID existe_funcion crea_funcion . LPARENT RPARENT crea_subfuncion

    LPARENT         shift and go to state 165


state 139

    (73) statement_condition -> IF LPARENT expression . RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (74) statement_condition -> IF LPARENT expression . RPARENT THEN revisar_expression bloque condition_end

    RPARENT         shift and go to state 166


state 140

    (75) statement_while -> WHILE opera_while LPARENT . expression RPARENT condicion_while DO bloque loop_while
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 167
    const                          shift and go to state 127
    expr                           shift and go to state 128
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 141

    (76) statement_for -> FOR opera_for statement_assign . TO const compara_for condicion_for DO bloque aumenta loop_for

    TO              shift and go to state 168


state 142

    (35) statement_assign -> ID . const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (36) statement_assign -> ID . const_id EQ opera_add expression add_tabla
    (95) const_id -> .

    LSQUARE         reduce using rule 95 (const_id -> .)
    EQ              reduce using rule 95 (const_id -> .)

    const_id                       shift and go to state 111

state 143

    (77) statement_read -> READ LPARENT read_1 . RPARENT

    RPARENT         shift and go to state 169


state 144

    (78) read_1 -> ID . read_instr read_1
    (79) read_1 -> ID . read_instr
    (137) read_instr -> .

    ID              reduce using rule 137 (read_instr -> .)
    RPARENT         reduce using rule 137 (read_instr -> .)

    read_instr                     shift and go to state 170

state 145

    (80) statement_write -> WRITE LPARENT write_1 . RPARENT

    RPARENT         shift and go to state 171


state 146

    (81) write_1 -> expression . write_instr COMMA write_1
    (83) write_1 -> expression . write_instr
    (138) write_instr -> .

    COMMA           reduce using rule 138 (write_instr -> .)
    RPARENT         reduce using rule 138 (write_instr -> .)

    write_instr                    shift and go to state 172

state 147

    (82) write_1 -> STRINGCTE . const_str write_instr COMMA write_1
    (84) write_1 -> STRINGCTE . const_str write_instr
    (99) const_str -> .

    COMMA           reduce using rule 99 (const_str -> .)
    RPARENT         reduce using rule 99 (const_str -> .)

    const_str                      shift and go to state 173

state 148

    (85) statement_return -> RETURN return_function LPARENT . expression RPARENT return_save_quadruple
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 174
    const                          shift and go to state 127
    expr                           shift and go to state 128
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 149

    (86) statement_statistics -> MEDIA LPARENT const . read_arg_mean RPARENT
    (132) read_arg_mean -> .

    RPARENT         reduce using rule 132 (read_arg_mean -> .)

    read_arg_mean                  shift and go to state 175

state 150

    (87) statement_statistics -> MEDIANA LPARENT const . read_arg_median RPARENT
    (133) read_arg_median -> .

    RPARENT         reduce using rule 133 (read_arg_median -> .)

    read_arg_median                shift and go to state 176

state 151

    (88) statement_statistics -> MODA LPARENT const . read_arg_mode RPARENT
    (134) read_arg_mode -> .

    RPARENT         reduce using rule 134 (read_arg_mode -> .)

    read_arg_mode                  shift and go to state 177

state 152

    (89) statement_statistics -> VARIANZA LPARENT const . read_arg_varianza RPARENT
    (135) read_arg_varianza -> .

    RPARENT         reduce using rule 135 (read_arg_varianza -> .)

    read_arg_varianza              shift and go to state 178

state 153

    (90) statement_statistics -> ESDEV LPARENT const . read_arg_esdev RPARENT
    (136) read_arg_esdev -> .

    RPARENT         reduce using rule 136 (read_arg_esdev -> .)

    read_arg_esdev                 shift and go to state 179

state 154

    (58) const -> LPARENT fondo_virtual expression RPARENT . pop_fondo_virtual
    (109) pop_fondo_virtual -> .

    RSQUARE         reduce using rule 109 (pop_fondo_virtual -> .)
    TIMES           reduce using rule 109 (pop_fondo_virtual -> .)
    DIVENT          reduce using rule 109 (pop_fondo_virtual -> .)
    DIVIDE          reduce using rule 109 (pop_fondo_virtual -> .)
    MODULE          reduce using rule 109 (pop_fondo_virtual -> .)
    POWER           reduce using rule 109 (pop_fondo_virtual -> .)
    PLUS            reduce using rule 109 (pop_fondo_virtual -> .)
    MINUS           reduce using rule 109 (pop_fondo_virtual -> .)
    LT              reduce using rule 109 (pop_fondo_virtual -> .)
    LTE             reduce using rule 109 (pop_fondo_virtual -> .)
    GT              reduce using rule 109 (pop_fondo_virtual -> .)
    GTE             reduce using rule 109 (pop_fondo_virtual -> .)
    SIM             reduce using rule 109 (pop_fondo_virtual -> .)
    NE              reduce using rule 109 (pop_fondo_virtual -> .)
    OR              reduce using rule 109 (pop_fondo_virtual -> .)
    AND             reduce using rule 109 (pop_fondo_virtual -> .)
    RPARENT         reduce using rule 109 (pop_fondo_virtual -> .)
    COMMA           reduce using rule 109 (pop_fondo_virtual -> .)
    SEMI            reduce using rule 109 (pop_fondo_virtual -> .)
    TO              reduce using rule 109 (pop_fondo_virtual -> .)
    DO              reduce using rule 109 (pop_fondo_virtual -> .)

    pop_fondo_virtual              shift and go to state 180

state 155

    (37) expression -> ID const_id . LSQUARE const save_var RSQUARE
    (62) const -> ID const_id .

    LSQUARE         shift and go to state 181
    TIMES           reduce using rule 62 (const -> ID const_id .)
    DIVENT          reduce using rule 62 (const -> ID const_id .)
    DIVIDE          reduce using rule 62 (const -> ID const_id .)
    MODULE          reduce using rule 62 (const -> ID const_id .)
    POWER           reduce using rule 62 (const -> ID const_id .)
    PLUS            reduce using rule 62 (const -> ID const_id .)
    MINUS           reduce using rule 62 (const -> ID const_id .)
    LT              reduce using rule 62 (const -> ID const_id .)
    LTE             reduce using rule 62 (const -> ID const_id .)
    GT              reduce using rule 62 (const -> ID const_id .)
    GTE             reduce using rule 62 (const -> ID const_id .)
    SIM             reduce using rule 62 (const -> ID const_id .)
    NE              reduce using rule 62 (const -> ID const_id .)
    OR              reduce using rule 62 (const -> ID const_id .)
    AND             reduce using rule 62 (const -> ID const_id .)
    RPARENT         reduce using rule 62 (const -> ID const_id .)
    COMMA           reduce using rule 62 (const -> ID const_id .)
    SEMI            reduce using rule 62 (const -> ID const_id .)
    TO              reduce using rule 62 (const -> ID const_id .)


state 156

    (52) expr_muldiv -> const term_muldiv . TIMES opera_add expr_muldiv
    (53) expr_muldiv -> const term_muldiv . DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> const term_muldiv . DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> const term_muldiv . MODULE opera_add expr_muldiv
    (56) expr_muldiv -> const term_muldiv . POWER opera_add expr_muldiv
    (57) expr_muldiv -> const term_muldiv .

    TIMES           shift and go to state 182
    DIVENT          shift and go to state 183
    DIVIDE          shift and go to state 184
    MODULE          shift and go to state 185
    POWER           shift and go to state 186
    PLUS            reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    MINUS           reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    LT              reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    LTE             reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    GT              reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    GTE             reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    SIM             reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    NE              reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    OR              reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    AND             reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    RPARENT         reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    COMMA           reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    SEMI            reduce using rule 57 (expr_muldiv -> const term_muldiv .)
    TO              reduce using rule 57 (expr_muldiv -> const term_muldiv .)


state 157

    (38) expression -> expr oper_y . AND opera_add expression
    (39) expression -> expr oper_y .

    AND             shift and go to state 187
    RPARENT         reduce using rule 39 (expression -> expr oper_y .)
    COMMA           reduce using rule 39 (expression -> expr oper_y .)
    SEMI            reduce using rule 39 (expression -> expr oper_y .)
    TO              reduce using rule 39 (expression -> expr oper_y .)


state 158

    (40) expr -> expr_aux oper_o . OR opera_add expr
    (41) expr -> expr_aux oper_o .

    OR              shift and go to state 188
    AND             reduce using rule 41 (expr -> expr_aux oper_o .)
    RPARENT         reduce using rule 41 (expr -> expr_aux oper_o .)
    COMMA           reduce using rule 41 (expr -> expr_aux oper_o .)
    SEMI            reduce using rule 41 (expr -> expr_aux oper_o .)
    TO              reduce using rule 41 (expr -> expr_aux oper_o .)


state 159

    (42) expr_aux -> expr_sumres expr_rel . LT opera_add expr_aux
    (43) expr_aux -> expr_sumres expr_rel . LTE opera_add expr_aux
    (44) expr_aux -> expr_sumres expr_rel . GT opera_add expr_aux
    (45) expr_aux -> expr_sumres expr_rel . GTE opera_add expr_aux
    (46) expr_aux -> expr_sumres expr_rel . SIM opera_add expr_aux
    (47) expr_aux -> expr_sumres expr_rel . NE opera_add expr_aux
    (48) expr_aux -> expr_sumres expr_rel .

    LT              shift and go to state 189
    LTE             shift and go to state 190
    GT              shift and go to state 191
    GTE             shift and go to state 192
    SIM             shift and go to state 193
    NE              shift and go to state 194
    OR              reduce using rule 48 (expr_aux -> expr_sumres expr_rel .)
    AND             reduce using rule 48 (expr_aux -> expr_sumres expr_rel .)
    RPARENT         reduce using rule 48 (expr_aux -> expr_sumres expr_rel .)
    COMMA           reduce using rule 48 (expr_aux -> expr_sumres expr_rel .)
    SEMI            reduce using rule 48 (expr_aux -> expr_sumres expr_rel .)
    TO              reduce using rule 48 (expr_aux -> expr_sumres expr_rel .)


state 160

    (49) expr_sumres -> expr_muldiv term_sumres . PLUS opera_add expr_sumres
    (50) expr_sumres -> expr_muldiv term_sumres . MINUS opera_add expr_sumres
    (51) expr_sumres -> expr_muldiv term_sumres .

    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    LT              reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)
    LTE             reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)
    GT              reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)
    GTE             reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)
    SIM             reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)
    NE              reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)
    OR              reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)
    AND             reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)
    RPARENT         reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)
    COMMA           reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)
    SEMI            reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)
    TO              reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres .)


state 161

    (63) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion .

    MAIN            reduce using rule 63 (funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion .)


state 162

    (13) func_vars -> memType ID vars_name vars_type param_type . COMMA func_vars
    (14) func_vars -> memType ID vars_name vars_type param_type .

    COMMA           shift and go to state 197
    RPARENT         reduce using rule 14 (func_vars -> memType ID vars_name vars_type param_type .)


state 163

    (35) statement_assign -> ID const_id LSQUARE const . save_var RSQUARE EQ opera_add expression add_tabla
    (101) save_var -> .

    RSQUARE         reduce using rule 101 (save_var -> .)

    save_var                       shift and go to state 198

state 164

    (36) statement_assign -> ID const_id EQ opera_add . expression add_tabla
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 199
    const                          shift and go to state 127
    expr                           shift and go to state 128
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 165

    (69) statement_function -> ID existe_funcion crea_funcion LPARENT . funcion_aux verifica_param RPARENT crea_subfuncion
    (70) statement_function -> ID existe_funcion crea_funcion LPARENT . RPARENT crea_subfuncion
    (71) funcion_aux -> . expression revisar_parametro
    (72) funcion_aux -> . expression revisar_parametro cuenta_parametro COMMA funcion_aux
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    RPARENT         shift and go to state 201
    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    funcion_aux                    shift and go to state 200
    expression                     shift and go to state 202
    const                          shift and go to state 127
    expr                           shift and go to state 128
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 166

    (73) statement_condition -> IF LPARENT expression RPARENT . THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (74) statement_condition -> IF LPARENT expression RPARENT . THEN revisar_expression bloque condition_end

    THEN            shift and go to state 203


state 167

    (75) statement_while -> WHILE opera_while LPARENT expression . RPARENT condicion_while DO bloque loop_while

    RPARENT         shift and go to state 204


state 168

    (76) statement_for -> FOR opera_for statement_assign TO . const compara_for condicion_for DO bloque aumenta loop_for
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 205

state 169

    (77) statement_read -> READ LPARENT read_1 RPARENT .

    SEMI            reduce using rule 77 (statement_read -> READ LPARENT read_1 RPARENT .)


state 170

    (78) read_1 -> ID read_instr . read_1
    (79) read_1 -> ID read_instr .
    (78) read_1 -> . ID read_instr read_1
    (79) read_1 -> . ID read_instr

    RPARENT         reduce using rule 79 (read_1 -> ID read_instr .)
    ID              shift and go to state 144

    read_1                         shift and go to state 206

state 171

    (80) statement_write -> WRITE LPARENT write_1 RPARENT .

    SEMI            reduce using rule 80 (statement_write -> WRITE LPARENT write_1 RPARENT .)


state 172

    (81) write_1 -> expression write_instr . COMMA write_1
    (83) write_1 -> expression write_instr .

    COMMA           shift and go to state 207
    RPARENT         reduce using rule 83 (write_1 -> expression write_instr .)


state 173

    (82) write_1 -> STRINGCTE const_str . write_instr COMMA write_1
    (84) write_1 -> STRINGCTE const_str . write_instr
    (138) write_instr -> .

    COMMA           reduce using rule 138 (write_instr -> .)
    RPARENT         reduce using rule 138 (write_instr -> .)

    write_instr                    shift and go to state 208

state 174

    (85) statement_return -> RETURN return_function LPARENT expression . RPARENT return_save_quadruple

    RPARENT         shift and go to state 209


state 175

    (86) statement_statistics -> MEDIA LPARENT const read_arg_mean . RPARENT

    RPARENT         shift and go to state 210


state 176

    (87) statement_statistics -> MEDIANA LPARENT const read_arg_median . RPARENT

    RPARENT         shift and go to state 211


state 177

    (88) statement_statistics -> MODA LPARENT const read_arg_mode . RPARENT

    RPARENT         shift and go to state 212


state 178

    (89) statement_statistics -> VARIANZA LPARENT const read_arg_varianza . RPARENT

    RPARENT         shift and go to state 213


state 179

    (90) statement_statistics -> ESDEV LPARENT const read_arg_esdev . RPARENT

    RPARENT         shift and go to state 214


state 180

    (58) const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .

    RSQUARE         reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    TIMES           reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    DIVENT          reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    DIVIDE          reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    MODULE          reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    POWER           reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    PLUS            reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    MINUS           reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    LT              reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    LTE             reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    GT              reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    GTE             reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    SIM             reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    NE              reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    OR              reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    AND             reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    RPARENT         reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    COMMA           reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    SEMI            reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    TO              reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    DO              reduce using rule 58 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)


state 181

    (37) expression -> ID const_id LSQUARE . const save_var RSQUARE
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 215

state 182

    (52) expr_muldiv -> const term_muldiv TIMES . opera_add expr_muldiv
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 216

state 183

    (53) expr_muldiv -> const term_muldiv DIVENT . opera_add expr_muldiv
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 217

state 184

    (54) expr_muldiv -> const term_muldiv DIVIDE . opera_add expr_muldiv
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 218

state 185

    (55) expr_muldiv -> const term_muldiv MODULE . opera_add expr_muldiv
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 219

state 186

    (56) expr_muldiv -> const term_muldiv POWER . opera_add expr_muldiv
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 220

state 187

    (38) expression -> expr oper_y AND . opera_add expression
    (102) opera_add -> .

    ID              reduce using rule 102 (opera_add -> .)
    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 221

state 188

    (40) expr -> expr_aux oper_o OR . opera_add expr
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 222

state 189

    (42) expr_aux -> expr_sumres expr_rel LT . opera_add expr_aux
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 223

state 190

    (43) expr_aux -> expr_sumres expr_rel LTE . opera_add expr_aux
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 224

state 191

    (44) expr_aux -> expr_sumres expr_rel GT . opera_add expr_aux
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 225

state 192

    (45) expr_aux -> expr_sumres expr_rel GTE . opera_add expr_aux
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 226

state 193

    (46) expr_aux -> expr_sumres expr_rel SIM . opera_add expr_aux
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 227

state 194

    (47) expr_aux -> expr_sumres expr_rel NE . opera_add expr_aux
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 228

state 195

    (49) expr_sumres -> expr_muldiv term_sumres PLUS . opera_add expr_sumres
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 229

state 196

    (50) expr_sumres -> expr_muldiv term_sumres MINUS . opera_add expr_sumres
    (102) opera_add -> .

    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)
    ID              reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 230

state 197

    (13) func_vars -> memType ID vars_name vars_type param_type COMMA . func_vars
    (13) func_vars -> . memType ID vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> . memType ID vars_name vars_type param_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    memType                        shift and go to state 53
    func_vars                      shift and go to state 231

state 198

    (35) statement_assign -> ID const_id LSQUARE const save_var . RSQUARE EQ opera_add expression add_tabla

    RSQUARE         shift and go to state 232


state 199

    (36) statement_assign -> ID const_id EQ opera_add expression . add_tabla
    (100) add_tabla -> .

    SEMI            reduce using rule 100 (add_tabla -> .)
    TO              reduce using rule 100 (add_tabla -> .)

    add_tabla                      shift and go to state 233

state 200

    (69) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux . verifica_param RPARENT crea_subfuncion
    (118) verifica_param -> .

    RPARENT         reduce using rule 118 (verifica_param -> .)

    verifica_param                 shift and go to state 234

state 201

    (70) statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT . crea_subfuncion
    (117) crea_subfuncion -> .

    SEMI            reduce using rule 117 (crea_subfuncion -> .)

    crea_subfuncion                shift and go to state 235

state 202

    (71) funcion_aux -> expression . revisar_parametro
    (72) funcion_aux -> expression . revisar_parametro cuenta_parametro COMMA funcion_aux
    (120) revisar_parametro -> .

    COMMA           reduce using rule 120 (revisar_parametro -> .)
    RPARENT         reduce using rule 120 (revisar_parametro -> .)

    revisar_parametro              shift and go to state 236

state 203

    (73) statement_condition -> IF LPARENT expression RPARENT THEN . revisar_expression bloque ELSE else_expression bloque condition_end
    (74) statement_condition -> IF LPARENT expression RPARENT THEN . revisar_expression bloque condition_end
    (121) revisar_expression -> .

    LBRACKET        reduce using rule 121 (revisar_expression -> .)

    revisar_expression             shift and go to state 237

state 204

    (75) statement_while -> WHILE opera_while LPARENT expression RPARENT . condicion_while DO bloque loop_while
    (125) condicion_while -> .

    DO              reduce using rule 125 (condicion_while -> .)

    condicion_while                shift and go to state 238

state 205

    (76) statement_for -> FOR opera_for statement_assign TO const . compara_for condicion_for DO bloque aumenta loop_for
    (128) compara_for -> .

    DO              reduce using rule 128 (compara_for -> .)

    compara_for                    shift and go to state 239

state 206

    (78) read_1 -> ID read_instr read_1 .

    RPARENT         reduce using rule 78 (read_1 -> ID read_instr read_1 .)


state 207

    (81) write_1 -> expression write_instr COMMA . write_1
    (81) write_1 -> . expression write_instr COMMA write_1
    (82) write_1 -> . STRINGCTE const_str write_instr COMMA write_1
    (83) write_1 -> . expression write_instr
    (84) write_1 -> . STRINGCTE const_str write_instr
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    STRINGCTE       shift and go to state 147
    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 146
    write_1                        shift and go to state 240
    const                          shift and go to state 127
    expr                           shift and go to state 128
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 208

    (82) write_1 -> STRINGCTE const_str write_instr . COMMA write_1
    (84) write_1 -> STRINGCTE const_str write_instr .

    COMMA           shift and go to state 241
    RPARENT         reduce using rule 84 (write_1 -> STRINGCTE const_str write_instr .)


state 209

    (85) statement_return -> RETURN return_function LPARENT expression RPARENT . return_save_quadruple
    (140) return_save_quadruple -> .

    SEMI            reduce using rule 140 (return_save_quadruple -> .)

    return_save_quadruple          shift and go to state 242

state 210

    (86) statement_statistics -> MEDIA LPARENT const read_arg_mean RPARENT .

    SEMI            reduce using rule 86 (statement_statistics -> MEDIA LPARENT const read_arg_mean RPARENT .)


state 211

    (87) statement_statistics -> MEDIANA LPARENT const read_arg_median RPARENT .

    SEMI            reduce using rule 87 (statement_statistics -> MEDIANA LPARENT const read_arg_median RPARENT .)


state 212

    (88) statement_statistics -> MODA LPARENT const read_arg_mode RPARENT .

    SEMI            reduce using rule 88 (statement_statistics -> MODA LPARENT const read_arg_mode RPARENT .)


state 213

    (89) statement_statistics -> VARIANZA LPARENT const read_arg_varianza RPARENT .

    SEMI            reduce using rule 89 (statement_statistics -> VARIANZA LPARENT const read_arg_varianza RPARENT .)


state 214

    (90) statement_statistics -> ESDEV LPARENT const read_arg_esdev RPARENT .

    SEMI            reduce using rule 90 (statement_statistics -> ESDEV LPARENT const read_arg_esdev RPARENT .)


state 215

    (37) expression -> ID const_id LSQUARE const . save_var RSQUARE
    (101) save_var -> .

    RSQUARE         reduce using rule 101 (save_var -> .)

    save_var                       shift and go to state 243

state 216

    (52) expr_muldiv -> const term_muldiv TIMES opera_add . expr_muldiv
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 127
    expr_muldiv                    shift and go to state 244

state 217

    (53) expr_muldiv -> const term_muldiv DIVENT opera_add . expr_muldiv
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 127
    expr_muldiv                    shift and go to state 245

state 218

    (54) expr_muldiv -> const term_muldiv DIVIDE opera_add . expr_muldiv
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 127
    expr_muldiv                    shift and go to state 246

state 219

    (55) expr_muldiv -> const term_muldiv MODULE opera_add . expr_muldiv
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 127
    expr_muldiv                    shift and go to state 247

state 220

    (56) expr_muldiv -> const term_muldiv POWER opera_add . expr_muldiv
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 127
    expr_muldiv                    shift and go to state 248

state 221

    (38) expression -> expr oper_y AND opera_add . expression
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expr                           shift and go to state 128
    expression                     shift and go to state 249
    const                          shift and go to state 127
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 222

    (40) expr -> expr_aux oper_o OR opera_add . expr
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_aux                       shift and go to state 129
    expr                           shift and go to state 250
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131
    const                          shift and go to state 127

state 223

    (42) expr_aux -> expr_sumres expr_rel LT opera_add . expr_aux
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 130
    expr_aux                       shift and go to state 251
    expr_muldiv                    shift and go to state 131
    const                          shift and go to state 127

state 224

    (43) expr_aux -> expr_sumres expr_rel LTE opera_add . expr_aux
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 130
    expr_aux                       shift and go to state 252
    expr_muldiv                    shift and go to state 131
    const                          shift and go to state 127

state 225

    (44) expr_aux -> expr_sumres expr_rel GT opera_add . expr_aux
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 130
    expr_aux                       shift and go to state 253
    expr_muldiv                    shift and go to state 131
    const                          shift and go to state 127

state 226

    (45) expr_aux -> expr_sumres expr_rel GTE opera_add . expr_aux
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 130
    expr_aux                       shift and go to state 254
    expr_muldiv                    shift and go to state 131
    const                          shift and go to state 127

state 227

    (46) expr_aux -> expr_sumres expr_rel SIM opera_add . expr_aux
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 130
    expr_aux                       shift and go to state 255
    expr_muldiv                    shift and go to state 131
    const                          shift and go to state 127

state 228

    (47) expr_aux -> expr_sumres expr_rel NE opera_add . expr_aux
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 130
    expr_aux                       shift and go to state 256
    expr_muldiv                    shift and go to state 131
    const                          shift and go to state 127

state 229

    (49) expr_sumres -> expr_muldiv term_sumres PLUS opera_add . expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_muldiv                    shift and go to state 131
    expr_sumres                    shift and go to state 257
    const                          shift and go to state 127

state 230

    (50) expr_sumres -> expr_muldiv term_sumres MINUS opera_add . expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_muldiv                    shift and go to state 131
    expr_sumres                    shift and go to state 258
    const                          shift and go to state 127

state 231

    (13) func_vars -> memType ID vars_name vars_type param_type COMMA func_vars .

    RPARENT         reduce using rule 13 (func_vars -> memType ID vars_name vars_type param_type COMMA func_vars .)


state 232

    (35) statement_assign -> ID const_id LSQUARE const save_var RSQUARE . EQ opera_add expression add_tabla

    EQ              shift and go to state 259


state 233

    (36) statement_assign -> ID const_id EQ opera_add expression add_tabla .

    SEMI            reduce using rule 36 (statement_assign -> ID const_id EQ opera_add expression add_tabla .)
    TO              reduce using rule 36 (statement_assign -> ID const_id EQ opera_add expression add_tabla .)


state 234

    (69) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param . RPARENT crea_subfuncion

    RPARENT         shift and go to state 260


state 235

    (70) statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion .

    SEMI            reduce using rule 70 (statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion .)


state 236

    (71) funcion_aux -> expression revisar_parametro .
    (72) funcion_aux -> expression revisar_parametro . cuenta_parametro COMMA funcion_aux
    (119) cuenta_parametro -> .

    RPARENT         reduce using rule 71 (funcion_aux -> expression revisar_parametro .)
    COMMA           reduce using rule 119 (cuenta_parametro -> .)

    cuenta_parametro               shift and go to state 261

state 237

    (73) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression . bloque ELSE else_expression bloque condition_end
    (74) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression . bloque condition_end
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 263

    bloque                         shift and go to state 262

state 238

    (75) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while . DO bloque loop_while

    DO              shift and go to state 264


state 239

    (76) statement_for -> FOR opera_for statement_assign TO const compara_for . condicion_for DO bloque aumenta loop_for
    (129) condicion_for -> .

    DO              reduce using rule 129 (condicion_for -> .)

    condicion_for                  shift and go to state 265

state 240

    (81) write_1 -> expression write_instr COMMA write_1 .

    RPARENT         reduce using rule 81 (write_1 -> expression write_instr COMMA write_1 .)


state 241

    (82) write_1 -> STRINGCTE const_str write_instr COMMA . write_1
    (81) write_1 -> . expression write_instr COMMA write_1
    (82) write_1 -> . STRINGCTE const_str write_instr COMMA write_1
    (83) write_1 -> . expression write_instr
    (84) write_1 -> . STRINGCTE const_str write_instr
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    STRINGCTE       shift and go to state 147
    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    write_1                        shift and go to state 266
    expression                     shift and go to state 146
    const                          shift and go to state 127
    expr                           shift and go to state 128
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 242

    (85) statement_return -> RETURN return_function LPARENT expression RPARENT return_save_quadruple .

    SEMI            reduce using rule 85 (statement_return -> RETURN return_function LPARENT expression RPARENT return_save_quadruple .)


state 243

    (37) expression -> ID const_id LSQUARE const save_var . RSQUARE

    RSQUARE         shift and go to state 267


state 244

    (52) expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .

    PLUS            reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    MINUS           reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    LT              reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    LTE             reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    GT              reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    GTE             reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    SIM             reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    NE              reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    OR              reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    AND             reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    RPARENT         reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    COMMA           reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    SEMI            reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    TO              reduce using rule 52 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)


state 245

    (53) expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .

    PLUS            reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    MINUS           reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    LT              reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    LTE             reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    GT              reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    GTE             reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    SIM             reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    NE              reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    OR              reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    AND             reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    RPARENT         reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    COMMA           reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    SEMI            reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    TO              reduce using rule 53 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)


state 246

    (54) expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .

    PLUS            reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    MINUS           reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    LT              reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    LTE             reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    GT              reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    GTE             reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    SIM             reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    NE              reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    OR              reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    AND             reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    RPARENT         reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    COMMA           reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    SEMI            reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    TO              reduce using rule 54 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)


state 247

    (55) expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .

    PLUS            reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    MINUS           reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    LT              reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    LTE             reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    GT              reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    GTE             reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    SIM             reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    NE              reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    OR              reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    AND             reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    RPARENT         reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    COMMA           reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    SEMI            reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    TO              reduce using rule 55 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)


state 248

    (56) expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .

    PLUS            reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    MINUS           reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    LT              reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    LTE             reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    GT              reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    GTE             reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    SIM             reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    NE              reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    OR              reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    AND             reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    RPARENT         reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    COMMA           reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    SEMI            reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    TO              reduce using rule 56 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)


state 249

    (38) expression -> expr oper_y AND opera_add expression .

    RPARENT         reduce using rule 38 (expression -> expr oper_y AND opera_add expression .)
    COMMA           reduce using rule 38 (expression -> expr oper_y AND opera_add expression .)
    SEMI            reduce using rule 38 (expression -> expr oper_y AND opera_add expression .)
    TO              reduce using rule 38 (expression -> expr oper_y AND opera_add expression .)


state 250

    (40) expr -> expr_aux oper_o OR opera_add expr .

    AND             reduce using rule 40 (expr -> expr_aux oper_o OR opera_add expr .)
    RPARENT         reduce using rule 40 (expr -> expr_aux oper_o OR opera_add expr .)
    COMMA           reduce using rule 40 (expr -> expr_aux oper_o OR opera_add expr .)
    SEMI            reduce using rule 40 (expr -> expr_aux oper_o OR opera_add expr .)
    TO              reduce using rule 40 (expr -> expr_aux oper_o OR opera_add expr .)


state 251

    (42) expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .

    OR              reduce using rule 42 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    AND             reduce using rule 42 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    RPARENT         reduce using rule 42 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    COMMA           reduce using rule 42 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    SEMI            reduce using rule 42 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    TO              reduce using rule 42 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)


state 252

    (43) expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .

    OR              reduce using rule 43 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    AND             reduce using rule 43 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    RPARENT         reduce using rule 43 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    COMMA           reduce using rule 43 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    SEMI            reduce using rule 43 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    TO              reduce using rule 43 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)


state 253

    (44) expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .

    OR              reduce using rule 44 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    AND             reduce using rule 44 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    RPARENT         reduce using rule 44 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    COMMA           reduce using rule 44 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    SEMI            reduce using rule 44 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    TO              reduce using rule 44 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)


state 254

    (45) expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .

    OR              reduce using rule 45 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    AND             reduce using rule 45 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    RPARENT         reduce using rule 45 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    COMMA           reduce using rule 45 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    SEMI            reduce using rule 45 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    TO              reduce using rule 45 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)


state 255

    (46) expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .

    OR              reduce using rule 46 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    AND             reduce using rule 46 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    RPARENT         reduce using rule 46 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    COMMA           reduce using rule 46 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    SEMI            reduce using rule 46 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    TO              reduce using rule 46 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)


state 256

    (47) expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .

    OR              reduce using rule 47 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    AND             reduce using rule 47 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    RPARENT         reduce using rule 47 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    COMMA           reduce using rule 47 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    SEMI            reduce using rule 47 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    TO              reduce using rule 47 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)


state 257

    (49) expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .

    LT              reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    LTE             reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    GT              reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    GTE             reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    SIM             reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    NE              reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    OR              reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    AND             reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    RPARENT         reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    COMMA           reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    SEMI            reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    TO              reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)


state 258

    (50) expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .

    LT              reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    LTE             reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    GT              reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    GTE             reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    SIM             reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    NE              reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    OR              reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    AND             reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    RPARENT         reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    COMMA           reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    SEMI            reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    TO              reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)


state 259

    (35) statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ . opera_add expression add_tabla
    (102) opera_add -> .

    ID              reduce using rule 102 (opera_add -> .)
    LPARENT         reduce using rule 102 (opera_add -> .)
    INTEGERCTE      reduce using rule 102 (opera_add -> .)
    FLOATCTE        reduce using rule 102 (opera_add -> .)
    CHARCTE         reduce using rule 102 (opera_add -> .)

    opera_add                      shift and go to state 268

state 260

    (69) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT . crea_subfuncion
    (117) crea_subfuncion -> .

    SEMI            reduce using rule 117 (crea_subfuncion -> .)

    crea_subfuncion                shift and go to state 269

state 261

    (72) funcion_aux -> expression revisar_parametro cuenta_parametro . COMMA funcion_aux

    COMMA           shift and go to state 270


state 262

    (73) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque . ELSE else_expression bloque condition_end
    (74) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque . condition_end
    (123) condition_end -> .

    ELSE            shift and go to state 271
    ID              reduce using rule 123 (condition_end -> .)
    IF              reduce using rule 123 (condition_end -> .)
    WHILE           reduce using rule 123 (condition_end -> .)
    FOR             reduce using rule 123 (condition_end -> .)
    READ            reduce using rule 123 (condition_end -> .)
    WRITE           reduce using rule 123 (condition_end -> .)
    RETURN          reduce using rule 123 (condition_end -> .)
    MEDIA           reduce using rule 123 (condition_end -> .)
    MEDIANA         reduce using rule 123 (condition_end -> .)
    MODA            reduce using rule 123 (condition_end -> .)
    VARIANZA        reduce using rule 123 (condition_end -> .)
    ESDEV           reduce using rule 123 (condition_end -> .)
    RBRACKET        reduce using rule 123 (condition_end -> .)

    condition_end                  shift and go to state 272

state 263

    (22) bloque -> LBRACKET . statement_func RBRACKET
    (23) bloque -> LBRACKET . RBRACKET
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (34) statement -> . statement_statistics SEMI
    (35) statement_assign -> . ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (36) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (69) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (70) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (73) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (74) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (75) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (76) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (77) statement_read -> . READ LPARENT read_1 RPARENT
    (80) statement_write -> . WRITE LPARENT write_1 RPARENT
    (85) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple
    (86) statement_statistics -> . MEDIA LPARENT const read_arg_mean RPARENT
    (87) statement_statistics -> . MEDIANA LPARENT const read_arg_median RPARENT
    (88) statement_statistics -> . MODA LPARENT const read_arg_mode RPARENT
    (89) statement_statistics -> . VARIANZA LPARENT const read_arg_varianza RPARENT
    (90) statement_statistics -> . ESDEV LPARENT const read_arg_esdev RPARENT

    RBRACKET        shift and go to state 274
    ID              shift and go to state 80
    IF              shift and go to state 81
    WHILE           shift and go to state 82
    FOR             shift and go to state 83
    READ            shift and go to state 84
    WRITE           shift and go to state 85
    RETURN          shift and go to state 86
    MEDIA           shift and go to state 87
    MEDIANA         shift and go to state 88
    MODA            shift and go to state 89
    VARIANZA        shift and go to state 90
    ESDEV           shift and go to state 91

    statement_func                 shift and go to state 273
    statement                      shift and go to state 70
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78
    statement_statistics           shift and go to state 79

state 264

    (75) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO . bloque loop_while
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 263

    bloque                         shift and go to state 275

state 265

    (76) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for . DO bloque aumenta loop_for

    DO              shift and go to state 276


state 266

    (82) write_1 -> STRINGCTE const_str write_instr COMMA write_1 .

    RPARENT         reduce using rule 82 (write_1 -> STRINGCTE const_str write_instr COMMA write_1 .)


state 267

    (37) expression -> ID const_id LSQUARE const save_var RSQUARE .

    RPARENT         reduce using rule 37 (expression -> ID const_id LSQUARE const save_var RSQUARE .)
    COMMA           reduce using rule 37 (expression -> ID const_id LSQUARE const save_var RSQUARE .)
    SEMI            reduce using rule 37 (expression -> ID const_id LSQUARE const save_var RSQUARE .)
    TO              reduce using rule 37 (expression -> ID const_id LSQUARE const save_var RSQUARE .)


state 268

    (35) statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add . expression add_tabla
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    const                          shift and go to state 127
    expression                     shift and go to state 277
    expr                           shift and go to state 128
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 269

    (69) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion .

    SEMI            reduce using rule 69 (statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion .)


state 270

    (72) funcion_aux -> expression revisar_parametro cuenta_parametro COMMA . funcion_aux
    (71) funcion_aux -> . expression revisar_parametro
    (72) funcion_aux -> . expression revisar_parametro cuenta_parametro COMMA funcion_aux
    (37) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (38) expression -> . expr oper_y AND opera_add expression
    (39) expression -> . expr oper_y
    (40) expr -> . expr_aux oper_o OR opera_add expr
    (41) expr -> . expr_aux oper_o
    (42) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel
    (49) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres
    (52) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv
    (58) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (59) const -> . INTEGERCTE const_int
    (60) const -> . FLOATCTE const_float
    (61) const -> . CHARCTE const_char
    (62) const -> . ID const_id

    ID              shift and go to state 126
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 202
    funcion_aux                    shift and go to state 278
    const                          shift and go to state 127
    expr                           shift and go to state 128
    expr_aux                       shift and go to state 129
    expr_sumres                    shift and go to state 130
    expr_muldiv                    shift and go to state 131

state 271

    (73) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE . else_expression bloque condition_end
    (122) else_expression -> .

    LBRACKET        reduce using rule 122 (else_expression -> .)

    else_expression                shift and go to state 279

state 272

    (74) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .

    ID              reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    IF              reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    WHILE           reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    FOR             reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    READ            reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    WRITE           reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    RETURN          reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    MEDIA           reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    MEDIANA         reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    MODA            reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    VARIANZA        reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    ESDEV           reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    RBRACKET        reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)


state 273

    (22) bloque -> LBRACKET statement_func . RBRACKET

    RBRACKET        shift and go to state 280


state 274

    (23) bloque -> LBRACKET RBRACKET .

    ELSE            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    ID              reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    IF              reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    FOR             reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    READ            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    WRITE           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    MEDIA           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    MEDIANA         reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    MODA            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    VARIANZA        reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    ESDEV           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 23 (bloque -> LBRACKET RBRACKET .)


state 275

    (75) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque . loop_while
    (126) loop_while -> .

    ID              reduce using rule 126 (loop_while -> .)
    IF              reduce using rule 126 (loop_while -> .)
    WHILE           reduce using rule 126 (loop_while -> .)
    FOR             reduce using rule 126 (loop_while -> .)
    READ            reduce using rule 126 (loop_while -> .)
    WRITE           reduce using rule 126 (loop_while -> .)
    RETURN          reduce using rule 126 (loop_while -> .)
    MEDIA           reduce using rule 126 (loop_while -> .)
    MEDIANA         reduce using rule 126 (loop_while -> .)
    MODA            reduce using rule 126 (loop_while -> .)
    VARIANZA        reduce using rule 126 (loop_while -> .)
    ESDEV           reduce using rule 126 (loop_while -> .)
    RBRACKET        reduce using rule 126 (loop_while -> .)

    loop_while                     shift and go to state 281

state 276

    (76) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO . bloque aumenta loop_for
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 263

    bloque                         shift and go to state 282

state 277

    (35) statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression . add_tabla
    (100) add_tabla -> .

    SEMI            reduce using rule 100 (add_tabla -> .)
    TO              reduce using rule 100 (add_tabla -> .)

    add_tabla                      shift and go to state 283

state 278

    (72) funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux .

    RPARENT         reduce using rule 72 (funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux .)


state 279

    (73) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression . bloque condition_end
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 263

    bloque                         shift and go to state 284

state 280

    (22) bloque -> LBRACKET statement_func RBRACKET .

    ELSE            reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    ID              reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    IF              reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    WHILE           reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    FOR             reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    READ            reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    WRITE           reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    RETURN          reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    MEDIA           reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    MEDIANA         reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    MODA            reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    VARIANZA        reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    ESDEV           reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    RBRACKET        reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)


state 281

    (75) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .

    ID              reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    IF              reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    WHILE           reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    FOR             reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    READ            reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    WRITE           reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    RETURN          reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    MEDIA           reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    MEDIANA         reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    MODA            reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    VARIANZA        reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    ESDEV           reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    RBRACKET        reduce using rule 75 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)


state 282

    (76) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque . aumenta loop_for
    (130) aumenta -> .

    ID              reduce using rule 130 (aumenta -> .)
    IF              reduce using rule 130 (aumenta -> .)
    WHILE           reduce using rule 130 (aumenta -> .)
    FOR             reduce using rule 130 (aumenta -> .)
    READ            reduce using rule 130 (aumenta -> .)
    WRITE           reduce using rule 130 (aumenta -> .)
    RETURN          reduce using rule 130 (aumenta -> .)
    MEDIA           reduce using rule 130 (aumenta -> .)
    MEDIANA         reduce using rule 130 (aumenta -> .)
    MODA            reduce using rule 130 (aumenta -> .)
    VARIANZA        reduce using rule 130 (aumenta -> .)
    ESDEV           reduce using rule 130 (aumenta -> .)
    RBRACKET        reduce using rule 130 (aumenta -> .)

    aumenta                        shift and go to state 285

state 283

    (35) statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla .

    SEMI            reduce using rule 35 (statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla .)
    TO              reduce using rule 35 (statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla .)


state 284

    (73) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque . condition_end
    (123) condition_end -> .

    ID              reduce using rule 123 (condition_end -> .)
    IF              reduce using rule 123 (condition_end -> .)
    WHILE           reduce using rule 123 (condition_end -> .)
    FOR             reduce using rule 123 (condition_end -> .)
    READ            reduce using rule 123 (condition_end -> .)
    WRITE           reduce using rule 123 (condition_end -> .)
    RETURN          reduce using rule 123 (condition_end -> .)
    MEDIA           reduce using rule 123 (condition_end -> .)
    MEDIANA         reduce using rule 123 (condition_end -> .)
    MODA            reduce using rule 123 (condition_end -> .)
    VARIANZA        reduce using rule 123 (condition_end -> .)
    ESDEV           reduce using rule 123 (condition_end -> .)
    RBRACKET        reduce using rule 123 (condition_end -> .)

    condition_end                  shift and go to state 286

state 285

    (76) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta . loop_for
    (131) loop_for -> .

    ID              reduce using rule 131 (loop_for -> .)
    IF              reduce using rule 131 (loop_for -> .)
    WHILE           reduce using rule 131 (loop_for -> .)
    FOR             reduce using rule 131 (loop_for -> .)
    READ            reduce using rule 131 (loop_for -> .)
    WRITE           reduce using rule 131 (loop_for -> .)
    RETURN          reduce using rule 131 (loop_for -> .)
    MEDIA           reduce using rule 131 (loop_for -> .)
    MEDIANA         reduce using rule 131 (loop_for -> .)
    MODA            reduce using rule 131 (loop_for -> .)
    VARIANZA        reduce using rule 131 (loop_for -> .)
    ESDEV           reduce using rule 131 (loop_for -> .)
    RBRACKET        reduce using rule 131 (loop_for -> .)

    loop_for                       shift and go to state 287

state 286

    (73) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .

    ID              reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    IF              reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    WHILE           reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    FOR             reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    READ            reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    WRITE           reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    RETURN          reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    MEDIA           reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    MEDIANA         reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    MODA            reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    VARIANZA        reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    ESDEV           reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    RBRACKET        reduce using rule 73 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)


state 287

    (76) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .

    ID              reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    IF              reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    WHILE           reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    FOR             reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    READ            reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    WRITE           reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    RETURN          reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    MEDIA           reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    MEDIANA         reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    MODA            reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    VARIANZA        reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    ESDEV           reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    RBRACKET        reduce using rule 76 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)


Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    FOR
    RETURN
    TO

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMI vars funcion main
Rule 2     programa -> PROGRAM ID SEMI funcion main
Rule 3     programa -> PROGRAM ID SEMI vars main
Rule 4     programa -> PROGRAM ID SEMI main
Rule 5     main -> MAIN function_name verifica_name function_all end_main
Rule 6     vars -> VAR list_vars
Rule 7     list_vars -> list_vars SEMI NEWLINE list_vars SEMI
Rule 8     list_vars -> list_vars COMMA ID vars_name vars_type SEMI
Rule 9     list_vars -> memType ID vars_name vars_type
Rule 10    func_vars -> memType ID vars_name vars_type param_type COMMA func_vars
Rule 11    func_vars -> memType ID vars_name vars_type param_type
Rule 12    memType -> INT loType
Rule 13    memType -> FLOAT loType
Rule 14    memType -> CHAR loType
Rule 15    function_all -> LBRACKET vars statement_func RBRACKET
Rule 16    function_all -> LBRACKET vars RBRACKET
Rule 17    function_all -> LBRACKET statement_func RBRACKET
Rule 18    function_all -> LBRACKET RBRACKET
Rule 19    bloque -> LBRACKET statement_func RBRACKET
Rule 20    bloque -> LBRACKET RBRACKET
Rule 21    statement_func -> statement statement_func
Rule 22    statement_func -> statement
Rule 23    statement -> statement_assign SEMI
Rule 24    statement -> statement_function SEMI
Rule 25    statement -> statement_condition SEMI
Rule 26    statement -> statement_while SEMI
Rule 27    statement -> statement_read SEMI
Rule 28    statement -> statement_write SEMI
Rule 29    statement_assign -> ID const_id EQ opera_add expression add_tabla
Rule 30    expression -> expr oper_y AND opera_add expression
Rule 31    expression -> expr oper_y
Rule 32    expr -> expr_aux oper_o OR opera_add expr
Rule 33    expr -> expr_aux oper_o
Rule 34    expr_aux -> expr_sumres expr_rel LT opera_add expr_aux
Rule 35    expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux
Rule 36    expr_aux -> expr_sumres expr_rel GT opera_add expr_aux
Rule 37    expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux
Rule 38    expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux
Rule 39    expr_aux -> expr_sumres expr_rel NE opera_add expr_aux
Rule 40    expr_aux -> expr_sumres expr_rel
Rule 41    expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres
Rule 42    expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres
Rule 43    expr_sumres -> expr_muldiv term_sumres
Rule 44    expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv
Rule 45    expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv
Rule 46    expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv
Rule 47    expr_muldiv -> const term_muldiv
Rule 48    const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
Rule 49    const -> INTEGERCTE const_int
Rule 50    const -> FLOATCTE const_float
Rule 51    const -> CHARCTE const_char
Rule 52    const -> ID const_id
Rule 53    funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
Rule 54    funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
Rule 55    funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
Rule 56    funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
Rule 57    parametro -> LPARENT func_vars RPARENT
Rule 58    parametro -> LPARENT RPARENT
Rule 59    statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
Rule 60    statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
Rule 61    funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux
Rule 62    funcion_aux -> expression revisar_parametro
Rule 63    statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
Rule 64    statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
Rule 65    statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
Rule 66    statement_read -> READ LPARENT read_1 RPARENT
Rule 67    read_1 -> ID read_instr read_1
Rule 68    read_1 -> ID read_instr
Rule 69    statement_write -> WRITE LPARENT write_1 RPARENT
Rule 70    write_1 -> ID write_instr write_1
Rule 71    write_1 -> ID write_instr
Rule 72    loType -> <empty>
Rule 73    vars_name -> <empty>
Rule 74    vars_type -> <empty>
Rule 75    const_id -> <empty>
Rule 76    const_int -> <empty>
Rule 77    const_float -> <empty>
Rule 78    const_char -> <empty>
Rule 79    add_tabla -> <empty>
Rule 80    opera_add -> <empty>
Rule 81    term_sumres -> <empty>
Rule 82    term_muldiv -> <empty>
Rule 83    expr_rel -> <empty>
Rule 84    oper_o -> <empty>
Rule 85    oper_y -> <empty>
Rule 86    fondo_virtual -> <empty>
Rule 87    pop_fondo_virtual -> <empty>
Rule 88    verifica_name -> <empty>
Rule 89    param_type -> <empty>
Rule 90    rev_quad -> <empty>
Rule 91    function_name -> <empty>
Rule 92    fin_funcion -> <empty>
Rule 93    existe_funcion -> <empty>
Rule 94    crea_funcion -> <empty>
Rule 95    crea_subfuncion -> <empty>
Rule 96    verifica_param -> <empty>
Rule 97    cuenta_parametro -> <empty>
Rule 98    revisar_parametro -> <empty>
Rule 99    revisar_expression -> <empty>
Rule 100   else_expression -> <empty>
Rule 101   condition_end -> <empty>
Rule 102   opera_while -> <empty>
Rule 103   condicion_while -> <empty>
Rule 104   loop_while -> <empty>
Rule 105   read_instr -> <empty>
Rule 106   write_instr -> <empty>
Rule 107   end_main -> <empty>

Terminals, with rules where they appear

AND                  : 30
CHAR                 : 14
CHARCTE              : 51
COMMA                : 8 10 61
COMMENT              : 
DIVIDE               : 45
DO                   : 65
ELSE                 : 63
EQ                   : 29
FLOAT                : 13
FLOATCTE             : 50
FOR                  : 
FUNCION              : 53 54 55 56
GT                   : 36
GTE                  : 37
ID                   : 1 2 3 4 8 9 10 11 29 52 53 54 55 56 59 60 67 68 70 71
IF                   : 63 64
INT                  : 12
INTEGERCTE           : 49
LBRACKET             : 15 16 17 18 19 20
LPARENT              : 48 57 58 59 60 63 64 65 66 69
LT                   : 34
LTE                  : 35
MAIN                 : 5
MINUS                : 42
NE                   : 39
NEWLINE              : 7
OR                   : 32
PLUS                 : 41
POWER                : 46
PROGRAM              : 1 2 3 4
RBRACKET             : 15 16 17 18 19 20
READ                 : 66
RETURN               : 
RPARENT              : 48 57 58 59 60 63 64 65 66 69
SEMI                 : 1 2 3 4 7 7 8 23 24 25 26 27 28
SIM                  : 38
THEN                 : 63 64
TIMES                : 44
TO                   : 
VAR                  : 6
VOID                 : 53 55
WHILE                : 65
WRITE                : 69
error                : 

Nonterminals, with rules where they appear

add_tabla            : 29
bloque               : 63 63 64 65
condicion_while      : 65
condition_end        : 63 64
const                : 44 45 46 47
const_char           : 51
const_float          : 50
const_id             : 29 52
const_int            : 49
crea_funcion         : 59 60
crea_subfuncion      : 59 60
cuenta_parametro     : 61
else_expression      : 63
end_main             : 5
existe_funcion       : 59 60
expr                 : 30 31 32
expr_aux             : 32 33 34 35 36 37 38 39
expr_muldiv          : 41 42 43 44 45 46
expr_rel             : 34 35 36 37 38 39 40
expr_sumres          : 34 35 36 37 38 39 40 41 42
expression           : 29 30 48 61 62 63 64 65
fin_funcion          : 53 54 55 56
fondo_virtual        : 48
func_vars            : 10 57
funcion              : 1 2 53 54
funcion_aux          : 59 61
function_all         : 5 53 54 55 56
function_name        : 5 53 54 55 56
list_vars            : 6 7 7 8
loType               : 12 13 14 53 55
loop_while           : 65
main                 : 1 2 3 4
memType              : 9 10 11 54 56
oper_o               : 32 33
oper_y               : 30 31
opera_add            : 29 30 32 34 35 36 37 38 39 41 42 44 45 46
opera_while          : 65
param_type           : 10 11
parametro            : 53 54 55 56
pop_fondo_virtual    : 48
programa             : 0
read_1               : 66 67
read_instr           : 67 68
rev_quad             : 53 54 55 56
revisar_expression   : 63 64
revisar_parametro    : 61 62
statement            : 21 22
statement_assign     : 23
statement_condition  : 25
statement_func       : 15 17 19 21
statement_function   : 24
statement_read       : 27
statement_while      : 26
statement_write      : 28
term_muldiv          : 44 45 46 47
term_sumres          : 41 42 43
vars                 : 1 3 15 16
vars_name            : 8 9 10 11
vars_type            : 8 9 10 11
verifica_name        : 5
verifica_param       : 59
write_1              : 69 70
write_instr          : 70 71

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMI vars funcion main
    (2) programa -> . PROGRAM ID SEMI funcion main
    (3) programa -> . PROGRAM ID SEMI vars main
    (4) programa -> . PROGRAM ID SEMI main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMI vars funcion main
    (2) programa -> PROGRAM . ID SEMI funcion main
    (3) programa -> PROGRAM . ID SEMI vars main
    (4) programa -> PROGRAM . ID SEMI main

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMI vars funcion main
    (2) programa -> PROGRAM ID . SEMI funcion main
    (3) programa -> PROGRAM ID . SEMI vars main
    (4) programa -> PROGRAM ID . SEMI main

    SEMI            shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMI . vars funcion main
    (2) programa -> PROGRAM ID SEMI . funcion main
    (3) programa -> PROGRAM ID SEMI . vars main
    (4) programa -> PROGRAM ID SEMI . main
    (6) vars -> . VAR list_vars
    (53) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (54) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (55) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (56) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
    (5) main -> . MAIN function_name verifica_name function_all end_main

    VAR             shift and go to state 8
    FUNCION         shift and go to state 9
    MAIN            shift and go to state 10

    vars                           shift and go to state 5
    funcion                        shift and go to state 6
    main                           shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMI vars . funcion main
    (3) programa -> PROGRAM ID SEMI vars . main
    (53) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (54) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (55) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (56) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
    (5) main -> . MAIN function_name verifica_name function_all end_main

    FUNCION         shift and go to state 9
    MAIN            shift and go to state 10

    funcion                        shift and go to state 11
    main                           shift and go to state 12

state 6

    (2) programa -> PROGRAM ID SEMI funcion . main
    (5) main -> . MAIN function_name verifica_name function_all end_main

    MAIN            shift and go to state 10

    main                           shift and go to state 13

state 7

    (4) programa -> PROGRAM ID SEMI main .

    $end            reduce using rule 4 (programa -> PROGRAM ID SEMI main .)


state 8

    (6) vars -> VAR . list_vars
    (7) list_vars -> . list_vars SEMI NEWLINE list_vars SEMI
    (8) list_vars -> . list_vars COMMA ID vars_name vars_type SEMI
    (9) list_vars -> . memType ID vars_name vars_type
    (12) memType -> . INT loType
    (13) memType -> . FLOAT loType
    (14) memType -> . CHAR loType

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    list_vars                      shift and go to state 14
    memType                        shift and go to state 15

state 9

    (53) funcion -> FUNCION . VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (54) funcion -> FUNCION . memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (55) funcion -> FUNCION . VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (56) funcion -> FUNCION . memType ID function_name parametro rev_quad function_all fin_funcion
    (12) memType -> . INT loType
    (13) memType -> . FLOAT loType
    (14) memType -> . CHAR loType

    VOID            shift and go to state 19
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    memType                        shift and go to state 20

state 10

    (5) main -> MAIN . function_name verifica_name function_all end_main
    (91) function_name -> .

    LBRACKET        reduce using rule 91 (function_name -> .)

    function_name                  shift and go to state 21

state 11

    (1) programa -> PROGRAM ID SEMI vars funcion . main
    (5) main -> . MAIN function_name verifica_name function_all end_main

    MAIN            shift and go to state 10

    main                           shift and go to state 22

state 12

    (3) programa -> PROGRAM ID SEMI vars main .

    $end            reduce using rule 3 (programa -> PROGRAM ID SEMI vars main .)


state 13

    (2) programa -> PROGRAM ID SEMI funcion main .

    $end            reduce using rule 2 (programa -> PROGRAM ID SEMI funcion main .)


state 14

    (6) vars -> VAR list_vars .
    (7) list_vars -> list_vars . SEMI NEWLINE list_vars SEMI
    (8) list_vars -> list_vars . COMMA ID vars_name vars_type SEMI

    FUNCION         reduce using rule 6 (vars -> VAR list_vars .)
    MAIN            reduce using rule 6 (vars -> VAR list_vars .)
    RBRACKET        reduce using rule 6 (vars -> VAR list_vars .)
    ID              reduce using rule 6 (vars -> VAR list_vars .)
    IF              reduce using rule 6 (vars -> VAR list_vars .)
    WHILE           reduce using rule 6 (vars -> VAR list_vars .)
    READ            reduce using rule 6 (vars -> VAR list_vars .)
    WRITE           reduce using rule 6 (vars -> VAR list_vars .)
    SEMI            shift and go to state 23
    COMMA           shift and go to state 24


state 15

    (9) list_vars -> memType . ID vars_name vars_type

    ID              shift and go to state 25


state 16

    (12) memType -> INT . loType
    (72) loType -> .

    ID              reduce using rule 72 (loType -> .)

    loType                         shift and go to state 26

state 17

    (13) memType -> FLOAT . loType
    (72) loType -> .

    ID              reduce using rule 72 (loType -> .)

    loType                         shift and go to state 27

state 18

    (14) memType -> CHAR . loType
    (72) loType -> .

    ID              reduce using rule 72 (loType -> .)

    loType                         shift and go to state 28

state 19

    (53) funcion -> FUNCION VOID . loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (55) funcion -> FUNCION VOID . loType ID function_name parametro rev_quad function_all fin_funcion
    (72) loType -> .

    ID              reduce using rule 72 (loType -> .)

    loType                         shift and go to state 29

state 20

    (54) funcion -> FUNCION memType . ID function_name parametro rev_quad function_all fin_funcion funcion
    (56) funcion -> FUNCION memType . ID function_name parametro rev_quad function_all fin_funcion

    ID              shift and go to state 30


state 21

    (5) main -> MAIN function_name . verifica_name function_all end_main
    (88) verifica_name -> .

    LBRACKET        reduce using rule 88 (verifica_name -> .)

    verifica_name                  shift and go to state 31

state 22

    (1) programa -> PROGRAM ID SEMI vars funcion main .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMI vars funcion main .)


state 23

    (7) list_vars -> list_vars SEMI . NEWLINE list_vars SEMI

    NEWLINE         shift and go to state 32


state 24

    (8) list_vars -> list_vars COMMA . ID vars_name vars_type SEMI

    ID              shift and go to state 33


state 25

    (9) list_vars -> memType ID . vars_name vars_type
    (73) vars_name -> .

    SEMI            reduce using rule 73 (vars_name -> .)
    COMMA           reduce using rule 73 (vars_name -> .)
    FUNCION         reduce using rule 73 (vars_name -> .)
    MAIN            reduce using rule 73 (vars_name -> .)
    RBRACKET        reduce using rule 73 (vars_name -> .)
    ID              reduce using rule 73 (vars_name -> .)
    IF              reduce using rule 73 (vars_name -> .)
    WHILE           reduce using rule 73 (vars_name -> .)
    READ            reduce using rule 73 (vars_name -> .)
    WRITE           reduce using rule 73 (vars_name -> .)

    vars_name                      shift and go to state 34

state 26

    (12) memType -> INT loType .

    ID              reduce using rule 12 (memType -> INT loType .)


state 27

    (13) memType -> FLOAT loType .

    ID              reduce using rule 13 (memType -> FLOAT loType .)


state 28

    (14) memType -> CHAR loType .

    ID              reduce using rule 14 (memType -> CHAR loType .)


state 29

    (53) funcion -> FUNCION VOID loType . ID function_name parametro rev_quad function_all fin_funcion funcion
    (55) funcion -> FUNCION VOID loType . ID function_name parametro rev_quad function_all fin_funcion

    ID              shift and go to state 35


state 30

    (54) funcion -> FUNCION memType ID . function_name parametro rev_quad function_all fin_funcion funcion
    (56) funcion -> FUNCION memType ID . function_name parametro rev_quad function_all fin_funcion
    (91) function_name -> .

    LPARENT         reduce using rule 91 (function_name -> .)

    function_name                  shift and go to state 36

state 31

    (5) main -> MAIN function_name verifica_name . function_all end_main
    (15) function_all -> . LBRACKET vars statement_func RBRACKET
    (16) function_all -> . LBRACKET vars RBRACKET
    (17) function_all -> . LBRACKET statement_func RBRACKET
    (18) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 38

    function_all                   shift and go to state 37

state 32

    (7) list_vars -> list_vars SEMI NEWLINE . list_vars SEMI
    (7) list_vars -> . list_vars SEMI NEWLINE list_vars SEMI
    (8) list_vars -> . list_vars COMMA ID vars_name vars_type SEMI
    (9) list_vars -> . memType ID vars_name vars_type
    (12) memType -> . INT loType
    (13) memType -> . FLOAT loType
    (14) memType -> . CHAR loType

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    list_vars                      shift and go to state 39
    memType                        shift and go to state 15

state 33

    (8) list_vars -> list_vars COMMA ID . vars_name vars_type SEMI
    (73) vars_name -> .

    SEMI            reduce using rule 73 (vars_name -> .)

    vars_name                      shift and go to state 40

state 34

    (9) list_vars -> memType ID vars_name . vars_type
    (74) vars_type -> .

    SEMI            reduce using rule 74 (vars_type -> .)
    COMMA           reduce using rule 74 (vars_type -> .)
    FUNCION         reduce using rule 74 (vars_type -> .)
    MAIN            reduce using rule 74 (vars_type -> .)
    RBRACKET        reduce using rule 74 (vars_type -> .)
    ID              reduce using rule 74 (vars_type -> .)
    IF              reduce using rule 74 (vars_type -> .)
    WHILE           reduce using rule 74 (vars_type -> .)
    READ            reduce using rule 74 (vars_type -> .)
    WRITE           reduce using rule 74 (vars_type -> .)

    vars_type                      shift and go to state 41

state 35

    (53) funcion -> FUNCION VOID loType ID . function_name parametro rev_quad function_all fin_funcion funcion
    (55) funcion -> FUNCION VOID loType ID . function_name parametro rev_quad function_all fin_funcion
    (91) function_name -> .

    LPARENT         reduce using rule 91 (function_name -> .)

    function_name                  shift and go to state 42

state 36

    (54) funcion -> FUNCION memType ID function_name . parametro rev_quad function_all fin_funcion funcion
    (56) funcion -> FUNCION memType ID function_name . parametro rev_quad function_all fin_funcion
    (57) parametro -> . LPARENT func_vars RPARENT
    (58) parametro -> . LPARENT RPARENT

    LPARENT         shift and go to state 44

    parametro                      shift and go to state 43

state 37

    (5) main -> MAIN function_name verifica_name function_all . end_main
    (107) end_main -> .

    $end            reduce using rule 107 (end_main -> .)

    end_main                       shift and go to state 45

state 38

    (15) function_all -> LBRACKET . vars statement_func RBRACKET
    (16) function_all -> LBRACKET . vars RBRACKET
    (17) function_all -> LBRACKET . statement_func RBRACKET
    (18) function_all -> LBRACKET . RBRACKET
    (6) vars -> . VAR list_vars
    (21) statement_func -> . statement statement_func
    (22) statement_func -> . statement
    (23) statement -> . statement_assign SEMI
    (24) statement -> . statement_function SEMI
    (25) statement -> . statement_condition SEMI
    (26) statement -> . statement_while SEMI
    (27) statement -> . statement_read SEMI
    (28) statement -> . statement_write SEMI
    (29) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (59) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (60) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (63) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (64) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (65) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (66) statement_read -> . READ LPARENT read_1 RPARENT
    (69) statement_write -> . WRITE LPARENT write_1 RPARENT

    RBRACKET        shift and go to state 48
    VAR             shift and go to state 8
    ID              shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60

    vars                           shift and go to state 46
    statement_func                 shift and go to state 47
    statement                      shift and go to state 49
    statement_assign               shift and go to state 50
    statement_function             shift and go to state 51
    statement_condition            shift and go to state 52
    statement_while                shift and go to state 53
    statement_read                 shift and go to state 54
    statement_write                shift and go to state 55

state 39

    (7) list_vars -> list_vars SEMI NEWLINE list_vars . SEMI
    (7) list_vars -> list_vars . SEMI NEWLINE list_vars SEMI
    (8) list_vars -> list_vars . COMMA ID vars_name vars_type SEMI

    SEMI            shift and go to state 61
    COMMA           shift and go to state 24


state 40

    (8) list_vars -> list_vars COMMA ID vars_name . vars_type SEMI
    (74) vars_type -> .

    SEMI            reduce using rule 74 (vars_type -> .)

    vars_type                      shift and go to state 62

state 41

    (9) list_vars -> memType ID vars_name vars_type .

    SEMI            reduce using rule 9 (list_vars -> memType ID vars_name vars_type .)
    COMMA           reduce using rule 9 (list_vars -> memType ID vars_name vars_type .)
    FUNCION         reduce using rule 9 (list_vars -> memType ID vars_name vars_type .)
    MAIN            reduce using rule 9 (list_vars -> memType ID vars_name vars_type .)
    RBRACKET        reduce using rule 9 (list_vars -> memType ID vars_name vars_type .)
    ID              reduce using rule 9 (list_vars -> memType ID vars_name vars_type .)
    IF              reduce using rule 9 (list_vars -> memType ID vars_name vars_type .)
    WHILE           reduce using rule 9 (list_vars -> memType ID vars_name vars_type .)
    READ            reduce using rule 9 (list_vars -> memType ID vars_name vars_type .)
    WRITE           reduce using rule 9 (list_vars -> memType ID vars_name vars_type .)


state 42

    (53) funcion -> FUNCION VOID loType ID function_name . parametro rev_quad function_all fin_funcion funcion
    (55) funcion -> FUNCION VOID loType ID function_name . parametro rev_quad function_all fin_funcion
    (57) parametro -> . LPARENT func_vars RPARENT
    (58) parametro -> . LPARENT RPARENT

    LPARENT         shift and go to state 44

    parametro                      shift and go to state 63

state 43

    (54) funcion -> FUNCION memType ID function_name parametro . rev_quad function_all fin_funcion funcion
    (56) funcion -> FUNCION memType ID function_name parametro . rev_quad function_all fin_funcion
    (90) rev_quad -> .

    LBRACKET        reduce using rule 90 (rev_quad -> .)

    rev_quad                       shift and go to state 64

state 44

    (57) parametro -> LPARENT . func_vars RPARENT
    (58) parametro -> LPARENT . RPARENT
    (10) func_vars -> . memType ID vars_name vars_type param_type COMMA func_vars
    (11) func_vars -> . memType ID vars_name vars_type param_type
    (12) memType -> . INT loType
    (13) memType -> . FLOAT loType
    (14) memType -> . CHAR loType

    RPARENT         shift and go to state 66
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    func_vars                      shift and go to state 65
    memType                        shift and go to state 67

state 45

    (5) main -> MAIN function_name verifica_name function_all end_main .

    $end            reduce using rule 5 (main -> MAIN function_name verifica_name function_all end_main .)


state 46

    (15) function_all -> LBRACKET vars . statement_func RBRACKET
    (16) function_all -> LBRACKET vars . RBRACKET
    (21) statement_func -> . statement statement_func
    (22) statement_func -> . statement
    (23) statement -> . statement_assign SEMI
    (24) statement -> . statement_function SEMI
    (25) statement -> . statement_condition SEMI
    (26) statement -> . statement_while SEMI
    (27) statement -> . statement_read SEMI
    (28) statement -> . statement_write SEMI
    (29) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (59) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (60) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (63) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (64) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (65) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (66) statement_read -> . READ LPARENT read_1 RPARENT
    (69) statement_write -> . WRITE LPARENT write_1 RPARENT

    RBRACKET        shift and go to state 69
    ID              shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60

    statement_func                 shift and go to state 68
    statement                      shift and go to state 49
    statement_assign               shift and go to state 50
    statement_function             shift and go to state 51
    statement_condition            shift and go to state 52
    statement_while                shift and go to state 53
    statement_read                 shift and go to state 54
    statement_write                shift and go to state 55

state 47

    (17) function_all -> LBRACKET statement_func . RBRACKET

    RBRACKET        shift and go to state 70


state 48

    (18) function_all -> LBRACKET RBRACKET .

    $end            reduce using rule 18 (function_all -> LBRACKET RBRACKET .)
    FUNCION         reduce using rule 18 (function_all -> LBRACKET RBRACKET .)
    MAIN            reduce using rule 18 (function_all -> LBRACKET RBRACKET .)


state 49

    (21) statement_func -> statement . statement_func
    (22) statement_func -> statement .
    (21) statement_func -> . statement statement_func
    (22) statement_func -> . statement
    (23) statement -> . statement_assign SEMI
    (24) statement -> . statement_function SEMI
    (25) statement -> . statement_condition SEMI
    (26) statement -> . statement_while SEMI
    (27) statement -> . statement_read SEMI
    (28) statement -> . statement_write SEMI
    (29) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (59) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (60) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (63) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (64) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (65) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (66) statement_read -> . READ LPARENT read_1 RPARENT
    (69) statement_write -> . WRITE LPARENT write_1 RPARENT

    RBRACKET        reduce using rule 22 (statement_func -> statement .)
    ID              shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60

    statement                      shift and go to state 49
    statement_func                 shift and go to state 71
    statement_assign               shift and go to state 50
    statement_function             shift and go to state 51
    statement_condition            shift and go to state 52
    statement_while                shift and go to state 53
    statement_read                 shift and go to state 54
    statement_write                shift and go to state 55

state 50

    (23) statement -> statement_assign . SEMI

    SEMI            shift and go to state 72


state 51

    (24) statement -> statement_function . SEMI

    SEMI            shift and go to state 73


state 52

    (25) statement -> statement_condition . SEMI

    SEMI            shift and go to state 74


state 53

    (26) statement -> statement_while . SEMI

    SEMI            shift and go to state 75


state 54

    (27) statement -> statement_read . SEMI

    SEMI            shift and go to state 76


state 55

    (28) statement -> statement_write . SEMI

    SEMI            shift and go to state 77


state 56

    (29) statement_assign -> ID . const_id EQ opera_add expression add_tabla
    (59) statement_function -> ID . existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (60) statement_function -> ID . existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (75) const_id -> .
    (93) existe_funcion -> .

    EQ              reduce using rule 75 (const_id -> .)
    LPARENT         reduce using rule 93 (existe_funcion -> .)

    const_id                       shift and go to state 78
    existe_funcion                 shift and go to state 79

state 57

    (63) statement_condition -> IF . LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (64) statement_condition -> IF . LPARENT expression RPARENT THEN revisar_expression bloque condition_end

    LPARENT         shift and go to state 80


state 58

    (65) statement_while -> WHILE . opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (102) opera_while -> .

    LPARENT         reduce using rule 102 (opera_while -> .)

    opera_while                    shift and go to state 81

state 59

    (66) statement_read -> READ . LPARENT read_1 RPARENT

    LPARENT         shift and go to state 82


state 60

    (69) statement_write -> WRITE . LPARENT write_1 RPARENT

    LPARENT         shift and go to state 83


state 61

    (7) list_vars -> list_vars SEMI NEWLINE list_vars SEMI .
    (7) list_vars -> list_vars SEMI . NEWLINE list_vars SEMI

    SEMI            reduce using rule 7 (list_vars -> list_vars SEMI NEWLINE list_vars SEMI .)
    COMMA           reduce using rule 7 (list_vars -> list_vars SEMI NEWLINE list_vars SEMI .)
    FUNCION         reduce using rule 7 (list_vars -> list_vars SEMI NEWLINE list_vars SEMI .)
    MAIN            reduce using rule 7 (list_vars -> list_vars SEMI NEWLINE list_vars SEMI .)
    RBRACKET        reduce using rule 7 (list_vars -> list_vars SEMI NEWLINE list_vars SEMI .)
    ID              reduce using rule 7 (list_vars -> list_vars SEMI NEWLINE list_vars SEMI .)
    IF              reduce using rule 7 (list_vars -> list_vars SEMI NEWLINE list_vars SEMI .)
    WHILE           reduce using rule 7 (list_vars -> list_vars SEMI NEWLINE list_vars SEMI .)
    READ            reduce using rule 7 (list_vars -> list_vars SEMI NEWLINE list_vars SEMI .)
    WRITE           reduce using rule 7 (list_vars -> list_vars SEMI NEWLINE list_vars SEMI .)
    NEWLINE         shift and go to state 32


state 62

    (8) list_vars -> list_vars COMMA ID vars_name vars_type . SEMI

    SEMI            shift and go to state 84


state 63

    (53) funcion -> FUNCION VOID loType ID function_name parametro . rev_quad function_all fin_funcion funcion
    (55) funcion -> FUNCION VOID loType ID function_name parametro . rev_quad function_all fin_funcion
    (90) rev_quad -> .

    LBRACKET        reduce using rule 90 (rev_quad -> .)

    rev_quad                       shift and go to state 85

state 64

    (54) funcion -> FUNCION memType ID function_name parametro rev_quad . function_all fin_funcion funcion
    (56) funcion -> FUNCION memType ID function_name parametro rev_quad . function_all fin_funcion
    (15) function_all -> . LBRACKET vars statement_func RBRACKET
    (16) function_all -> . LBRACKET vars RBRACKET
    (17) function_all -> . LBRACKET statement_func RBRACKET
    (18) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 38

    function_all                   shift and go to state 86

state 65

    (57) parametro -> LPARENT func_vars . RPARENT

    RPARENT         shift and go to state 87


state 66

    (58) parametro -> LPARENT RPARENT .

    LBRACKET        reduce using rule 58 (parametro -> LPARENT RPARENT .)


state 67

    (10) func_vars -> memType . ID vars_name vars_type param_type COMMA func_vars
    (11) func_vars -> memType . ID vars_name vars_type param_type

    ID              shift and go to state 88


state 68

    (15) function_all -> LBRACKET vars statement_func . RBRACKET

    RBRACKET        shift and go to state 89


state 69

    (16) function_all -> LBRACKET vars RBRACKET .

    $end            reduce using rule 16 (function_all -> LBRACKET vars RBRACKET .)
    FUNCION         reduce using rule 16 (function_all -> LBRACKET vars RBRACKET .)
    MAIN            reduce using rule 16 (function_all -> LBRACKET vars RBRACKET .)


state 70

    (17) function_all -> LBRACKET statement_func RBRACKET .

    $end            reduce using rule 17 (function_all -> LBRACKET statement_func RBRACKET .)
    FUNCION         reduce using rule 17 (function_all -> LBRACKET statement_func RBRACKET .)
    MAIN            reduce using rule 17 (function_all -> LBRACKET statement_func RBRACKET .)


state 71

    (21) statement_func -> statement statement_func .

    RBRACKET        reduce using rule 21 (statement_func -> statement statement_func .)


state 72

    (23) statement -> statement_assign SEMI .

    ID              reduce using rule 23 (statement -> statement_assign SEMI .)
    IF              reduce using rule 23 (statement -> statement_assign SEMI .)
    WHILE           reduce using rule 23 (statement -> statement_assign SEMI .)
    READ            reduce using rule 23 (statement -> statement_assign SEMI .)
    WRITE           reduce using rule 23 (statement -> statement_assign SEMI .)
    RBRACKET        reduce using rule 23 (statement -> statement_assign SEMI .)


state 73

    (24) statement -> statement_function SEMI .

    ID              reduce using rule 24 (statement -> statement_function SEMI .)
    IF              reduce using rule 24 (statement -> statement_function SEMI .)
    WHILE           reduce using rule 24 (statement -> statement_function SEMI .)
    READ            reduce using rule 24 (statement -> statement_function SEMI .)
    WRITE           reduce using rule 24 (statement -> statement_function SEMI .)
    RBRACKET        reduce using rule 24 (statement -> statement_function SEMI .)


state 74

    (25) statement -> statement_condition SEMI .

    ID              reduce using rule 25 (statement -> statement_condition SEMI .)
    IF              reduce using rule 25 (statement -> statement_condition SEMI .)
    WHILE           reduce using rule 25 (statement -> statement_condition SEMI .)
    READ            reduce using rule 25 (statement -> statement_condition SEMI .)
    WRITE           reduce using rule 25 (statement -> statement_condition SEMI .)
    RBRACKET        reduce using rule 25 (statement -> statement_condition SEMI .)


state 75

    (26) statement -> statement_while SEMI .

    ID              reduce using rule 26 (statement -> statement_while SEMI .)
    IF              reduce using rule 26 (statement -> statement_while SEMI .)
    WHILE           reduce using rule 26 (statement -> statement_while SEMI .)
    READ            reduce using rule 26 (statement -> statement_while SEMI .)
    WRITE           reduce using rule 26 (statement -> statement_while SEMI .)
    RBRACKET        reduce using rule 26 (statement -> statement_while SEMI .)


state 76

    (27) statement -> statement_read SEMI .

    ID              reduce using rule 27 (statement -> statement_read SEMI .)
    IF              reduce using rule 27 (statement -> statement_read SEMI .)
    WHILE           reduce using rule 27 (statement -> statement_read SEMI .)
    READ            reduce using rule 27 (statement -> statement_read SEMI .)
    WRITE           reduce using rule 27 (statement -> statement_read SEMI .)
    RBRACKET        reduce using rule 27 (statement -> statement_read SEMI .)


state 77

    (28) statement -> statement_write SEMI .

    ID              reduce using rule 28 (statement -> statement_write SEMI .)
    IF              reduce using rule 28 (statement -> statement_write SEMI .)
    WHILE           reduce using rule 28 (statement -> statement_write SEMI .)
    READ            reduce using rule 28 (statement -> statement_write SEMI .)
    WRITE           reduce using rule 28 (statement -> statement_write SEMI .)
    RBRACKET        reduce using rule 28 (statement -> statement_write SEMI .)


state 78

    (29) statement_assign -> ID const_id . EQ opera_add expression add_tabla

    EQ              shift and go to state 90


state 79

    (59) statement_function -> ID existe_funcion . crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (60) statement_function -> ID existe_funcion . crea_funcion LPARENT RPARENT crea_subfuncion
    (94) crea_funcion -> .

    LPARENT         reduce using rule 94 (crea_funcion -> .)

    crea_funcion                   shift and go to state 91

state 80

    (63) statement_condition -> IF LPARENT . expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (64) statement_condition -> IF LPARENT . expression RPARENT THEN revisar_expression bloque condition_end
    (30) expression -> . expr oper_y AND opera_add expression
    (31) expression -> . expr oper_y
    (32) expr -> . expr_aux oper_o OR opera_add expr
    (33) expr -> . expr_aux oper_o
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expression                     shift and go to state 93
    expr                           shift and go to state 94
    expr_aux                       shift and go to state 95
    expr_sumres                    shift and go to state 96
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 81

    (65) statement_while -> WHILE opera_while . LPARENT expression RPARENT condicion_while DO bloque loop_while

    LPARENT         shift and go to state 103


state 82

    (66) statement_read -> READ LPARENT . read_1 RPARENT
    (67) read_1 -> . ID read_instr read_1
    (68) read_1 -> . ID read_instr

    ID              shift and go to state 105

    read_1                         shift and go to state 104

state 83

    (69) statement_write -> WRITE LPARENT . write_1 RPARENT
    (70) write_1 -> . ID write_instr write_1
    (71) write_1 -> . ID write_instr

    ID              shift and go to state 107

    write_1                        shift and go to state 106

state 84

    (8) list_vars -> list_vars COMMA ID vars_name vars_type SEMI .

    SEMI            reduce using rule 8 (list_vars -> list_vars COMMA ID vars_name vars_type SEMI .)
    COMMA           reduce using rule 8 (list_vars -> list_vars COMMA ID vars_name vars_type SEMI .)
    FUNCION         reduce using rule 8 (list_vars -> list_vars COMMA ID vars_name vars_type SEMI .)
    MAIN            reduce using rule 8 (list_vars -> list_vars COMMA ID vars_name vars_type SEMI .)
    RBRACKET        reduce using rule 8 (list_vars -> list_vars COMMA ID vars_name vars_type SEMI .)
    ID              reduce using rule 8 (list_vars -> list_vars COMMA ID vars_name vars_type SEMI .)
    IF              reduce using rule 8 (list_vars -> list_vars COMMA ID vars_name vars_type SEMI .)
    WHILE           reduce using rule 8 (list_vars -> list_vars COMMA ID vars_name vars_type SEMI .)
    READ            reduce using rule 8 (list_vars -> list_vars COMMA ID vars_name vars_type SEMI .)
    WRITE           reduce using rule 8 (list_vars -> list_vars COMMA ID vars_name vars_type SEMI .)


state 85

    (53) funcion -> FUNCION VOID loType ID function_name parametro rev_quad . function_all fin_funcion funcion
    (55) funcion -> FUNCION VOID loType ID function_name parametro rev_quad . function_all fin_funcion
    (15) function_all -> . LBRACKET vars statement_func RBRACKET
    (16) function_all -> . LBRACKET vars RBRACKET
    (17) function_all -> . LBRACKET statement_func RBRACKET
    (18) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 38

    function_all                   shift and go to state 108

state 86

    (54) funcion -> FUNCION memType ID function_name parametro rev_quad function_all . fin_funcion funcion
    (56) funcion -> FUNCION memType ID function_name parametro rev_quad function_all . fin_funcion
    (92) fin_funcion -> .

    FUNCION         reduce using rule 92 (fin_funcion -> .)
    MAIN            reduce using rule 92 (fin_funcion -> .)

    fin_funcion                    shift and go to state 109

state 87

    (57) parametro -> LPARENT func_vars RPARENT .

    LBRACKET        reduce using rule 57 (parametro -> LPARENT func_vars RPARENT .)


state 88

    (10) func_vars -> memType ID . vars_name vars_type param_type COMMA func_vars
    (11) func_vars -> memType ID . vars_name vars_type param_type
    (73) vars_name -> .

    COMMA           reduce using rule 73 (vars_name -> .)
    RPARENT         reduce using rule 73 (vars_name -> .)

    vars_name                      shift and go to state 110

state 89

    (15) function_all -> LBRACKET vars statement_func RBRACKET .

    $end            reduce using rule 15 (function_all -> LBRACKET vars statement_func RBRACKET .)
    FUNCION         reduce using rule 15 (function_all -> LBRACKET vars statement_func RBRACKET .)
    MAIN            reduce using rule 15 (function_all -> LBRACKET vars statement_func RBRACKET .)


state 90

    (29) statement_assign -> ID const_id EQ . opera_add expression add_tabla
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 111

state 91

    (59) statement_function -> ID existe_funcion crea_funcion . LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (60) statement_function -> ID existe_funcion crea_funcion . LPARENT RPARENT crea_subfuncion

    LPARENT         shift and go to state 112


state 92

    (48) const -> LPARENT . fondo_virtual expression RPARENT pop_fondo_virtual
    (86) fondo_virtual -> .

    LPARENT         reduce using rule 86 (fondo_virtual -> .)
    INTEGERCTE      reduce using rule 86 (fondo_virtual -> .)
    FLOATCTE        reduce using rule 86 (fondo_virtual -> .)
    CHARCTE         reduce using rule 86 (fondo_virtual -> .)
    ID              reduce using rule 86 (fondo_virtual -> .)

    fondo_virtual                  shift and go to state 113

state 93

    (63) statement_condition -> IF LPARENT expression . RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (64) statement_condition -> IF LPARENT expression . RPARENT THEN revisar_expression bloque condition_end

    RPARENT         shift and go to state 114


state 94

    (30) expression -> expr . oper_y AND opera_add expression
    (31) expression -> expr . oper_y
    (85) oper_y -> .

    AND             reduce using rule 85 (oper_y -> .)
    RPARENT         reduce using rule 85 (oper_y -> .)
    SEMI            reduce using rule 85 (oper_y -> .)
    COMMA           reduce using rule 85 (oper_y -> .)

    oper_y                         shift and go to state 115

state 95

    (32) expr -> expr_aux . oper_o OR opera_add expr
    (33) expr -> expr_aux . oper_o
    (84) oper_o -> .

    OR              reduce using rule 84 (oper_o -> .)
    AND             reduce using rule 84 (oper_o -> .)
    RPARENT         reduce using rule 84 (oper_o -> .)
    SEMI            reduce using rule 84 (oper_o -> .)
    COMMA           reduce using rule 84 (oper_o -> .)

    oper_o                         shift and go to state 116

state 96

    (34) expr_aux -> expr_sumres . expr_rel LT opera_add expr_aux
    (35) expr_aux -> expr_sumres . expr_rel LTE opera_add expr_aux
    (36) expr_aux -> expr_sumres . expr_rel GT opera_add expr_aux
    (37) expr_aux -> expr_sumres . expr_rel GTE opera_add expr_aux
    (38) expr_aux -> expr_sumres . expr_rel SIM opera_add expr_aux
    (39) expr_aux -> expr_sumres . expr_rel NE opera_add expr_aux
    (40) expr_aux -> expr_sumres . expr_rel
    (83) expr_rel -> .

    LT              reduce using rule 83 (expr_rel -> .)
    LTE             reduce using rule 83 (expr_rel -> .)
    GT              reduce using rule 83 (expr_rel -> .)
    GTE             reduce using rule 83 (expr_rel -> .)
    SIM             reduce using rule 83 (expr_rel -> .)
    NE              reduce using rule 83 (expr_rel -> .)
    OR              reduce using rule 83 (expr_rel -> .)
    AND             reduce using rule 83 (expr_rel -> .)
    RPARENT         reduce using rule 83 (expr_rel -> .)
    SEMI            reduce using rule 83 (expr_rel -> .)
    COMMA           reduce using rule 83 (expr_rel -> .)

    expr_rel                       shift and go to state 117

state 97

    (41) expr_sumres -> expr_muldiv . term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> expr_muldiv . term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> expr_muldiv . term_sumres
    (81) term_sumres -> .

    PLUS            reduce using rule 81 (term_sumres -> .)
    MINUS           reduce using rule 81 (term_sumres -> .)
    LT              reduce using rule 81 (term_sumres -> .)
    LTE             reduce using rule 81 (term_sumres -> .)
    GT              reduce using rule 81 (term_sumres -> .)
    GTE             reduce using rule 81 (term_sumres -> .)
    SIM             reduce using rule 81 (term_sumres -> .)
    NE              reduce using rule 81 (term_sumres -> .)
    OR              reduce using rule 81 (term_sumres -> .)
    AND             reduce using rule 81 (term_sumres -> .)
    RPARENT         reduce using rule 81 (term_sumres -> .)
    SEMI            reduce using rule 81 (term_sumres -> .)
    COMMA           reduce using rule 81 (term_sumres -> .)

    term_sumres                    shift and go to state 118

state 98

    (44) expr_muldiv -> const . term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> const . term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> const . term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> const . term_muldiv
    (82) term_muldiv -> .

    TIMES           reduce using rule 82 (term_muldiv -> .)
    DIVIDE          reduce using rule 82 (term_muldiv -> .)
    POWER           reduce using rule 82 (term_muldiv -> .)
    PLUS            reduce using rule 82 (term_muldiv -> .)
    MINUS           reduce using rule 82 (term_muldiv -> .)
    LT              reduce using rule 82 (term_muldiv -> .)
    LTE             reduce using rule 82 (term_muldiv -> .)
    GT              reduce using rule 82 (term_muldiv -> .)
    GTE             reduce using rule 82 (term_muldiv -> .)
    SIM             reduce using rule 82 (term_muldiv -> .)
    NE              reduce using rule 82 (term_muldiv -> .)
    OR              reduce using rule 82 (term_muldiv -> .)
    AND             reduce using rule 82 (term_muldiv -> .)
    RPARENT         reduce using rule 82 (term_muldiv -> .)
    SEMI            reduce using rule 82 (term_muldiv -> .)
    COMMA           reduce using rule 82 (term_muldiv -> .)

    term_muldiv                    shift and go to state 119

state 99

    (49) const -> INTEGERCTE . const_int
    (76) const_int -> .

    TIMES           reduce using rule 76 (const_int -> .)
    DIVIDE          reduce using rule 76 (const_int -> .)
    POWER           reduce using rule 76 (const_int -> .)
    PLUS            reduce using rule 76 (const_int -> .)
    MINUS           reduce using rule 76 (const_int -> .)
    LT              reduce using rule 76 (const_int -> .)
    LTE             reduce using rule 76 (const_int -> .)
    GT              reduce using rule 76 (const_int -> .)
    GTE             reduce using rule 76 (const_int -> .)
    SIM             reduce using rule 76 (const_int -> .)
    NE              reduce using rule 76 (const_int -> .)
    OR              reduce using rule 76 (const_int -> .)
    AND             reduce using rule 76 (const_int -> .)
    RPARENT         reduce using rule 76 (const_int -> .)
    SEMI            reduce using rule 76 (const_int -> .)
    COMMA           reduce using rule 76 (const_int -> .)

    const_int                      shift and go to state 120

state 100

    (50) const -> FLOATCTE . const_float
    (77) const_float -> .

    TIMES           reduce using rule 77 (const_float -> .)
    DIVIDE          reduce using rule 77 (const_float -> .)
    POWER           reduce using rule 77 (const_float -> .)
    PLUS            reduce using rule 77 (const_float -> .)
    MINUS           reduce using rule 77 (const_float -> .)
    LT              reduce using rule 77 (const_float -> .)
    LTE             reduce using rule 77 (const_float -> .)
    GT              reduce using rule 77 (const_float -> .)
    GTE             reduce using rule 77 (const_float -> .)
    SIM             reduce using rule 77 (const_float -> .)
    NE              reduce using rule 77 (const_float -> .)
    OR              reduce using rule 77 (const_float -> .)
    AND             reduce using rule 77 (const_float -> .)
    RPARENT         reduce using rule 77 (const_float -> .)
    SEMI            reduce using rule 77 (const_float -> .)
    COMMA           reduce using rule 77 (const_float -> .)

    const_float                    shift and go to state 121

state 101

    (51) const -> CHARCTE . const_char
    (78) const_char -> .

    TIMES           reduce using rule 78 (const_char -> .)
    DIVIDE          reduce using rule 78 (const_char -> .)
    POWER           reduce using rule 78 (const_char -> .)
    PLUS            reduce using rule 78 (const_char -> .)
    MINUS           reduce using rule 78 (const_char -> .)
    LT              reduce using rule 78 (const_char -> .)
    LTE             reduce using rule 78 (const_char -> .)
    GT              reduce using rule 78 (const_char -> .)
    GTE             reduce using rule 78 (const_char -> .)
    SIM             reduce using rule 78 (const_char -> .)
    NE              reduce using rule 78 (const_char -> .)
    OR              reduce using rule 78 (const_char -> .)
    AND             reduce using rule 78 (const_char -> .)
    RPARENT         reduce using rule 78 (const_char -> .)
    SEMI            reduce using rule 78 (const_char -> .)
    COMMA           reduce using rule 78 (const_char -> .)

    const_char                     shift and go to state 122

state 102

    (52) const -> ID . const_id
    (75) const_id -> .

    TIMES           reduce using rule 75 (const_id -> .)
    DIVIDE          reduce using rule 75 (const_id -> .)
    POWER           reduce using rule 75 (const_id -> .)
    PLUS            reduce using rule 75 (const_id -> .)
    MINUS           reduce using rule 75 (const_id -> .)
    LT              reduce using rule 75 (const_id -> .)
    LTE             reduce using rule 75 (const_id -> .)
    GT              reduce using rule 75 (const_id -> .)
    GTE             reduce using rule 75 (const_id -> .)
    SIM             reduce using rule 75 (const_id -> .)
    NE              reduce using rule 75 (const_id -> .)
    OR              reduce using rule 75 (const_id -> .)
    AND             reduce using rule 75 (const_id -> .)
    RPARENT         reduce using rule 75 (const_id -> .)
    SEMI            reduce using rule 75 (const_id -> .)
    COMMA           reduce using rule 75 (const_id -> .)

    const_id                       shift and go to state 123

state 103

    (65) statement_while -> WHILE opera_while LPARENT . expression RPARENT condicion_while DO bloque loop_while
    (30) expression -> . expr oper_y AND opera_add expression
    (31) expression -> . expr oper_y
    (32) expr -> . expr_aux oper_o OR opera_add expr
    (33) expr -> . expr_aux oper_o
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expression                     shift and go to state 124
    expr                           shift and go to state 94
    expr_aux                       shift and go to state 95
    expr_sumres                    shift and go to state 96
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 104

    (66) statement_read -> READ LPARENT read_1 . RPARENT

    RPARENT         shift and go to state 125


state 105

    (67) read_1 -> ID . read_instr read_1
    (68) read_1 -> ID . read_instr
    (105) read_instr -> .

    ID              reduce using rule 105 (read_instr -> .)
    RPARENT         reduce using rule 105 (read_instr -> .)

    read_instr                     shift and go to state 126

state 106

    (69) statement_write -> WRITE LPARENT write_1 . RPARENT

    RPARENT         shift and go to state 127


state 107

    (70) write_1 -> ID . write_instr write_1
    (71) write_1 -> ID . write_instr
    (106) write_instr -> .

    ID              reduce using rule 106 (write_instr -> .)
    RPARENT         reduce using rule 106 (write_instr -> .)

    write_instr                    shift and go to state 128

state 108

    (53) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all . fin_funcion funcion
    (55) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all . fin_funcion
    (92) fin_funcion -> .

    FUNCION         reduce using rule 92 (fin_funcion -> .)
    MAIN            reduce using rule 92 (fin_funcion -> .)

    fin_funcion                    shift and go to state 129

state 109

    (54) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion . funcion
    (56) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion .
    (53) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (54) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (55) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (56) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion

    MAIN            reduce using rule 56 (funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion .)
    FUNCION         shift and go to state 9

    funcion                        shift and go to state 130

state 110

    (10) func_vars -> memType ID vars_name . vars_type param_type COMMA func_vars
    (11) func_vars -> memType ID vars_name . vars_type param_type
    (74) vars_type -> .

    COMMA           reduce using rule 74 (vars_type -> .)
    RPARENT         reduce using rule 74 (vars_type -> .)

    vars_type                      shift and go to state 131

state 111

    (29) statement_assign -> ID const_id EQ opera_add . expression add_tabla
    (30) expression -> . expr oper_y AND opera_add expression
    (31) expression -> . expr oper_y
    (32) expr -> . expr_aux oper_o OR opera_add expr
    (33) expr -> . expr_aux oper_o
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expression                     shift and go to state 132
    expr                           shift and go to state 94
    expr_aux                       shift and go to state 95
    expr_sumres                    shift and go to state 96
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 112

    (59) statement_function -> ID existe_funcion crea_funcion LPARENT . funcion_aux verifica_param RPARENT crea_subfuncion
    (60) statement_function -> ID existe_funcion crea_funcion LPARENT . RPARENT crea_subfuncion
    (61) funcion_aux -> . expression revisar_parametro cuenta_parametro COMMA funcion_aux
    (62) funcion_aux -> . expression revisar_parametro
    (30) expression -> . expr oper_y AND opera_add expression
    (31) expression -> . expr oper_y
    (32) expr -> . expr_aux oper_o OR opera_add expr
    (33) expr -> . expr_aux oper_o
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    RPARENT         shift and go to state 134
    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    funcion_aux                    shift and go to state 133
    expression                     shift and go to state 135
    expr                           shift and go to state 94
    expr_aux                       shift and go to state 95
    expr_sumres                    shift and go to state 96
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 113

    (48) const -> LPARENT fondo_virtual . expression RPARENT pop_fondo_virtual
    (30) expression -> . expr oper_y AND opera_add expression
    (31) expression -> . expr oper_y
    (32) expr -> . expr_aux oper_o OR opera_add expr
    (33) expr -> . expr_aux oper_o
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expression                     shift and go to state 136
    expr                           shift and go to state 94
    expr_aux                       shift and go to state 95
    expr_sumres                    shift and go to state 96
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 114

    (63) statement_condition -> IF LPARENT expression RPARENT . THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (64) statement_condition -> IF LPARENT expression RPARENT . THEN revisar_expression bloque condition_end

    THEN            shift and go to state 137


state 115

    (30) expression -> expr oper_y . AND opera_add expression
    (31) expression -> expr oper_y .

    AND             shift and go to state 138
    RPARENT         reduce using rule 31 (expression -> expr oper_y .)
    SEMI            reduce using rule 31 (expression -> expr oper_y .)
    COMMA           reduce using rule 31 (expression -> expr oper_y .)


state 116

    (32) expr -> expr_aux oper_o . OR opera_add expr
    (33) expr -> expr_aux oper_o .

    OR              shift and go to state 139
    AND             reduce using rule 33 (expr -> expr_aux oper_o .)
    RPARENT         reduce using rule 33 (expr -> expr_aux oper_o .)
    SEMI            reduce using rule 33 (expr -> expr_aux oper_o .)
    COMMA           reduce using rule 33 (expr -> expr_aux oper_o .)


state 117

    (34) expr_aux -> expr_sumres expr_rel . LT opera_add expr_aux
    (35) expr_aux -> expr_sumres expr_rel . LTE opera_add expr_aux
    (36) expr_aux -> expr_sumres expr_rel . GT opera_add expr_aux
    (37) expr_aux -> expr_sumres expr_rel . GTE opera_add expr_aux
    (38) expr_aux -> expr_sumres expr_rel . SIM opera_add expr_aux
    (39) expr_aux -> expr_sumres expr_rel . NE opera_add expr_aux
    (40) expr_aux -> expr_sumres expr_rel .

    LT              shift and go to state 140
    LTE             shift and go to state 141
    GT              shift and go to state 142
    GTE             shift and go to state 143
    SIM             shift and go to state 144
    NE              shift and go to state 145
    OR              reduce using rule 40 (expr_aux -> expr_sumres expr_rel .)
    AND             reduce using rule 40 (expr_aux -> expr_sumres expr_rel .)
    RPARENT         reduce using rule 40 (expr_aux -> expr_sumres expr_rel .)
    SEMI            reduce using rule 40 (expr_aux -> expr_sumres expr_rel .)
    COMMA           reduce using rule 40 (expr_aux -> expr_sumres expr_rel .)


state 118

    (41) expr_sumres -> expr_muldiv term_sumres . PLUS opera_add expr_sumres
    (42) expr_sumres -> expr_muldiv term_sumres . MINUS opera_add expr_sumres
    (43) expr_sumres -> expr_muldiv term_sumres .

    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    LT              reduce using rule 43 (expr_sumres -> expr_muldiv term_sumres .)
    LTE             reduce using rule 43 (expr_sumres -> expr_muldiv term_sumres .)
    GT              reduce using rule 43 (expr_sumres -> expr_muldiv term_sumres .)
    GTE             reduce using rule 43 (expr_sumres -> expr_muldiv term_sumres .)
    SIM             reduce using rule 43 (expr_sumres -> expr_muldiv term_sumres .)
    NE              reduce using rule 43 (expr_sumres -> expr_muldiv term_sumres .)
    OR              reduce using rule 43 (expr_sumres -> expr_muldiv term_sumres .)
    AND             reduce using rule 43 (expr_sumres -> expr_muldiv term_sumres .)
    RPARENT         reduce using rule 43 (expr_sumres -> expr_muldiv term_sumres .)
    SEMI            reduce using rule 43 (expr_sumres -> expr_muldiv term_sumres .)
    COMMA           reduce using rule 43 (expr_sumres -> expr_muldiv term_sumres .)


state 119

    (44) expr_muldiv -> const term_muldiv . TIMES opera_add expr_muldiv
    (45) expr_muldiv -> const term_muldiv . DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> const term_muldiv . POWER opera_add expr_muldiv
    (47) expr_muldiv -> const term_muldiv .

    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149
    POWER           shift and go to state 150
    PLUS            reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    MINUS           reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    LT              reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    LTE             reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    GT              reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    GTE             reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    SIM             reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    NE              reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    OR              reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    AND             reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    RPARENT         reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    SEMI            reduce using rule 47 (expr_muldiv -> const term_muldiv .)
    COMMA           reduce using rule 47 (expr_muldiv -> const term_muldiv .)


state 120

    (49) const -> INTEGERCTE const_int .

    TIMES           reduce using rule 49 (const -> INTEGERCTE const_int .)
    DIVIDE          reduce using rule 49 (const -> INTEGERCTE const_int .)
    POWER           reduce using rule 49 (const -> INTEGERCTE const_int .)
    PLUS            reduce using rule 49 (const -> INTEGERCTE const_int .)
    MINUS           reduce using rule 49 (const -> INTEGERCTE const_int .)
    LT              reduce using rule 49 (const -> INTEGERCTE const_int .)
    LTE             reduce using rule 49 (const -> INTEGERCTE const_int .)
    GT              reduce using rule 49 (const -> INTEGERCTE const_int .)
    GTE             reduce using rule 49 (const -> INTEGERCTE const_int .)
    SIM             reduce using rule 49 (const -> INTEGERCTE const_int .)
    NE              reduce using rule 49 (const -> INTEGERCTE const_int .)
    OR              reduce using rule 49 (const -> INTEGERCTE const_int .)
    AND             reduce using rule 49 (const -> INTEGERCTE const_int .)
    RPARENT         reduce using rule 49 (const -> INTEGERCTE const_int .)
    SEMI            reduce using rule 49 (const -> INTEGERCTE const_int .)
    COMMA           reduce using rule 49 (const -> INTEGERCTE const_int .)


state 121

    (50) const -> FLOATCTE const_float .

    TIMES           reduce using rule 50 (const -> FLOATCTE const_float .)
    DIVIDE          reduce using rule 50 (const -> FLOATCTE const_float .)
    POWER           reduce using rule 50 (const -> FLOATCTE const_float .)
    PLUS            reduce using rule 50 (const -> FLOATCTE const_float .)
    MINUS           reduce using rule 50 (const -> FLOATCTE const_float .)
    LT              reduce using rule 50 (const -> FLOATCTE const_float .)
    LTE             reduce using rule 50 (const -> FLOATCTE const_float .)
    GT              reduce using rule 50 (const -> FLOATCTE const_float .)
    GTE             reduce using rule 50 (const -> FLOATCTE const_float .)
    SIM             reduce using rule 50 (const -> FLOATCTE const_float .)
    NE              reduce using rule 50 (const -> FLOATCTE const_float .)
    OR              reduce using rule 50 (const -> FLOATCTE const_float .)
    AND             reduce using rule 50 (const -> FLOATCTE const_float .)
    RPARENT         reduce using rule 50 (const -> FLOATCTE const_float .)
    SEMI            reduce using rule 50 (const -> FLOATCTE const_float .)
    COMMA           reduce using rule 50 (const -> FLOATCTE const_float .)


state 122

    (51) const -> CHARCTE const_char .

    TIMES           reduce using rule 51 (const -> CHARCTE const_char .)
    DIVIDE          reduce using rule 51 (const -> CHARCTE const_char .)
    POWER           reduce using rule 51 (const -> CHARCTE const_char .)
    PLUS            reduce using rule 51 (const -> CHARCTE const_char .)
    MINUS           reduce using rule 51 (const -> CHARCTE const_char .)
    LT              reduce using rule 51 (const -> CHARCTE const_char .)
    LTE             reduce using rule 51 (const -> CHARCTE const_char .)
    GT              reduce using rule 51 (const -> CHARCTE const_char .)
    GTE             reduce using rule 51 (const -> CHARCTE const_char .)
    SIM             reduce using rule 51 (const -> CHARCTE const_char .)
    NE              reduce using rule 51 (const -> CHARCTE const_char .)
    OR              reduce using rule 51 (const -> CHARCTE const_char .)
    AND             reduce using rule 51 (const -> CHARCTE const_char .)
    RPARENT         reduce using rule 51 (const -> CHARCTE const_char .)
    SEMI            reduce using rule 51 (const -> CHARCTE const_char .)
    COMMA           reduce using rule 51 (const -> CHARCTE const_char .)


state 123

    (52) const -> ID const_id .

    TIMES           reduce using rule 52 (const -> ID const_id .)
    DIVIDE          reduce using rule 52 (const -> ID const_id .)
    POWER           reduce using rule 52 (const -> ID const_id .)
    PLUS            reduce using rule 52 (const -> ID const_id .)
    MINUS           reduce using rule 52 (const -> ID const_id .)
    LT              reduce using rule 52 (const -> ID const_id .)
    LTE             reduce using rule 52 (const -> ID const_id .)
    GT              reduce using rule 52 (const -> ID const_id .)
    GTE             reduce using rule 52 (const -> ID const_id .)
    SIM             reduce using rule 52 (const -> ID const_id .)
    NE              reduce using rule 52 (const -> ID const_id .)
    OR              reduce using rule 52 (const -> ID const_id .)
    AND             reduce using rule 52 (const -> ID const_id .)
    RPARENT         reduce using rule 52 (const -> ID const_id .)
    SEMI            reduce using rule 52 (const -> ID const_id .)
    COMMA           reduce using rule 52 (const -> ID const_id .)


state 124

    (65) statement_while -> WHILE opera_while LPARENT expression . RPARENT condicion_while DO bloque loop_while

    RPARENT         shift and go to state 151


state 125

    (66) statement_read -> READ LPARENT read_1 RPARENT .

    SEMI            reduce using rule 66 (statement_read -> READ LPARENT read_1 RPARENT .)


state 126

    (67) read_1 -> ID read_instr . read_1
    (68) read_1 -> ID read_instr .
    (67) read_1 -> . ID read_instr read_1
    (68) read_1 -> . ID read_instr

    RPARENT         reduce using rule 68 (read_1 -> ID read_instr .)
    ID              shift and go to state 105

    read_1                         shift and go to state 152

state 127

    (69) statement_write -> WRITE LPARENT write_1 RPARENT .

    SEMI            reduce using rule 69 (statement_write -> WRITE LPARENT write_1 RPARENT .)


state 128

    (70) write_1 -> ID write_instr . write_1
    (71) write_1 -> ID write_instr .
    (70) write_1 -> . ID write_instr write_1
    (71) write_1 -> . ID write_instr

    RPARENT         reduce using rule 71 (write_1 -> ID write_instr .)
    ID              shift and go to state 107

    write_1                        shift and go to state 153

state 129

    (53) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion . funcion
    (55) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion .
    (53) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (54) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (55) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (56) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion

    MAIN            reduce using rule 55 (funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion .)
    FUNCION         shift and go to state 9

    funcion                        shift and go to state 154

state 130

    (54) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion .

    MAIN            reduce using rule 54 (funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion .)


state 131

    (10) func_vars -> memType ID vars_name vars_type . param_type COMMA func_vars
    (11) func_vars -> memType ID vars_name vars_type . param_type
    (89) param_type -> .

    COMMA           reduce using rule 89 (param_type -> .)
    RPARENT         reduce using rule 89 (param_type -> .)

    param_type                     shift and go to state 155

state 132

    (29) statement_assign -> ID const_id EQ opera_add expression . add_tabla
    (79) add_tabla -> .

    SEMI            reduce using rule 79 (add_tabla -> .)

    add_tabla                      shift and go to state 156

state 133

    (59) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux . verifica_param RPARENT crea_subfuncion
    (96) verifica_param -> .

    RPARENT         reduce using rule 96 (verifica_param -> .)

    verifica_param                 shift and go to state 157

state 134

    (60) statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT . crea_subfuncion
    (95) crea_subfuncion -> .

    SEMI            reduce using rule 95 (crea_subfuncion -> .)

    crea_subfuncion                shift and go to state 158

state 135

    (61) funcion_aux -> expression . revisar_parametro cuenta_parametro COMMA funcion_aux
    (62) funcion_aux -> expression . revisar_parametro
    (98) revisar_parametro -> .

    COMMA           reduce using rule 98 (revisar_parametro -> .)
    RPARENT         reduce using rule 98 (revisar_parametro -> .)

    revisar_parametro              shift and go to state 159

state 136

    (48) const -> LPARENT fondo_virtual expression . RPARENT pop_fondo_virtual

    RPARENT         shift and go to state 160


state 137

    (63) statement_condition -> IF LPARENT expression RPARENT THEN . revisar_expression bloque ELSE else_expression bloque condition_end
    (64) statement_condition -> IF LPARENT expression RPARENT THEN . revisar_expression bloque condition_end
    (99) revisar_expression -> .

    LBRACKET        reduce using rule 99 (revisar_expression -> .)

    revisar_expression             shift and go to state 161

state 138

    (30) expression -> expr oper_y AND . opera_add expression
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 162

state 139

    (32) expr -> expr_aux oper_o OR . opera_add expr
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 163

state 140

    (34) expr_aux -> expr_sumres expr_rel LT . opera_add expr_aux
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 164

state 141

    (35) expr_aux -> expr_sumres expr_rel LTE . opera_add expr_aux
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 165

state 142

    (36) expr_aux -> expr_sumres expr_rel GT . opera_add expr_aux
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 166

state 143

    (37) expr_aux -> expr_sumres expr_rel GTE . opera_add expr_aux
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 167

state 144

    (38) expr_aux -> expr_sumres expr_rel SIM . opera_add expr_aux
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 168

state 145

    (39) expr_aux -> expr_sumres expr_rel NE . opera_add expr_aux
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 169

state 146

    (41) expr_sumres -> expr_muldiv term_sumres PLUS . opera_add expr_sumres
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 170

state 147

    (42) expr_sumres -> expr_muldiv term_sumres MINUS . opera_add expr_sumres
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 171

state 148

    (44) expr_muldiv -> const term_muldiv TIMES . opera_add expr_muldiv
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 172

state 149

    (45) expr_muldiv -> const term_muldiv DIVIDE . opera_add expr_muldiv
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 173

state 150

    (46) expr_muldiv -> const term_muldiv POWER . opera_add expr_muldiv
    (80) opera_add -> .

    LPARENT         reduce using rule 80 (opera_add -> .)
    INTEGERCTE      reduce using rule 80 (opera_add -> .)
    FLOATCTE        reduce using rule 80 (opera_add -> .)
    CHARCTE         reduce using rule 80 (opera_add -> .)
    ID              reduce using rule 80 (opera_add -> .)

    opera_add                      shift and go to state 174

state 151

    (65) statement_while -> WHILE opera_while LPARENT expression RPARENT . condicion_while DO bloque loop_while
    (103) condicion_while -> .

    DO              reduce using rule 103 (condicion_while -> .)

    condicion_while                shift and go to state 175

state 152

    (67) read_1 -> ID read_instr read_1 .

    RPARENT         reduce using rule 67 (read_1 -> ID read_instr read_1 .)


state 153

    (70) write_1 -> ID write_instr write_1 .

    RPARENT         reduce using rule 70 (write_1 -> ID write_instr write_1 .)


state 154

    (53) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion .

    MAIN            reduce using rule 53 (funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion .)


state 155

    (10) func_vars -> memType ID vars_name vars_type param_type . COMMA func_vars
    (11) func_vars -> memType ID vars_name vars_type param_type .

    COMMA           shift and go to state 176
    RPARENT         reduce using rule 11 (func_vars -> memType ID vars_name vars_type param_type .)


state 156

    (29) statement_assign -> ID const_id EQ opera_add expression add_tabla .

    SEMI            reduce using rule 29 (statement_assign -> ID const_id EQ opera_add expression add_tabla .)


state 157

    (59) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param . RPARENT crea_subfuncion

    RPARENT         shift and go to state 177


state 158

    (60) statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion .

    SEMI            reduce using rule 60 (statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion .)


state 159

    (61) funcion_aux -> expression revisar_parametro . cuenta_parametro COMMA funcion_aux
    (62) funcion_aux -> expression revisar_parametro .
    (97) cuenta_parametro -> .

    RPARENT         reduce using rule 62 (funcion_aux -> expression revisar_parametro .)
    COMMA           reduce using rule 97 (cuenta_parametro -> .)

    cuenta_parametro               shift and go to state 178

state 160

    (48) const -> LPARENT fondo_virtual expression RPARENT . pop_fondo_virtual
    (87) pop_fondo_virtual -> .

    TIMES           reduce using rule 87 (pop_fondo_virtual -> .)
    DIVIDE          reduce using rule 87 (pop_fondo_virtual -> .)
    POWER           reduce using rule 87 (pop_fondo_virtual -> .)
    PLUS            reduce using rule 87 (pop_fondo_virtual -> .)
    MINUS           reduce using rule 87 (pop_fondo_virtual -> .)
    LT              reduce using rule 87 (pop_fondo_virtual -> .)
    LTE             reduce using rule 87 (pop_fondo_virtual -> .)
    GT              reduce using rule 87 (pop_fondo_virtual -> .)
    GTE             reduce using rule 87 (pop_fondo_virtual -> .)
    SIM             reduce using rule 87 (pop_fondo_virtual -> .)
    NE              reduce using rule 87 (pop_fondo_virtual -> .)
    OR              reduce using rule 87 (pop_fondo_virtual -> .)
    AND             reduce using rule 87 (pop_fondo_virtual -> .)
    RPARENT         reduce using rule 87 (pop_fondo_virtual -> .)
    SEMI            reduce using rule 87 (pop_fondo_virtual -> .)
    COMMA           reduce using rule 87 (pop_fondo_virtual -> .)

    pop_fondo_virtual              shift and go to state 179

state 161

    (63) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression . bloque ELSE else_expression bloque condition_end
    (64) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression . bloque condition_end
    (19) bloque -> . LBRACKET statement_func RBRACKET
    (20) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 181

    bloque                         shift and go to state 180

state 162

    (30) expression -> expr oper_y AND opera_add . expression
    (30) expression -> . expr oper_y AND opera_add expression
    (31) expression -> . expr oper_y
    (32) expr -> . expr_aux oper_o OR opera_add expr
    (33) expr -> . expr_aux oper_o
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expr                           shift and go to state 94
    expression                     shift and go to state 182
    expr_aux                       shift and go to state 95
    expr_sumres                    shift and go to state 96
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 163

    (32) expr -> expr_aux oper_o OR opera_add . expr
    (32) expr -> . expr_aux oper_o OR opera_add expr
    (33) expr -> . expr_aux oper_o
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expr_aux                       shift and go to state 95
    expr                           shift and go to state 183
    expr_sumres                    shift and go to state 96
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 164

    (34) expr_aux -> expr_sumres expr_rel LT opera_add . expr_aux
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expr_sumres                    shift and go to state 96
    expr_aux                       shift and go to state 184
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 165

    (35) expr_aux -> expr_sumres expr_rel LTE opera_add . expr_aux
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expr_sumres                    shift and go to state 96
    expr_aux                       shift and go to state 185
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 166

    (36) expr_aux -> expr_sumres expr_rel GT opera_add . expr_aux
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expr_sumres                    shift and go to state 96
    expr_aux                       shift and go to state 186
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 167

    (37) expr_aux -> expr_sumres expr_rel GTE opera_add . expr_aux
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expr_sumres                    shift and go to state 96
    expr_aux                       shift and go to state 187
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 168

    (38) expr_aux -> expr_sumres expr_rel SIM opera_add . expr_aux
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expr_sumres                    shift and go to state 96
    expr_aux                       shift and go to state 188
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 169

    (39) expr_aux -> expr_sumres expr_rel NE opera_add . expr_aux
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expr_sumres                    shift and go to state 96
    expr_aux                       shift and go to state 189
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 170

    (41) expr_sumres -> expr_muldiv term_sumres PLUS opera_add . expr_sumres
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expr_muldiv                    shift and go to state 97
    expr_sumres                    shift and go to state 190
    const                          shift and go to state 98

state 171

    (42) expr_sumres -> expr_muldiv term_sumres MINUS opera_add . expr_sumres
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expr_muldiv                    shift and go to state 97
    expr_sumres                    shift and go to state 191
    const                          shift and go to state 98

state 172

    (44) expr_muldiv -> const term_muldiv TIMES opera_add . expr_muldiv
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    const                          shift and go to state 98
    expr_muldiv                    shift and go to state 192

state 173

    (45) expr_muldiv -> const term_muldiv DIVIDE opera_add . expr_muldiv
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    const                          shift and go to state 98
    expr_muldiv                    shift and go to state 193

state 174

    (46) expr_muldiv -> const term_muldiv POWER opera_add . expr_muldiv
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    const                          shift and go to state 98
    expr_muldiv                    shift and go to state 194

state 175

    (65) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while . DO bloque loop_while

    DO              shift and go to state 195


state 176

    (10) func_vars -> memType ID vars_name vars_type param_type COMMA . func_vars
    (10) func_vars -> . memType ID vars_name vars_type param_type COMMA func_vars
    (11) func_vars -> . memType ID vars_name vars_type param_type
    (12) memType -> . INT loType
    (13) memType -> . FLOAT loType
    (14) memType -> . CHAR loType

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    memType                        shift and go to state 67
    func_vars                      shift and go to state 196

state 177

    (59) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT . crea_subfuncion
    (95) crea_subfuncion -> .

    SEMI            reduce using rule 95 (crea_subfuncion -> .)

    crea_subfuncion                shift and go to state 197

state 178

    (61) funcion_aux -> expression revisar_parametro cuenta_parametro . COMMA funcion_aux

    COMMA           shift and go to state 198


state 179

    (48) const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .

    TIMES           reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    DIVIDE          reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    POWER           reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    PLUS            reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    MINUS           reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    LT              reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    LTE             reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    GT              reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    GTE             reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    SIM             reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    NE              reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    OR              reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    AND             reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    RPARENT         reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    SEMI            reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    COMMA           reduce using rule 48 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)


state 180

    (63) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque . ELSE else_expression bloque condition_end
    (64) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque . condition_end
    (101) condition_end -> .

    ELSE            shift and go to state 199
    SEMI            reduce using rule 101 (condition_end -> .)

    condition_end                  shift and go to state 200

state 181

    (19) bloque -> LBRACKET . statement_func RBRACKET
    (20) bloque -> LBRACKET . RBRACKET
    (21) statement_func -> . statement statement_func
    (22) statement_func -> . statement
    (23) statement -> . statement_assign SEMI
    (24) statement -> . statement_function SEMI
    (25) statement -> . statement_condition SEMI
    (26) statement -> . statement_while SEMI
    (27) statement -> . statement_read SEMI
    (28) statement -> . statement_write SEMI
    (29) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (59) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (60) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (63) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (64) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (65) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (66) statement_read -> . READ LPARENT read_1 RPARENT
    (69) statement_write -> . WRITE LPARENT write_1 RPARENT

    RBRACKET        shift and go to state 202
    ID              shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60

    statement_func                 shift and go to state 201
    statement                      shift and go to state 49
    statement_assign               shift and go to state 50
    statement_function             shift and go to state 51
    statement_condition            shift and go to state 52
    statement_while                shift and go to state 53
    statement_read                 shift and go to state 54
    statement_write                shift and go to state 55

state 182

    (30) expression -> expr oper_y AND opera_add expression .

    RPARENT         reduce using rule 30 (expression -> expr oper_y AND opera_add expression .)
    SEMI            reduce using rule 30 (expression -> expr oper_y AND opera_add expression .)
    COMMA           reduce using rule 30 (expression -> expr oper_y AND opera_add expression .)


state 183

    (32) expr -> expr_aux oper_o OR opera_add expr .

    AND             reduce using rule 32 (expr -> expr_aux oper_o OR opera_add expr .)
    RPARENT         reduce using rule 32 (expr -> expr_aux oper_o OR opera_add expr .)
    SEMI            reduce using rule 32 (expr -> expr_aux oper_o OR opera_add expr .)
    COMMA           reduce using rule 32 (expr -> expr_aux oper_o OR opera_add expr .)


state 184

    (34) expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .

    OR              reduce using rule 34 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    AND             reduce using rule 34 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    RPARENT         reduce using rule 34 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    SEMI            reduce using rule 34 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    COMMA           reduce using rule 34 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)


state 185

    (35) expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .

    OR              reduce using rule 35 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    AND             reduce using rule 35 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    RPARENT         reduce using rule 35 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    SEMI            reduce using rule 35 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    COMMA           reduce using rule 35 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)


state 186

    (36) expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .

    OR              reduce using rule 36 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    AND             reduce using rule 36 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    RPARENT         reduce using rule 36 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    SEMI            reduce using rule 36 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    COMMA           reduce using rule 36 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)


state 187

    (37) expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .

    OR              reduce using rule 37 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    AND             reduce using rule 37 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    RPARENT         reduce using rule 37 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    SEMI            reduce using rule 37 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    COMMA           reduce using rule 37 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)


state 188

    (38) expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .

    OR              reduce using rule 38 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    AND             reduce using rule 38 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    RPARENT         reduce using rule 38 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    SEMI            reduce using rule 38 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    COMMA           reduce using rule 38 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)


state 189

    (39) expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .

    OR              reduce using rule 39 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    AND             reduce using rule 39 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    RPARENT         reduce using rule 39 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    SEMI            reduce using rule 39 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    COMMA           reduce using rule 39 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)


state 190

    (41) expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .

    LT              reduce using rule 41 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    LTE             reduce using rule 41 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    GT              reduce using rule 41 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    GTE             reduce using rule 41 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    SIM             reduce using rule 41 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    NE              reduce using rule 41 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    OR              reduce using rule 41 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    AND             reduce using rule 41 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    RPARENT         reduce using rule 41 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    SEMI            reduce using rule 41 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    COMMA           reduce using rule 41 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)


state 191

    (42) expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .

    LT              reduce using rule 42 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    LTE             reduce using rule 42 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    GT              reduce using rule 42 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    GTE             reduce using rule 42 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    SIM             reduce using rule 42 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    NE              reduce using rule 42 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    OR              reduce using rule 42 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    AND             reduce using rule 42 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    RPARENT         reduce using rule 42 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    SEMI            reduce using rule 42 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    COMMA           reduce using rule 42 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)


state 192

    (44) expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .

    PLUS            reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    MINUS           reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    LT              reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    LTE             reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    GT              reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    GTE             reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    SIM             reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    NE              reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    OR              reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    AND             reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    RPARENT         reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    SEMI            reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    COMMA           reduce using rule 44 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)


state 193

    (45) expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .

    PLUS            reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    MINUS           reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    LT              reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    LTE             reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    GT              reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    GTE             reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    SIM             reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    NE              reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    OR              reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    AND             reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    RPARENT         reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    SEMI            reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    COMMA           reduce using rule 45 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)


state 194

    (46) expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .

    PLUS            reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    MINUS           reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    LT              reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    LTE             reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    GT              reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    GTE             reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    SIM             reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    NE              reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    OR              reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    AND             reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    RPARENT         reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    SEMI            reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    COMMA           reduce using rule 46 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)


state 195

    (65) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO . bloque loop_while
    (19) bloque -> . LBRACKET statement_func RBRACKET
    (20) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 181

    bloque                         shift and go to state 203

state 196

    (10) func_vars -> memType ID vars_name vars_type param_type COMMA func_vars .

    RPARENT         reduce using rule 10 (func_vars -> memType ID vars_name vars_type param_type COMMA func_vars .)


state 197

    (59) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion .

    SEMI            reduce using rule 59 (statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion .)


state 198

    (61) funcion_aux -> expression revisar_parametro cuenta_parametro COMMA . funcion_aux
    (61) funcion_aux -> . expression revisar_parametro cuenta_parametro COMMA funcion_aux
    (62) funcion_aux -> . expression revisar_parametro
    (30) expression -> . expr oper_y AND opera_add expression
    (31) expression -> . expr oper_y
    (32) expr -> . expr_aux oper_o OR opera_add expr
    (33) expr -> . expr_aux oper_o
    (34) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (35) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (36) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (37) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (38) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (39) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (40) expr_aux -> . expr_sumres expr_rel
    (41) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (42) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (43) expr_sumres -> . expr_muldiv term_sumres
    (44) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (45) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (46) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (47) expr_muldiv -> . const term_muldiv
    (48) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (49) const -> . INTEGERCTE const_int
    (50) const -> . FLOATCTE const_float
    (51) const -> . CHARCTE const_char
    (52) const -> . ID const_id

    LPARENT         shift and go to state 92
    INTEGERCTE      shift and go to state 99
    FLOATCTE        shift and go to state 100
    CHARCTE         shift and go to state 101
    ID              shift and go to state 102

    expression                     shift and go to state 135
    funcion_aux                    shift and go to state 204
    expr                           shift and go to state 94
    expr_aux                       shift and go to state 95
    expr_sumres                    shift and go to state 96
    expr_muldiv                    shift and go to state 97
    const                          shift and go to state 98

state 199

    (63) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE . else_expression bloque condition_end
    (100) else_expression -> .

    LBRACKET        reduce using rule 100 (else_expression -> .)

    else_expression                shift and go to state 205

state 200

    (64) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .

    SEMI            reduce using rule 64 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)


state 201

    (19) bloque -> LBRACKET statement_func . RBRACKET

    RBRACKET        shift and go to state 206


state 202

    (20) bloque -> LBRACKET RBRACKET .

    ELSE            reduce using rule 20 (bloque -> LBRACKET RBRACKET .)
    SEMI            reduce using rule 20 (bloque -> LBRACKET RBRACKET .)


state 203

    (65) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque . loop_while
    (104) loop_while -> .

    SEMI            reduce using rule 104 (loop_while -> .)

    loop_while                     shift and go to state 207

state 204

    (61) funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux .

    RPARENT         reduce using rule 61 (funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux .)


state 205

    (63) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression . bloque condition_end
    (19) bloque -> . LBRACKET statement_func RBRACKET
    (20) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 181

    bloque                         shift and go to state 208

state 206

    (19) bloque -> LBRACKET statement_func RBRACKET .

    ELSE            reduce using rule 19 (bloque -> LBRACKET statement_func RBRACKET .)
    SEMI            reduce using rule 19 (bloque -> LBRACKET statement_func RBRACKET .)


state 207

    (65) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .

    SEMI            reduce using rule 65 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)


state 208

    (63) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque . condition_end
    (101) condition_end -> .

    SEMI            reduce using rule 101 (condition_end -> .)

    condition_end                  shift and go to state 209

state 209

    (63) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .

    SEMI            reduce using rule 63 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)


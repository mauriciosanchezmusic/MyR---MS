Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    NEWLINE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMI vars funcion main
Rule 2     programa -> PROGRAM ID SEMI funcion main
Rule 3     programa -> PROGRAM ID SEMI vars main
Rule 4     programa -> PROGRAM ID SEMI main
Rule 5     main -> MAIN function_name verifica_name LPARENT RPARENT function_all end_main
Rule 6     vars -> vars list_vars SEMI
Rule 7     vars -> VAR list_vars SEMI
Rule 8     list_vars -> list_vars COMMA vars_array
Rule 9     list_vars -> list_vars COMMA ID vars_name vars_type
Rule 10    list_vars -> memType vars_array
Rule 11    list_vars -> memType ID vars_name vars_type
Rule 12    vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory
Rule 13    func_vars -> memType ID vars_name vars_type param_type COMMA func_vars
Rule 14    func_vars -> memType ID vars_name vars_type param_type
Rule 15    memType -> INT loType
Rule 16    memType -> FLOAT loType
Rule 17    memType -> CHAR loType
Rule 18    function_all -> LBRACKET vars statement_func RBRACKET
Rule 19    function_all -> LBRACKET vars RBRACKET
Rule 20    function_all -> LBRACKET statement_func RBRACKET
Rule 21    function_all -> LBRACKET RBRACKET
Rule 22    bloque -> LBRACKET statement_func RBRACKET
Rule 23    bloque -> LBRACKET RBRACKET
Rule 24    statement_func -> statement statement_func
Rule 25    statement_func -> statement
Rule 26    statement -> statement_assign SEMI
Rule 27    statement -> statement_function SEMI
Rule 28    statement -> statement_condition
Rule 29    statement -> statement_while
Rule 30    statement -> statement_for
Rule 31    statement -> statement_read SEMI
Rule 32    statement -> statement_write SEMI
Rule 33    statement -> statement_return SEMI
Rule 34    statement_assign -> ID const_id EQ opera_add expression add_tabla
Rule 35    statement_assign -> ID const_id save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla
Rule 36    expression -> expr oper_y AND opera_add expression
Rule 37    expression -> expr oper_y
Rule 38    expr -> expr_aux oper_o OR opera_add expr
Rule 39    expr -> expr_aux oper_o
Rule 40    expr_aux -> expr_sumres expr_rel LT opera_add expr_aux
Rule 41    expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux
Rule 42    expr_aux -> expr_sumres expr_rel GT opera_add expr_aux
Rule 43    expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux
Rule 44    expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux
Rule 45    expr_aux -> expr_sumres expr_rel NE opera_add expr_aux
Rule 46    expr_aux -> expr_sumres expr_rel
Rule 47    expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres
Rule 48    expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres
Rule 49    expr_sumres -> expr_muldiv term_sumres
Rule 50    expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv
Rule 51    expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv
Rule 52    expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv
Rule 53    expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv
Rule 54    expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv
Rule 55    expr_muldiv -> const term_muldiv
Rule 56    const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
Rule 57    const -> INTEGERCTE const_int
Rule 58    const -> FLOATCTE const_float
Rule 59    const -> CHARCTE const_char
Rule 60    const -> ID const_id
Rule 61    funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
Rule 62    funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
Rule 63    funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
Rule 64    funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
Rule 65    parametro -> LPARENT func_vars RPARENT
Rule 66    parametro -> LPARENT RPARENT
Rule 67    statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
Rule 68    statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
Rule 69    funcion_aux -> expression revisar_parametro
Rule 70    funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux
Rule 71    statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
Rule 72    statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
Rule 73    statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
Rule 74    statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
Rule 75    statement_read -> READ LPARENT read_1 RPARENT
Rule 76    read_1 -> ID read_instr read_1
Rule 77    read_1 -> ID read_instr
Rule 78    statement_write -> WRITE LPARENT write_1 RPARENT
Rule 79    write_1 -> expression write_instr COMMA write_1
Rule 80    write_1 -> STRINGCTE const_str write_instr COMMA write_1
Rule 81    write_1 -> expression write_instr
Rule 82    write_1 -> STRINGCTE const_str write_instr
Rule 83    write_1 -> ID const_id find_id LSQUARE const change_address RSQUARE write_instr
Rule 84    statement_return -> RETURN return_function LPARENT expression RPARENT return_save_quadruple
Rule 85    loType -> <empty>
Rule 86    vars_name -> <empty>
Rule 87    vars_type -> <empty>
Rule 88    add_memory -> <empty>
Rule 89    const_id -> <empty>
Rule 90    const_int -> <empty>
Rule 91    const_float -> <empty>
Rule 92    const_char -> <empty>
Rule 93    const_str -> <empty>
Rule 94    add_tabla -> <empty>
Rule 95    save_var -> <empty>
Rule 96    opera_add -> <empty>
Rule 97    term_sumres -> <empty>
Rule 98    term_muldiv -> <empty>
Rule 99    expr_rel -> <empty>
Rule 100   oper_o -> <empty>
Rule 101   oper_y -> <empty>
Rule 102   fondo_virtual -> <empty>
Rule 103   pop_fondo_virtual -> <empty>
Rule 104   verifica_name -> <empty>
Rule 105   param_type -> <empty>
Rule 106   rev_quad -> <empty>
Rule 107   function_name -> <empty>
Rule 108   fin_funcion -> <empty>
Rule 109   existe_funcion -> <empty>
Rule 110   crea_funcion -> <empty>
Rule 111   crea_subfuncion -> <empty>
Rule 112   verifica_param -> <empty>
Rule 113   cuenta_parametro -> <empty>
Rule 114   revisar_parametro -> <empty>
Rule 115   revisar_expression -> <empty>
Rule 116   else_expression -> <empty>
Rule 117   condition_end -> <empty>
Rule 118   opera_while -> <empty>
Rule 119   condicion_while -> <empty>
Rule 120   loop_while -> <empty>
Rule 121   opera_for -> <empty>
Rule 122   compara_for -> <empty>
Rule 123   condicion_for -> <empty>
Rule 124   aumenta -> <empty>
Rule 125   loop_for -> <empty>
Rule 126   read_instr -> <empty>
Rule 127   find_id -> <empty>
Rule 128   change_address -> <empty>
Rule 129   write_instr -> <empty>
Rule 130   return_function -> <empty>
Rule 131   return_save_quadruple -> <empty>
Rule 132   end_main -> <empty>

Terminals, with rules where they appear

AND                  : 36
CHAR                 : 17
CHARCTE              : 59
COMMA                : 8 9 13 70 79 80
COMMENT              : 
DIVENT               : 51
DIVIDE               : 52
DO                   : 73 74
ELSE                 : 71
EQ                   : 34 35
FLOAT                : 16
FLOATCTE             : 58
FOR                  : 74
FUNCION              : 61 62 63 64
GT                   : 42
GTE                  : 43
ID                   : 1 2 3 4 9 11 12 13 14 34 35 60 61 62 63 64 67 68 76 77 83
IF                   : 71 72
INT                  : 15
INTEGERCTE           : 57
LBRACKET             : 18 19 20 21 22 23
LPARENT              : 5 56 65 66 67 68 71 72 73 75 78 84
LSQUARE              : 12 35 83
LT                   : 40
LTE                  : 41
MAIN                 : 5
MINUS                : 48
MODULE               : 53
NE                   : 45
NEWLINE              : 
OR                   : 38
PLUS                 : 47
POWER                : 54
PROGRAM              : 1 2 3 4
RBRACKET             : 18 19 20 21 22 23
READ                 : 75
RETURN               : 84
RPARENT              : 5 56 65 66 67 68 71 72 73 75 78 84
RSQUARE              : 12 35 83
SEMI                 : 1 2 3 4 6 7 26 27 31 32 33
SIM                  : 44
STRINGCTE            : 80 82
THEN                 : 71 72
TIMES                : 50
TO                   : 74
VAR                  : 7
VOID                 : 61 63
WHILE                : 73
WRITE                : 78
error                : 

Nonterminals, with rules where they appear

add_memory           : 12
add_tabla            : 34 35
aumenta              : 74
bloque               : 71 71 72 73 74
change_address       : 83
compara_for          : 74
condicion_for        : 74
condicion_while      : 73
condition_end        : 71 72
const                : 12 35 50 51 52 53 54 55 74 83
const_char           : 59
const_float          : 58
const_id             : 34 35 60 83
const_int            : 57
const_str            : 80 82
crea_funcion         : 67 68
crea_subfuncion      : 67 68
cuenta_parametro     : 70
else_expression      : 71
end_main             : 5
existe_funcion       : 67 68
expr                 : 36 37 38
expr_aux             : 38 39 40 41 42 43 44 45
expr_muldiv          : 47 48 49 50 51 52 53 54
expr_rel             : 40 41 42 43 44 45 46
expr_sumres          : 40 41 42 43 44 45 46 47 48
expression           : 34 35 36 56 69 70 71 72 73 79 81 84
fin_funcion          : 61 62 63 64
find_id              : 83
fondo_virtual        : 56
func_vars            : 13 65
funcion              : 1 2 61 62
funcion_aux          : 67 70
function_all         : 5 61 62 63 64
function_name        : 5 61 62 63 64
list_vars            : 6 7 8 9
loType               : 15 16 17 61 63
loop_for             : 74
loop_while           : 73
main                 : 1 2 3 4
memType              : 10 11 13 14 62 64
oper_o               : 38 39
oper_y               : 36 37
opera_add            : 34 35 36 38 40 41 42 43 44 45 47 48 50 51 52 53 54
opera_for            : 74
opera_while          : 73
param_type           : 13 14
parametro            : 61 62 63 64
pop_fondo_virtual    : 56
programa             : 0
read_1               : 75 76
read_instr           : 76 77
return_function      : 84
return_save_quadruple : 84
rev_quad             : 61 62 63 64
revisar_expression   : 71 72
revisar_parametro    : 69 70
save_var             : 35
statement            : 24 25
statement_assign     : 26 74
statement_condition  : 28
statement_for        : 30
statement_func       : 18 20 22 24
statement_function   : 27
statement_read       : 31
statement_return     : 33
statement_while      : 29
statement_write      : 32
term_muldiv          : 50 51 52 53 54 55
term_sumres          : 47 48 49
vars                 : 1 3 6 18 19
vars_array           : 8 10
vars_name            : 9 11 12 13 14
vars_type            : 9 11 12 13 14
verifica_name        : 5
verifica_param       : 67
write_1              : 78 79 80
write_instr          : 79 80 81 82 83

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMI vars funcion main
    (2) programa -> . PROGRAM ID SEMI funcion main
    (3) programa -> . PROGRAM ID SEMI vars main
    (4) programa -> . PROGRAM ID SEMI main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMI vars funcion main
    (2) programa -> PROGRAM . ID SEMI funcion main
    (3) programa -> PROGRAM . ID SEMI vars main
    (4) programa -> PROGRAM . ID SEMI main

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMI vars funcion main
    (2) programa -> PROGRAM ID . SEMI funcion main
    (3) programa -> PROGRAM ID . SEMI vars main
    (4) programa -> PROGRAM ID . SEMI main

    SEMI            shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMI . vars funcion main
    (2) programa -> PROGRAM ID SEMI . funcion main
    (3) programa -> PROGRAM ID SEMI . vars main
    (4) programa -> PROGRAM ID SEMI . main
    (6) vars -> . vars list_vars SEMI
    (7) vars -> . VAR list_vars SEMI
    (61) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (62) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (63) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (64) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main

    VAR             shift and go to state 8
    FUNCION         shift and go to state 9
    MAIN            shift and go to state 10

    vars                           shift and go to state 5
    funcion                        shift and go to state 6
    main                           shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMI vars . funcion main
    (3) programa -> PROGRAM ID SEMI vars . main
    (6) vars -> vars . list_vars SEMI
    (61) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (62) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (63) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (64) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main
    (8) list_vars -> . list_vars COMMA vars_array
    (9) list_vars -> . list_vars COMMA ID vars_name vars_type
    (10) list_vars -> . memType vars_array
    (11) list_vars -> . memType ID vars_name vars_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    FUNCION         shift and go to state 9
    MAIN            shift and go to state 10
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    funcion                        shift and go to state 11
    main                           shift and go to state 12
    list_vars                      shift and go to state 13
    memType                        shift and go to state 14

state 6

    (2) programa -> PROGRAM ID SEMI funcion . main
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main

    MAIN            shift and go to state 10

    main                           shift and go to state 18

state 7

    (4) programa -> PROGRAM ID SEMI main .

    $end            reduce using rule 4 (programa -> PROGRAM ID SEMI main .)


state 8

    (7) vars -> VAR . list_vars SEMI
    (8) list_vars -> . list_vars COMMA vars_array
    (9) list_vars -> . list_vars COMMA ID vars_name vars_type
    (10) list_vars -> . memType vars_array
    (11) list_vars -> . memType ID vars_name vars_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    list_vars                      shift and go to state 19
    memType                        shift and go to state 14

state 9

    (61) funcion -> FUNCION . VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (62) funcion -> FUNCION . memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (63) funcion -> FUNCION . VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (64) funcion -> FUNCION . memType ID function_name parametro rev_quad function_all fin_funcion
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    VOID            shift and go to state 20
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    memType                        shift and go to state 21

state 10

    (5) main -> MAIN . function_name verifica_name LPARENT RPARENT function_all end_main
    (107) function_name -> .

    LPARENT         reduce using rule 107 (function_name -> .)

    function_name                  shift and go to state 22

state 11

    (1) programa -> PROGRAM ID SEMI vars funcion . main
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main

    MAIN            shift and go to state 10

    main                           shift and go to state 23

state 12

    (3) programa -> PROGRAM ID SEMI vars main .

    $end            reduce using rule 3 (programa -> PROGRAM ID SEMI vars main .)


state 13

    (6) vars -> vars list_vars . SEMI
    (8) list_vars -> list_vars . COMMA vars_array
    (9) list_vars -> list_vars . COMMA ID vars_name vars_type

    SEMI            shift and go to state 24
    COMMA           shift and go to state 25


state 14

    (10) list_vars -> memType . vars_array
    (11) list_vars -> memType . ID vars_name vars_type
    (12) vars_array -> . ID vars_name vars_type LSQUARE const RSQUARE add_memory

    ID              shift and go to state 27

    vars_array                     shift and go to state 26

state 15

    (15) memType -> INT . loType
    (85) loType -> .

    ID              reduce using rule 85 (loType -> .)

    loType                         shift and go to state 28

state 16

    (16) memType -> FLOAT . loType
    (85) loType -> .

    ID              reduce using rule 85 (loType -> .)

    loType                         shift and go to state 29

state 17

    (17) memType -> CHAR . loType
    (85) loType -> .

    ID              reduce using rule 85 (loType -> .)

    loType                         shift and go to state 30

state 18

    (2) programa -> PROGRAM ID SEMI funcion main .

    $end            reduce using rule 2 (programa -> PROGRAM ID SEMI funcion main .)


state 19

    (7) vars -> VAR list_vars . SEMI
    (8) list_vars -> list_vars . COMMA vars_array
    (9) list_vars -> list_vars . COMMA ID vars_name vars_type

    SEMI            shift and go to state 31
    COMMA           shift and go to state 25


state 20

    (61) funcion -> FUNCION VOID . loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (63) funcion -> FUNCION VOID . loType ID function_name parametro rev_quad function_all fin_funcion
    (85) loType -> .

    ID              reduce using rule 85 (loType -> .)

    loType                         shift and go to state 32

state 21

    (62) funcion -> FUNCION memType . ID function_name parametro rev_quad function_all fin_funcion funcion
    (64) funcion -> FUNCION memType . ID function_name parametro rev_quad function_all fin_funcion

    ID              shift and go to state 33


state 22

    (5) main -> MAIN function_name . verifica_name LPARENT RPARENT function_all end_main
    (104) verifica_name -> .

    LPARENT         reduce using rule 104 (verifica_name -> .)

    verifica_name                  shift and go to state 34

state 23

    (1) programa -> PROGRAM ID SEMI vars funcion main .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMI vars funcion main .)


state 24

    (6) vars -> vars list_vars SEMI .

    FUNCION         reduce using rule 6 (vars -> vars list_vars SEMI .)
    MAIN            reduce using rule 6 (vars -> vars list_vars SEMI .)
    INT             reduce using rule 6 (vars -> vars list_vars SEMI .)
    FLOAT           reduce using rule 6 (vars -> vars list_vars SEMI .)
    CHAR            reduce using rule 6 (vars -> vars list_vars SEMI .)
    RBRACKET        reduce using rule 6 (vars -> vars list_vars SEMI .)
    ID              reduce using rule 6 (vars -> vars list_vars SEMI .)
    IF              reduce using rule 6 (vars -> vars list_vars SEMI .)
    WHILE           reduce using rule 6 (vars -> vars list_vars SEMI .)
    FOR             reduce using rule 6 (vars -> vars list_vars SEMI .)
    READ            reduce using rule 6 (vars -> vars list_vars SEMI .)
    WRITE           reduce using rule 6 (vars -> vars list_vars SEMI .)
    RETURN          reduce using rule 6 (vars -> vars list_vars SEMI .)


state 25

    (8) list_vars -> list_vars COMMA . vars_array
    (9) list_vars -> list_vars COMMA . ID vars_name vars_type
    (12) vars_array -> . ID vars_name vars_type LSQUARE const RSQUARE add_memory

    ID              shift and go to state 36

    vars_array                     shift and go to state 35

state 26

    (10) list_vars -> memType vars_array .

    SEMI            reduce using rule 10 (list_vars -> memType vars_array .)
    COMMA           reduce using rule 10 (list_vars -> memType vars_array .)


state 27

    (11) list_vars -> memType ID . vars_name vars_type
    (12) vars_array -> ID . vars_name vars_type LSQUARE const RSQUARE add_memory
    (86) vars_name -> .

    LSQUARE         reduce using rule 86 (vars_name -> .)
    SEMI            reduce using rule 86 (vars_name -> .)
    COMMA           reduce using rule 86 (vars_name -> .)

    vars_name                      shift and go to state 37

state 28

    (15) memType -> INT loType .

    ID              reduce using rule 15 (memType -> INT loType .)


state 29

    (16) memType -> FLOAT loType .

    ID              reduce using rule 16 (memType -> FLOAT loType .)


state 30

    (17) memType -> CHAR loType .

    ID              reduce using rule 17 (memType -> CHAR loType .)


state 31

    (7) vars -> VAR list_vars SEMI .

    FUNCION         reduce using rule 7 (vars -> VAR list_vars SEMI .)
    MAIN            reduce using rule 7 (vars -> VAR list_vars SEMI .)
    INT             reduce using rule 7 (vars -> VAR list_vars SEMI .)
    FLOAT           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    CHAR            reduce using rule 7 (vars -> VAR list_vars SEMI .)
    RBRACKET        reduce using rule 7 (vars -> VAR list_vars SEMI .)
    ID              reduce using rule 7 (vars -> VAR list_vars SEMI .)
    IF              reduce using rule 7 (vars -> VAR list_vars SEMI .)
    WHILE           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    FOR             reduce using rule 7 (vars -> VAR list_vars SEMI .)
    READ            reduce using rule 7 (vars -> VAR list_vars SEMI .)
    WRITE           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    RETURN          reduce using rule 7 (vars -> VAR list_vars SEMI .)


state 32

    (61) funcion -> FUNCION VOID loType . ID function_name parametro rev_quad function_all fin_funcion funcion
    (63) funcion -> FUNCION VOID loType . ID function_name parametro rev_quad function_all fin_funcion

    ID              shift and go to state 38


state 33

    (62) funcion -> FUNCION memType ID . function_name parametro rev_quad function_all fin_funcion funcion
    (64) funcion -> FUNCION memType ID . function_name parametro rev_quad function_all fin_funcion
    (107) function_name -> .

    LPARENT         reduce using rule 107 (function_name -> .)

    function_name                  shift and go to state 39

state 34

    (5) main -> MAIN function_name verifica_name . LPARENT RPARENT function_all end_main

    LPARENT         shift and go to state 40


state 35

    (8) list_vars -> list_vars COMMA vars_array .

    SEMI            reduce using rule 8 (list_vars -> list_vars COMMA vars_array .)
    COMMA           reduce using rule 8 (list_vars -> list_vars COMMA vars_array .)


state 36

    (9) list_vars -> list_vars COMMA ID . vars_name vars_type
    (12) vars_array -> ID . vars_name vars_type LSQUARE const RSQUARE add_memory
    (86) vars_name -> .

    LSQUARE         reduce using rule 86 (vars_name -> .)
    SEMI            reduce using rule 86 (vars_name -> .)
    COMMA           reduce using rule 86 (vars_name -> .)

    vars_name                      shift and go to state 41

state 37

    (11) list_vars -> memType ID vars_name . vars_type
    (12) vars_array -> ID vars_name . vars_type LSQUARE const RSQUARE add_memory
    (87) vars_type -> .

    LSQUARE         reduce using rule 87 (vars_type -> .)
    SEMI            reduce using rule 87 (vars_type -> .)
    COMMA           reduce using rule 87 (vars_type -> .)

    vars_type                      shift and go to state 42

state 38

    (61) funcion -> FUNCION VOID loType ID . function_name parametro rev_quad function_all fin_funcion funcion
    (63) funcion -> FUNCION VOID loType ID . function_name parametro rev_quad function_all fin_funcion
    (107) function_name -> .

    LPARENT         reduce using rule 107 (function_name -> .)

    function_name                  shift and go to state 43

state 39

    (62) funcion -> FUNCION memType ID function_name . parametro rev_quad function_all fin_funcion funcion
    (64) funcion -> FUNCION memType ID function_name . parametro rev_quad function_all fin_funcion
    (65) parametro -> . LPARENT func_vars RPARENT
    (66) parametro -> . LPARENT RPARENT

    LPARENT         shift and go to state 45

    parametro                      shift and go to state 44

state 40

    (5) main -> MAIN function_name verifica_name LPARENT . RPARENT function_all end_main

    RPARENT         shift and go to state 46


state 41

    (9) list_vars -> list_vars COMMA ID vars_name . vars_type
    (12) vars_array -> ID vars_name . vars_type LSQUARE const RSQUARE add_memory
    (87) vars_type -> .

    LSQUARE         reduce using rule 87 (vars_type -> .)
    SEMI            reduce using rule 87 (vars_type -> .)
    COMMA           reduce using rule 87 (vars_type -> .)

    vars_type                      shift and go to state 47

state 42

    (11) list_vars -> memType ID vars_name vars_type .
    (12) vars_array -> ID vars_name vars_type . LSQUARE const RSQUARE add_memory

    SEMI            reduce using rule 11 (list_vars -> memType ID vars_name vars_type .)
    COMMA           reduce using rule 11 (list_vars -> memType ID vars_name vars_type .)
    LSQUARE         shift and go to state 48


state 43

    (61) funcion -> FUNCION VOID loType ID function_name . parametro rev_quad function_all fin_funcion funcion
    (63) funcion -> FUNCION VOID loType ID function_name . parametro rev_quad function_all fin_funcion
    (65) parametro -> . LPARENT func_vars RPARENT
    (66) parametro -> . LPARENT RPARENT

    LPARENT         shift and go to state 45

    parametro                      shift and go to state 49

state 44

    (62) funcion -> FUNCION memType ID function_name parametro . rev_quad function_all fin_funcion funcion
    (64) funcion -> FUNCION memType ID function_name parametro . rev_quad function_all fin_funcion
    (106) rev_quad -> .

    LBRACKET        reduce using rule 106 (rev_quad -> .)

    rev_quad                       shift and go to state 50

state 45

    (65) parametro -> LPARENT . func_vars RPARENT
    (66) parametro -> LPARENT . RPARENT
    (13) func_vars -> . memType ID vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> . memType ID vars_name vars_type param_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    RPARENT         shift and go to state 52
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    func_vars                      shift and go to state 51
    memType                        shift and go to state 53

state 46

    (5) main -> MAIN function_name verifica_name LPARENT RPARENT . function_all end_main
    (18) function_all -> . LBRACKET vars statement_func RBRACKET
    (19) function_all -> . LBRACKET vars RBRACKET
    (20) function_all -> . LBRACKET statement_func RBRACKET
    (21) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 55

    function_all                   shift and go to state 54

state 47

    (9) list_vars -> list_vars COMMA ID vars_name vars_type .
    (12) vars_array -> ID vars_name vars_type . LSQUARE const RSQUARE add_memory

    SEMI            reduce using rule 9 (list_vars -> list_vars COMMA ID vars_name vars_type .)
    COMMA           reduce using rule 9 (list_vars -> list_vars COMMA ID vars_name vars_type .)
    LSQUARE         shift and go to state 48


state 48

    (12) vars_array -> ID vars_name vars_type LSQUARE . const RSQUARE add_memory
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 57

state 49

    (61) funcion -> FUNCION VOID loType ID function_name parametro . rev_quad function_all fin_funcion funcion
    (63) funcion -> FUNCION VOID loType ID function_name parametro . rev_quad function_all fin_funcion
    (106) rev_quad -> .

    LBRACKET        reduce using rule 106 (rev_quad -> .)

    rev_quad                       shift and go to state 62

state 50

    (62) funcion -> FUNCION memType ID function_name parametro rev_quad . function_all fin_funcion funcion
    (64) funcion -> FUNCION memType ID function_name parametro rev_quad . function_all fin_funcion
    (18) function_all -> . LBRACKET vars statement_func RBRACKET
    (19) function_all -> . LBRACKET vars RBRACKET
    (20) function_all -> . LBRACKET statement_func RBRACKET
    (21) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 55

    function_all                   shift and go to state 63

state 51

    (65) parametro -> LPARENT func_vars . RPARENT

    RPARENT         shift and go to state 64


state 52

    (66) parametro -> LPARENT RPARENT .

    LBRACKET        reduce using rule 66 (parametro -> LPARENT RPARENT .)


state 53

    (13) func_vars -> memType . ID vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> memType . ID vars_name vars_type param_type

    ID              shift and go to state 65


state 54

    (5) main -> MAIN function_name verifica_name LPARENT RPARENT function_all . end_main
    (132) end_main -> .

    $end            reduce using rule 132 (end_main -> .)

    end_main                       shift and go to state 66

state 55

    (18) function_all -> LBRACKET . vars statement_func RBRACKET
    (19) function_all -> LBRACKET . vars RBRACKET
    (20) function_all -> LBRACKET . statement_func RBRACKET
    (21) function_all -> LBRACKET . RBRACKET
    (6) vars -> . vars list_vars SEMI
    (7) vars -> . VAR list_vars SEMI
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (34) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (35) statement_assign -> . ID const_id save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla
    (67) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (68) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (71) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (72) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (73) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (74) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (75) statement_read -> . READ LPARENT read_1 RPARENT
    (78) statement_write -> . WRITE LPARENT write_1 RPARENT
    (84) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple

    RBRACKET        shift and go to state 69
    VAR             shift and go to state 8
    ID              shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 81
    FOR             shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    RETURN          shift and go to state 85

    vars                           shift and go to state 67
    statement_func                 shift and go to state 68
    statement                      shift and go to state 70
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78

state 56

    (60) const -> ID . const_id
    (89) const_id -> .

    RSQUARE         reduce using rule 89 (const_id -> .)
    TIMES           reduce using rule 89 (const_id -> .)
    DIVENT          reduce using rule 89 (const_id -> .)
    DIVIDE          reduce using rule 89 (const_id -> .)
    MODULE          reduce using rule 89 (const_id -> .)
    POWER           reduce using rule 89 (const_id -> .)
    PLUS            reduce using rule 89 (const_id -> .)
    MINUS           reduce using rule 89 (const_id -> .)
    LT              reduce using rule 89 (const_id -> .)
    LTE             reduce using rule 89 (const_id -> .)
    GT              reduce using rule 89 (const_id -> .)
    GTE             reduce using rule 89 (const_id -> .)
    SIM             reduce using rule 89 (const_id -> .)
    NE              reduce using rule 89 (const_id -> .)
    OR              reduce using rule 89 (const_id -> .)
    AND             reduce using rule 89 (const_id -> .)
    RPARENT         reduce using rule 89 (const_id -> .)
    SEMI            reduce using rule 89 (const_id -> .)
    TO              reduce using rule 89 (const_id -> .)
    COMMA           reduce using rule 89 (const_id -> .)
    DO              reduce using rule 89 (const_id -> .)

    const_id                       shift and go to state 86

state 57

    (12) vars_array -> ID vars_name vars_type LSQUARE const . RSQUARE add_memory

    RSQUARE         shift and go to state 87


state 58

    (56) const -> LPARENT . fondo_virtual expression RPARENT pop_fondo_virtual
    (102) fondo_virtual -> .

    LPARENT         reduce using rule 102 (fondo_virtual -> .)
    INTEGERCTE      reduce using rule 102 (fondo_virtual -> .)
    FLOATCTE        reduce using rule 102 (fondo_virtual -> .)
    CHARCTE         reduce using rule 102 (fondo_virtual -> .)
    ID              reduce using rule 102 (fondo_virtual -> .)

    fondo_virtual                  shift and go to state 88

state 59

    (57) const -> INTEGERCTE . const_int
    (90) const_int -> .

    RSQUARE         reduce using rule 90 (const_int -> .)
    TIMES           reduce using rule 90 (const_int -> .)
    DIVENT          reduce using rule 90 (const_int -> .)
    DIVIDE          reduce using rule 90 (const_int -> .)
    MODULE          reduce using rule 90 (const_int -> .)
    POWER           reduce using rule 90 (const_int -> .)
    PLUS            reduce using rule 90 (const_int -> .)
    MINUS           reduce using rule 90 (const_int -> .)
    LT              reduce using rule 90 (const_int -> .)
    LTE             reduce using rule 90 (const_int -> .)
    GT              reduce using rule 90 (const_int -> .)
    GTE             reduce using rule 90 (const_int -> .)
    SIM             reduce using rule 90 (const_int -> .)
    NE              reduce using rule 90 (const_int -> .)
    OR              reduce using rule 90 (const_int -> .)
    AND             reduce using rule 90 (const_int -> .)
    RPARENT         reduce using rule 90 (const_int -> .)
    COMMA           reduce using rule 90 (const_int -> .)
    SEMI            reduce using rule 90 (const_int -> .)
    TO              reduce using rule 90 (const_int -> .)
    DO              reduce using rule 90 (const_int -> .)

    const_int                      shift and go to state 89

state 60

    (58) const -> FLOATCTE . const_float
    (91) const_float -> .

    RSQUARE         reduce using rule 91 (const_float -> .)
    TIMES           reduce using rule 91 (const_float -> .)
    DIVENT          reduce using rule 91 (const_float -> .)
    DIVIDE          reduce using rule 91 (const_float -> .)
    MODULE          reduce using rule 91 (const_float -> .)
    POWER           reduce using rule 91 (const_float -> .)
    PLUS            reduce using rule 91 (const_float -> .)
    MINUS           reduce using rule 91 (const_float -> .)
    LT              reduce using rule 91 (const_float -> .)
    LTE             reduce using rule 91 (const_float -> .)
    GT              reduce using rule 91 (const_float -> .)
    GTE             reduce using rule 91 (const_float -> .)
    SIM             reduce using rule 91 (const_float -> .)
    NE              reduce using rule 91 (const_float -> .)
    OR              reduce using rule 91 (const_float -> .)
    AND             reduce using rule 91 (const_float -> .)
    RPARENT         reduce using rule 91 (const_float -> .)
    COMMA           reduce using rule 91 (const_float -> .)
    SEMI            reduce using rule 91 (const_float -> .)
    TO              reduce using rule 91 (const_float -> .)
    DO              reduce using rule 91 (const_float -> .)

    const_float                    shift and go to state 90

state 61

    (59) const -> CHARCTE . const_char
    (92) const_char -> .

    RSQUARE         reduce using rule 92 (const_char -> .)
    TIMES           reduce using rule 92 (const_char -> .)
    DIVENT          reduce using rule 92 (const_char -> .)
    DIVIDE          reduce using rule 92 (const_char -> .)
    MODULE          reduce using rule 92 (const_char -> .)
    POWER           reduce using rule 92 (const_char -> .)
    PLUS            reduce using rule 92 (const_char -> .)
    MINUS           reduce using rule 92 (const_char -> .)
    LT              reduce using rule 92 (const_char -> .)
    LTE             reduce using rule 92 (const_char -> .)
    GT              reduce using rule 92 (const_char -> .)
    GTE             reduce using rule 92 (const_char -> .)
    SIM             reduce using rule 92 (const_char -> .)
    NE              reduce using rule 92 (const_char -> .)
    OR              reduce using rule 92 (const_char -> .)
    AND             reduce using rule 92 (const_char -> .)
    RPARENT         reduce using rule 92 (const_char -> .)
    COMMA           reduce using rule 92 (const_char -> .)
    SEMI            reduce using rule 92 (const_char -> .)
    TO              reduce using rule 92 (const_char -> .)
    DO              reduce using rule 92 (const_char -> .)

    const_char                     shift and go to state 91

state 62

    (61) funcion -> FUNCION VOID loType ID function_name parametro rev_quad . function_all fin_funcion funcion
    (63) funcion -> FUNCION VOID loType ID function_name parametro rev_quad . function_all fin_funcion
    (18) function_all -> . LBRACKET vars statement_func RBRACKET
    (19) function_all -> . LBRACKET vars RBRACKET
    (20) function_all -> . LBRACKET statement_func RBRACKET
    (21) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 55

    function_all                   shift and go to state 92

state 63

    (62) funcion -> FUNCION memType ID function_name parametro rev_quad function_all . fin_funcion funcion
    (64) funcion -> FUNCION memType ID function_name parametro rev_quad function_all . fin_funcion
    (108) fin_funcion -> .

    FUNCION         reduce using rule 108 (fin_funcion -> .)
    MAIN            reduce using rule 108 (fin_funcion -> .)

    fin_funcion                    shift and go to state 93

state 64

    (65) parametro -> LPARENT func_vars RPARENT .

    LBRACKET        reduce using rule 65 (parametro -> LPARENT func_vars RPARENT .)


state 65

    (13) func_vars -> memType ID . vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> memType ID . vars_name vars_type param_type
    (86) vars_name -> .

    COMMA           reduce using rule 86 (vars_name -> .)
    RPARENT         reduce using rule 86 (vars_name -> .)

    vars_name                      shift and go to state 94

state 66

    (5) main -> MAIN function_name verifica_name LPARENT RPARENT function_all end_main .

    $end            reduce using rule 5 (main -> MAIN function_name verifica_name LPARENT RPARENT function_all end_main .)


state 67

    (18) function_all -> LBRACKET vars . statement_func RBRACKET
    (19) function_all -> LBRACKET vars . RBRACKET
    (6) vars -> vars . list_vars SEMI
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (8) list_vars -> . list_vars COMMA vars_array
    (9) list_vars -> . list_vars COMMA ID vars_name vars_type
    (10) list_vars -> . memType vars_array
    (11) list_vars -> . memType ID vars_name vars_type
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType
    (34) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (35) statement_assign -> . ID const_id save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla
    (67) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (68) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (71) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (72) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (73) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (74) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (75) statement_read -> . READ LPARENT read_1 RPARENT
    (78) statement_write -> . WRITE LPARENT write_1 RPARENT
    (84) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple

    RBRACKET        shift and go to state 96
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    ID              shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 81
    FOR             shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    RETURN          shift and go to state 85

    statement_func                 shift and go to state 95
    list_vars                      shift and go to state 13
    statement                      shift and go to state 70
    memType                        shift and go to state 14
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78

state 68

    (20) function_all -> LBRACKET statement_func . RBRACKET

    RBRACKET        shift and go to state 97


state 69

    (21) function_all -> LBRACKET RBRACKET .

    $end            reduce using rule 21 (function_all -> LBRACKET RBRACKET .)
    FUNCION         reduce using rule 21 (function_all -> LBRACKET RBRACKET .)
    MAIN            reduce using rule 21 (function_all -> LBRACKET RBRACKET .)


state 70

    (24) statement_func -> statement . statement_func
    (25) statement_func -> statement .
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (34) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (35) statement_assign -> . ID const_id save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla
    (67) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (68) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (71) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (72) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (73) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (74) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (75) statement_read -> . READ LPARENT read_1 RPARENT
    (78) statement_write -> . WRITE LPARENT write_1 RPARENT
    (84) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple

    RBRACKET        reduce using rule 25 (statement_func -> statement .)
    ID              shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 81
    FOR             shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    RETURN          shift and go to state 85

    statement                      shift and go to state 70
    statement_func                 shift and go to state 98
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78

state 71

    (26) statement -> statement_assign . SEMI

    SEMI            shift and go to state 99


state 72

    (27) statement -> statement_function . SEMI

    SEMI            shift and go to state 100


state 73

    (28) statement -> statement_condition .

    ID              reduce using rule 28 (statement -> statement_condition .)
    IF              reduce using rule 28 (statement -> statement_condition .)
    WHILE           reduce using rule 28 (statement -> statement_condition .)
    FOR             reduce using rule 28 (statement -> statement_condition .)
    READ            reduce using rule 28 (statement -> statement_condition .)
    WRITE           reduce using rule 28 (statement -> statement_condition .)
    RETURN          reduce using rule 28 (statement -> statement_condition .)
    RBRACKET        reduce using rule 28 (statement -> statement_condition .)


state 74

    (29) statement -> statement_while .

    ID              reduce using rule 29 (statement -> statement_while .)
    IF              reduce using rule 29 (statement -> statement_while .)
    WHILE           reduce using rule 29 (statement -> statement_while .)
    FOR             reduce using rule 29 (statement -> statement_while .)
    READ            reduce using rule 29 (statement -> statement_while .)
    WRITE           reduce using rule 29 (statement -> statement_while .)
    RETURN          reduce using rule 29 (statement -> statement_while .)
    RBRACKET        reduce using rule 29 (statement -> statement_while .)


state 75

    (30) statement -> statement_for .

    ID              reduce using rule 30 (statement -> statement_for .)
    IF              reduce using rule 30 (statement -> statement_for .)
    WHILE           reduce using rule 30 (statement -> statement_for .)
    FOR             reduce using rule 30 (statement -> statement_for .)
    READ            reduce using rule 30 (statement -> statement_for .)
    WRITE           reduce using rule 30 (statement -> statement_for .)
    RETURN          reduce using rule 30 (statement -> statement_for .)
    RBRACKET        reduce using rule 30 (statement -> statement_for .)


state 76

    (31) statement -> statement_read . SEMI

    SEMI            shift and go to state 101


state 77

    (32) statement -> statement_write . SEMI

    SEMI            shift and go to state 102


state 78

    (33) statement -> statement_return . SEMI

    SEMI            shift and go to state 103


state 79

    (34) statement_assign -> ID . const_id EQ opera_add expression add_tabla
    (35) statement_assign -> ID . const_id save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla
    (67) statement_function -> ID . existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (68) statement_function -> ID . existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (89) const_id -> .
    (109) existe_funcion -> .

    EQ              reduce using rule 89 (const_id -> .)
    LSQUARE         reduce using rule 89 (const_id -> .)
    LPARENT         reduce using rule 109 (existe_funcion -> .)

    const_id                       shift and go to state 104
    existe_funcion                 shift and go to state 105

state 80

    (71) statement_condition -> IF . LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (72) statement_condition -> IF . LPARENT expression RPARENT THEN revisar_expression bloque condition_end

    LPARENT         shift and go to state 106


state 81

    (73) statement_while -> WHILE . opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (118) opera_while -> .

    LPARENT         reduce using rule 118 (opera_while -> .)

    opera_while                    shift and go to state 107

state 82

    (74) statement_for -> FOR . opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (121) opera_for -> .

    ID              reduce using rule 121 (opera_for -> .)

    opera_for                      shift and go to state 108

state 83

    (75) statement_read -> READ . LPARENT read_1 RPARENT

    LPARENT         shift and go to state 109


state 84

    (78) statement_write -> WRITE . LPARENT write_1 RPARENT

    LPARENT         shift and go to state 110


state 85

    (84) statement_return -> RETURN . return_function LPARENT expression RPARENT return_save_quadruple
    (130) return_function -> .

    LPARENT         reduce using rule 130 (return_function -> .)

    return_function                shift and go to state 111

state 86

    (60) const -> ID const_id .

    RSQUARE         reduce using rule 60 (const -> ID const_id .)
    TIMES           reduce using rule 60 (const -> ID const_id .)
    DIVENT          reduce using rule 60 (const -> ID const_id .)
    DIVIDE          reduce using rule 60 (const -> ID const_id .)
    MODULE          reduce using rule 60 (const -> ID const_id .)
    POWER           reduce using rule 60 (const -> ID const_id .)
    PLUS            reduce using rule 60 (const -> ID const_id .)
    MINUS           reduce using rule 60 (const -> ID const_id .)
    LT              reduce using rule 60 (const -> ID const_id .)
    LTE             reduce using rule 60 (const -> ID const_id .)
    GT              reduce using rule 60 (const -> ID const_id .)
    GTE             reduce using rule 60 (const -> ID const_id .)
    SIM             reduce using rule 60 (const -> ID const_id .)
    NE              reduce using rule 60 (const -> ID const_id .)
    OR              reduce using rule 60 (const -> ID const_id .)
    AND             reduce using rule 60 (const -> ID const_id .)
    RPARENT         reduce using rule 60 (const -> ID const_id .)
    SEMI            reduce using rule 60 (const -> ID const_id .)
    TO              reduce using rule 60 (const -> ID const_id .)
    COMMA           reduce using rule 60 (const -> ID const_id .)
    DO              reduce using rule 60 (const -> ID const_id .)


state 87

    (12) vars_array -> ID vars_name vars_type LSQUARE const RSQUARE . add_memory
    (88) add_memory -> .

    SEMI            reduce using rule 88 (add_memory -> .)
    COMMA           reduce using rule 88 (add_memory -> .)

    add_memory                     shift and go to state 112

state 88

    (56) const -> LPARENT fondo_virtual . expression RPARENT pop_fondo_virtual
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expression                     shift and go to state 113
    expr                           shift and go to state 114
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 89

    (57) const -> INTEGERCTE const_int .

    RSQUARE         reduce using rule 57 (const -> INTEGERCTE const_int .)
    TIMES           reduce using rule 57 (const -> INTEGERCTE const_int .)
    DIVENT          reduce using rule 57 (const -> INTEGERCTE const_int .)
    DIVIDE          reduce using rule 57 (const -> INTEGERCTE const_int .)
    MODULE          reduce using rule 57 (const -> INTEGERCTE const_int .)
    POWER           reduce using rule 57 (const -> INTEGERCTE const_int .)
    PLUS            reduce using rule 57 (const -> INTEGERCTE const_int .)
    MINUS           reduce using rule 57 (const -> INTEGERCTE const_int .)
    LT              reduce using rule 57 (const -> INTEGERCTE const_int .)
    LTE             reduce using rule 57 (const -> INTEGERCTE const_int .)
    GT              reduce using rule 57 (const -> INTEGERCTE const_int .)
    GTE             reduce using rule 57 (const -> INTEGERCTE const_int .)
    SIM             reduce using rule 57 (const -> INTEGERCTE const_int .)
    NE              reduce using rule 57 (const -> INTEGERCTE const_int .)
    OR              reduce using rule 57 (const -> INTEGERCTE const_int .)
    AND             reduce using rule 57 (const -> INTEGERCTE const_int .)
    RPARENT         reduce using rule 57 (const -> INTEGERCTE const_int .)
    COMMA           reduce using rule 57 (const -> INTEGERCTE const_int .)
    SEMI            reduce using rule 57 (const -> INTEGERCTE const_int .)
    TO              reduce using rule 57 (const -> INTEGERCTE const_int .)
    DO              reduce using rule 57 (const -> INTEGERCTE const_int .)


state 90

    (58) const -> FLOATCTE const_float .

    RSQUARE         reduce using rule 58 (const -> FLOATCTE const_float .)
    TIMES           reduce using rule 58 (const -> FLOATCTE const_float .)
    DIVENT          reduce using rule 58 (const -> FLOATCTE const_float .)
    DIVIDE          reduce using rule 58 (const -> FLOATCTE const_float .)
    MODULE          reduce using rule 58 (const -> FLOATCTE const_float .)
    POWER           reduce using rule 58 (const -> FLOATCTE const_float .)
    PLUS            reduce using rule 58 (const -> FLOATCTE const_float .)
    MINUS           reduce using rule 58 (const -> FLOATCTE const_float .)
    LT              reduce using rule 58 (const -> FLOATCTE const_float .)
    LTE             reduce using rule 58 (const -> FLOATCTE const_float .)
    GT              reduce using rule 58 (const -> FLOATCTE const_float .)
    GTE             reduce using rule 58 (const -> FLOATCTE const_float .)
    SIM             reduce using rule 58 (const -> FLOATCTE const_float .)
    NE              reduce using rule 58 (const -> FLOATCTE const_float .)
    OR              reduce using rule 58 (const -> FLOATCTE const_float .)
    AND             reduce using rule 58 (const -> FLOATCTE const_float .)
    RPARENT         reduce using rule 58 (const -> FLOATCTE const_float .)
    COMMA           reduce using rule 58 (const -> FLOATCTE const_float .)
    SEMI            reduce using rule 58 (const -> FLOATCTE const_float .)
    TO              reduce using rule 58 (const -> FLOATCTE const_float .)
    DO              reduce using rule 58 (const -> FLOATCTE const_float .)


state 91

    (59) const -> CHARCTE const_char .

    RSQUARE         reduce using rule 59 (const -> CHARCTE const_char .)
    TIMES           reduce using rule 59 (const -> CHARCTE const_char .)
    DIVENT          reduce using rule 59 (const -> CHARCTE const_char .)
    DIVIDE          reduce using rule 59 (const -> CHARCTE const_char .)
    MODULE          reduce using rule 59 (const -> CHARCTE const_char .)
    POWER           reduce using rule 59 (const -> CHARCTE const_char .)
    PLUS            reduce using rule 59 (const -> CHARCTE const_char .)
    MINUS           reduce using rule 59 (const -> CHARCTE const_char .)
    LT              reduce using rule 59 (const -> CHARCTE const_char .)
    LTE             reduce using rule 59 (const -> CHARCTE const_char .)
    GT              reduce using rule 59 (const -> CHARCTE const_char .)
    GTE             reduce using rule 59 (const -> CHARCTE const_char .)
    SIM             reduce using rule 59 (const -> CHARCTE const_char .)
    NE              reduce using rule 59 (const -> CHARCTE const_char .)
    OR              reduce using rule 59 (const -> CHARCTE const_char .)
    AND             reduce using rule 59 (const -> CHARCTE const_char .)
    RPARENT         reduce using rule 59 (const -> CHARCTE const_char .)
    COMMA           reduce using rule 59 (const -> CHARCTE const_char .)
    SEMI            reduce using rule 59 (const -> CHARCTE const_char .)
    TO              reduce using rule 59 (const -> CHARCTE const_char .)
    DO              reduce using rule 59 (const -> CHARCTE const_char .)


state 92

    (61) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all . fin_funcion funcion
    (63) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all . fin_funcion
    (108) fin_funcion -> .

    FUNCION         reduce using rule 108 (fin_funcion -> .)
    MAIN            reduce using rule 108 (fin_funcion -> .)

    fin_funcion                    shift and go to state 119

state 93

    (62) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion . funcion
    (64) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion .
    (61) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (62) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (63) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (64) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion

    MAIN            reduce using rule 64 (funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion .)
    FUNCION         shift and go to state 9

    funcion                        shift and go to state 120

state 94

    (13) func_vars -> memType ID vars_name . vars_type param_type COMMA func_vars
    (14) func_vars -> memType ID vars_name . vars_type param_type
    (87) vars_type -> .

    COMMA           reduce using rule 87 (vars_type -> .)
    RPARENT         reduce using rule 87 (vars_type -> .)

    vars_type                      shift and go to state 121

state 95

    (18) function_all -> LBRACKET vars statement_func . RBRACKET

    RBRACKET        shift and go to state 122


state 96

    (19) function_all -> LBRACKET vars RBRACKET .

    $end            reduce using rule 19 (function_all -> LBRACKET vars RBRACKET .)
    FUNCION         reduce using rule 19 (function_all -> LBRACKET vars RBRACKET .)
    MAIN            reduce using rule 19 (function_all -> LBRACKET vars RBRACKET .)


state 97

    (20) function_all -> LBRACKET statement_func RBRACKET .

    $end            reduce using rule 20 (function_all -> LBRACKET statement_func RBRACKET .)
    FUNCION         reduce using rule 20 (function_all -> LBRACKET statement_func RBRACKET .)
    MAIN            reduce using rule 20 (function_all -> LBRACKET statement_func RBRACKET .)


state 98

    (24) statement_func -> statement statement_func .

    RBRACKET        reduce using rule 24 (statement_func -> statement statement_func .)


state 99

    (26) statement -> statement_assign SEMI .

    ID              reduce using rule 26 (statement -> statement_assign SEMI .)
    IF              reduce using rule 26 (statement -> statement_assign SEMI .)
    WHILE           reduce using rule 26 (statement -> statement_assign SEMI .)
    FOR             reduce using rule 26 (statement -> statement_assign SEMI .)
    READ            reduce using rule 26 (statement -> statement_assign SEMI .)
    WRITE           reduce using rule 26 (statement -> statement_assign SEMI .)
    RETURN          reduce using rule 26 (statement -> statement_assign SEMI .)
    RBRACKET        reduce using rule 26 (statement -> statement_assign SEMI .)


state 100

    (27) statement -> statement_function SEMI .

    ID              reduce using rule 27 (statement -> statement_function SEMI .)
    IF              reduce using rule 27 (statement -> statement_function SEMI .)
    WHILE           reduce using rule 27 (statement -> statement_function SEMI .)
    FOR             reduce using rule 27 (statement -> statement_function SEMI .)
    READ            reduce using rule 27 (statement -> statement_function SEMI .)
    WRITE           reduce using rule 27 (statement -> statement_function SEMI .)
    RETURN          reduce using rule 27 (statement -> statement_function SEMI .)
    RBRACKET        reduce using rule 27 (statement -> statement_function SEMI .)


state 101

    (31) statement -> statement_read SEMI .

    ID              reduce using rule 31 (statement -> statement_read SEMI .)
    IF              reduce using rule 31 (statement -> statement_read SEMI .)
    WHILE           reduce using rule 31 (statement -> statement_read SEMI .)
    FOR             reduce using rule 31 (statement -> statement_read SEMI .)
    READ            reduce using rule 31 (statement -> statement_read SEMI .)
    WRITE           reduce using rule 31 (statement -> statement_read SEMI .)
    RETURN          reduce using rule 31 (statement -> statement_read SEMI .)
    RBRACKET        reduce using rule 31 (statement -> statement_read SEMI .)


state 102

    (32) statement -> statement_write SEMI .

    ID              reduce using rule 32 (statement -> statement_write SEMI .)
    IF              reduce using rule 32 (statement -> statement_write SEMI .)
    WHILE           reduce using rule 32 (statement -> statement_write SEMI .)
    FOR             reduce using rule 32 (statement -> statement_write SEMI .)
    READ            reduce using rule 32 (statement -> statement_write SEMI .)
    WRITE           reduce using rule 32 (statement -> statement_write SEMI .)
    RETURN          reduce using rule 32 (statement -> statement_write SEMI .)
    RBRACKET        reduce using rule 32 (statement -> statement_write SEMI .)


state 103

    (33) statement -> statement_return SEMI .

    ID              reduce using rule 33 (statement -> statement_return SEMI .)
    IF              reduce using rule 33 (statement -> statement_return SEMI .)
    WHILE           reduce using rule 33 (statement -> statement_return SEMI .)
    FOR             reduce using rule 33 (statement -> statement_return SEMI .)
    READ            reduce using rule 33 (statement -> statement_return SEMI .)
    WRITE           reduce using rule 33 (statement -> statement_return SEMI .)
    RETURN          reduce using rule 33 (statement -> statement_return SEMI .)
    RBRACKET        reduce using rule 33 (statement -> statement_return SEMI .)


state 104

    (34) statement_assign -> ID const_id . EQ opera_add expression add_tabla
    (35) statement_assign -> ID const_id . save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla
    (95) save_var -> .

    EQ              shift and go to state 123
    LSQUARE         reduce using rule 95 (save_var -> .)

    save_var                       shift and go to state 124

state 105

    (67) statement_function -> ID existe_funcion . crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (68) statement_function -> ID existe_funcion . crea_funcion LPARENT RPARENT crea_subfuncion
    (110) crea_funcion -> .

    LPARENT         reduce using rule 110 (crea_funcion -> .)

    crea_funcion                   shift and go to state 125

state 106

    (71) statement_condition -> IF LPARENT . expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (72) statement_condition -> IF LPARENT . expression RPARENT THEN revisar_expression bloque condition_end
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expression                     shift and go to state 126
    expr                           shift and go to state 114
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 107

    (73) statement_while -> WHILE opera_while . LPARENT expression RPARENT condicion_while DO bloque loop_while

    LPARENT         shift and go to state 127


state 108

    (74) statement_for -> FOR opera_for . statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (34) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (35) statement_assign -> . ID const_id save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla

    ID              shift and go to state 129

    statement_assign               shift and go to state 128

state 109

    (75) statement_read -> READ LPARENT . read_1 RPARENT
    (76) read_1 -> . ID read_instr read_1
    (77) read_1 -> . ID read_instr

    ID              shift and go to state 131

    read_1                         shift and go to state 130

state 110

    (78) statement_write -> WRITE LPARENT . write_1 RPARENT
    (79) write_1 -> . expression write_instr COMMA write_1
    (80) write_1 -> . STRINGCTE const_str write_instr COMMA write_1
    (81) write_1 -> . expression write_instr
    (82) write_1 -> . STRINGCTE const_str write_instr
    (83) write_1 -> . ID const_id find_id LSQUARE const change_address RSQUARE write_instr
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    STRINGCTE       shift and go to state 134
    ID              shift and go to state 135
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    write_1                        shift and go to state 132
    expression                     shift and go to state 133
    const                          shift and go to state 118
    expr                           shift and go to state 114
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117

state 111

    (84) statement_return -> RETURN return_function . LPARENT expression RPARENT return_save_quadruple

    LPARENT         shift and go to state 136


state 112

    (12) vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory .

    SEMI            reduce using rule 12 (vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory .)
    COMMA           reduce using rule 12 (vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory .)


state 113

    (56) const -> LPARENT fondo_virtual expression . RPARENT pop_fondo_virtual

    RPARENT         shift and go to state 137


state 114

    (36) expression -> expr . oper_y AND opera_add expression
    (37) expression -> expr . oper_y
    (101) oper_y -> .

    AND             reduce using rule 101 (oper_y -> .)
    RPARENT         reduce using rule 101 (oper_y -> .)
    COMMA           reduce using rule 101 (oper_y -> .)
    SEMI            reduce using rule 101 (oper_y -> .)
    TO              reduce using rule 101 (oper_y -> .)

    oper_y                         shift and go to state 138

state 115

    (38) expr -> expr_aux . oper_o OR opera_add expr
    (39) expr -> expr_aux . oper_o
    (100) oper_o -> .

    OR              reduce using rule 100 (oper_o -> .)
    AND             reduce using rule 100 (oper_o -> .)
    RPARENT         reduce using rule 100 (oper_o -> .)
    COMMA           reduce using rule 100 (oper_o -> .)
    SEMI            reduce using rule 100 (oper_o -> .)
    TO              reduce using rule 100 (oper_o -> .)

    oper_o                         shift and go to state 139

state 116

    (40) expr_aux -> expr_sumres . expr_rel LT opera_add expr_aux
    (41) expr_aux -> expr_sumres . expr_rel LTE opera_add expr_aux
    (42) expr_aux -> expr_sumres . expr_rel GT opera_add expr_aux
    (43) expr_aux -> expr_sumres . expr_rel GTE opera_add expr_aux
    (44) expr_aux -> expr_sumres . expr_rel SIM opera_add expr_aux
    (45) expr_aux -> expr_sumres . expr_rel NE opera_add expr_aux
    (46) expr_aux -> expr_sumres . expr_rel
    (99) expr_rel -> .

    LT              reduce using rule 99 (expr_rel -> .)
    LTE             reduce using rule 99 (expr_rel -> .)
    GT              reduce using rule 99 (expr_rel -> .)
    GTE             reduce using rule 99 (expr_rel -> .)
    SIM             reduce using rule 99 (expr_rel -> .)
    NE              reduce using rule 99 (expr_rel -> .)
    OR              reduce using rule 99 (expr_rel -> .)
    AND             reduce using rule 99 (expr_rel -> .)
    RPARENT         reduce using rule 99 (expr_rel -> .)
    COMMA           reduce using rule 99 (expr_rel -> .)
    SEMI            reduce using rule 99 (expr_rel -> .)
    TO              reduce using rule 99 (expr_rel -> .)

    expr_rel                       shift and go to state 140

state 117

    (47) expr_sumres -> expr_muldiv . term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> expr_muldiv . term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> expr_muldiv . term_sumres
    (97) term_sumres -> .

    PLUS            reduce using rule 97 (term_sumres -> .)
    MINUS           reduce using rule 97 (term_sumres -> .)
    LT              reduce using rule 97 (term_sumres -> .)
    LTE             reduce using rule 97 (term_sumres -> .)
    GT              reduce using rule 97 (term_sumres -> .)
    GTE             reduce using rule 97 (term_sumres -> .)
    SIM             reduce using rule 97 (term_sumres -> .)
    NE              reduce using rule 97 (term_sumres -> .)
    OR              reduce using rule 97 (term_sumres -> .)
    AND             reduce using rule 97 (term_sumres -> .)
    RPARENT         reduce using rule 97 (term_sumres -> .)
    COMMA           reduce using rule 97 (term_sumres -> .)
    SEMI            reduce using rule 97 (term_sumres -> .)
    TO              reduce using rule 97 (term_sumres -> .)

    term_sumres                    shift and go to state 141

state 118

    (50) expr_muldiv -> const . term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> const . term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> const . term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> const . term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> const . term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> const . term_muldiv
    (98) term_muldiv -> .

    TIMES           reduce using rule 98 (term_muldiv -> .)
    DIVENT          reduce using rule 98 (term_muldiv -> .)
    DIVIDE          reduce using rule 98 (term_muldiv -> .)
    MODULE          reduce using rule 98 (term_muldiv -> .)
    POWER           reduce using rule 98 (term_muldiv -> .)
    PLUS            reduce using rule 98 (term_muldiv -> .)
    MINUS           reduce using rule 98 (term_muldiv -> .)
    LT              reduce using rule 98 (term_muldiv -> .)
    LTE             reduce using rule 98 (term_muldiv -> .)
    GT              reduce using rule 98 (term_muldiv -> .)
    GTE             reduce using rule 98 (term_muldiv -> .)
    SIM             reduce using rule 98 (term_muldiv -> .)
    NE              reduce using rule 98 (term_muldiv -> .)
    OR              reduce using rule 98 (term_muldiv -> .)
    AND             reduce using rule 98 (term_muldiv -> .)
    RPARENT         reduce using rule 98 (term_muldiv -> .)
    COMMA           reduce using rule 98 (term_muldiv -> .)
    SEMI            reduce using rule 98 (term_muldiv -> .)
    TO              reduce using rule 98 (term_muldiv -> .)

    term_muldiv                    shift and go to state 142

state 119

    (61) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion . funcion
    (63) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion .
    (61) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (62) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (63) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (64) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion

    MAIN            reduce using rule 63 (funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion .)
    FUNCION         shift and go to state 9

    funcion                        shift and go to state 143

state 120

    (62) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion .

    MAIN            reduce using rule 62 (funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion .)


state 121

    (13) func_vars -> memType ID vars_name vars_type . param_type COMMA func_vars
    (14) func_vars -> memType ID vars_name vars_type . param_type
    (105) param_type -> .

    COMMA           reduce using rule 105 (param_type -> .)
    RPARENT         reduce using rule 105 (param_type -> .)

    param_type                     shift and go to state 144

state 122

    (18) function_all -> LBRACKET vars statement_func RBRACKET .

    $end            reduce using rule 18 (function_all -> LBRACKET vars statement_func RBRACKET .)
    FUNCION         reduce using rule 18 (function_all -> LBRACKET vars statement_func RBRACKET .)
    MAIN            reduce using rule 18 (function_all -> LBRACKET vars statement_func RBRACKET .)


state 123

    (34) statement_assign -> ID const_id EQ . opera_add expression add_tabla
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 145

state 124

    (35) statement_assign -> ID const_id save_var . LSQUARE const RSQUARE EQ opera_add expression add_tabla

    LSQUARE         shift and go to state 146


state 125

    (67) statement_function -> ID existe_funcion crea_funcion . LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (68) statement_function -> ID existe_funcion crea_funcion . LPARENT RPARENT crea_subfuncion

    LPARENT         shift and go to state 147


state 126

    (71) statement_condition -> IF LPARENT expression . RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (72) statement_condition -> IF LPARENT expression . RPARENT THEN revisar_expression bloque condition_end

    RPARENT         shift and go to state 148


state 127

    (73) statement_while -> WHILE opera_while LPARENT . expression RPARENT condicion_while DO bloque loop_while
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expression                     shift and go to state 149
    expr                           shift and go to state 114
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 128

    (74) statement_for -> FOR opera_for statement_assign . TO const compara_for condicion_for DO bloque aumenta loop_for

    TO              shift and go to state 150


state 129

    (34) statement_assign -> ID . const_id EQ opera_add expression add_tabla
    (35) statement_assign -> ID . const_id save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla
    (89) const_id -> .

    EQ              reduce using rule 89 (const_id -> .)
    LSQUARE         reduce using rule 89 (const_id -> .)

    const_id                       shift and go to state 104

state 130

    (75) statement_read -> READ LPARENT read_1 . RPARENT

    RPARENT         shift and go to state 151


state 131

    (76) read_1 -> ID . read_instr read_1
    (77) read_1 -> ID . read_instr
    (126) read_instr -> .

    ID              reduce using rule 126 (read_instr -> .)
    RPARENT         reduce using rule 126 (read_instr -> .)

    read_instr                     shift and go to state 152

state 132

    (78) statement_write -> WRITE LPARENT write_1 . RPARENT

    RPARENT         shift and go to state 153


state 133

    (79) write_1 -> expression . write_instr COMMA write_1
    (81) write_1 -> expression . write_instr
    (129) write_instr -> .

    COMMA           reduce using rule 129 (write_instr -> .)
    RPARENT         reduce using rule 129 (write_instr -> .)

    write_instr                    shift and go to state 154

state 134

    (80) write_1 -> STRINGCTE . const_str write_instr COMMA write_1
    (82) write_1 -> STRINGCTE . const_str write_instr
    (93) const_str -> .

    COMMA           reduce using rule 93 (const_str -> .)
    RPARENT         reduce using rule 93 (const_str -> .)

    const_str                      shift and go to state 155

state 135

    (83) write_1 -> ID . const_id find_id LSQUARE const change_address RSQUARE write_instr
    (60) const -> ID . const_id
    (89) const_id -> .

    LSQUARE         reduce using rule 89 (const_id -> .)
    TIMES           reduce using rule 89 (const_id -> .)
    DIVENT          reduce using rule 89 (const_id -> .)
    DIVIDE          reduce using rule 89 (const_id -> .)
    MODULE          reduce using rule 89 (const_id -> .)
    POWER           reduce using rule 89 (const_id -> .)
    PLUS            reduce using rule 89 (const_id -> .)
    MINUS           reduce using rule 89 (const_id -> .)
    LT              reduce using rule 89 (const_id -> .)
    LTE             reduce using rule 89 (const_id -> .)
    GT              reduce using rule 89 (const_id -> .)
    GTE             reduce using rule 89 (const_id -> .)
    SIM             reduce using rule 89 (const_id -> .)
    NE              reduce using rule 89 (const_id -> .)
    OR              reduce using rule 89 (const_id -> .)
    AND             reduce using rule 89 (const_id -> .)
    COMMA           reduce using rule 89 (const_id -> .)
    RPARENT         reduce using rule 89 (const_id -> .)

    const_id                       shift and go to state 156

state 136

    (84) statement_return -> RETURN return_function LPARENT . expression RPARENT return_save_quadruple
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expression                     shift and go to state 157
    expr                           shift and go to state 114
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 137

    (56) const -> LPARENT fondo_virtual expression RPARENT . pop_fondo_virtual
    (103) pop_fondo_virtual -> .

    RSQUARE         reduce using rule 103 (pop_fondo_virtual -> .)
    TIMES           reduce using rule 103 (pop_fondo_virtual -> .)
    DIVENT          reduce using rule 103 (pop_fondo_virtual -> .)
    DIVIDE          reduce using rule 103 (pop_fondo_virtual -> .)
    MODULE          reduce using rule 103 (pop_fondo_virtual -> .)
    POWER           reduce using rule 103 (pop_fondo_virtual -> .)
    PLUS            reduce using rule 103 (pop_fondo_virtual -> .)
    MINUS           reduce using rule 103 (pop_fondo_virtual -> .)
    LT              reduce using rule 103 (pop_fondo_virtual -> .)
    LTE             reduce using rule 103 (pop_fondo_virtual -> .)
    GT              reduce using rule 103 (pop_fondo_virtual -> .)
    GTE             reduce using rule 103 (pop_fondo_virtual -> .)
    SIM             reduce using rule 103 (pop_fondo_virtual -> .)
    NE              reduce using rule 103 (pop_fondo_virtual -> .)
    OR              reduce using rule 103 (pop_fondo_virtual -> .)
    AND             reduce using rule 103 (pop_fondo_virtual -> .)
    RPARENT         reduce using rule 103 (pop_fondo_virtual -> .)
    COMMA           reduce using rule 103 (pop_fondo_virtual -> .)
    SEMI            reduce using rule 103 (pop_fondo_virtual -> .)
    TO              reduce using rule 103 (pop_fondo_virtual -> .)
    DO              reduce using rule 103 (pop_fondo_virtual -> .)

    pop_fondo_virtual              shift and go to state 158

state 138

    (36) expression -> expr oper_y . AND opera_add expression
    (37) expression -> expr oper_y .

    AND             shift and go to state 159
    RPARENT         reduce using rule 37 (expression -> expr oper_y .)
    COMMA           reduce using rule 37 (expression -> expr oper_y .)
    SEMI            reduce using rule 37 (expression -> expr oper_y .)
    TO              reduce using rule 37 (expression -> expr oper_y .)


state 139

    (38) expr -> expr_aux oper_o . OR opera_add expr
    (39) expr -> expr_aux oper_o .

    OR              shift and go to state 160
    AND             reduce using rule 39 (expr -> expr_aux oper_o .)
    RPARENT         reduce using rule 39 (expr -> expr_aux oper_o .)
    COMMA           reduce using rule 39 (expr -> expr_aux oper_o .)
    SEMI            reduce using rule 39 (expr -> expr_aux oper_o .)
    TO              reduce using rule 39 (expr -> expr_aux oper_o .)


state 140

    (40) expr_aux -> expr_sumres expr_rel . LT opera_add expr_aux
    (41) expr_aux -> expr_sumres expr_rel . LTE opera_add expr_aux
    (42) expr_aux -> expr_sumres expr_rel . GT opera_add expr_aux
    (43) expr_aux -> expr_sumres expr_rel . GTE opera_add expr_aux
    (44) expr_aux -> expr_sumres expr_rel . SIM opera_add expr_aux
    (45) expr_aux -> expr_sumres expr_rel . NE opera_add expr_aux
    (46) expr_aux -> expr_sumres expr_rel .

    LT              shift and go to state 161
    LTE             shift and go to state 162
    GT              shift and go to state 163
    GTE             shift and go to state 164
    SIM             shift and go to state 165
    NE              shift and go to state 166
    OR              reduce using rule 46 (expr_aux -> expr_sumres expr_rel .)
    AND             reduce using rule 46 (expr_aux -> expr_sumres expr_rel .)
    RPARENT         reduce using rule 46 (expr_aux -> expr_sumres expr_rel .)
    COMMA           reduce using rule 46 (expr_aux -> expr_sumres expr_rel .)
    SEMI            reduce using rule 46 (expr_aux -> expr_sumres expr_rel .)
    TO              reduce using rule 46 (expr_aux -> expr_sumres expr_rel .)


state 141

    (47) expr_sumres -> expr_muldiv term_sumres . PLUS opera_add expr_sumres
    (48) expr_sumres -> expr_muldiv term_sumres . MINUS opera_add expr_sumres
    (49) expr_sumres -> expr_muldiv term_sumres .

    PLUS            shift and go to state 167
    MINUS           shift and go to state 168
    LT              reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)
    LTE             reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)
    GT              reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)
    GTE             reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)
    SIM             reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)
    NE              reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)
    OR              reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)
    AND             reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)
    RPARENT         reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)
    COMMA           reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)
    SEMI            reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)
    TO              reduce using rule 49 (expr_sumres -> expr_muldiv term_sumres .)


state 142

    (50) expr_muldiv -> const term_muldiv . TIMES opera_add expr_muldiv
    (51) expr_muldiv -> const term_muldiv . DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> const term_muldiv . DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> const term_muldiv . MODULE opera_add expr_muldiv
    (54) expr_muldiv -> const term_muldiv . POWER opera_add expr_muldiv
    (55) expr_muldiv -> const term_muldiv .

    TIMES           shift and go to state 169
    DIVENT          shift and go to state 170
    DIVIDE          shift and go to state 171
    MODULE          shift and go to state 172
    POWER           shift and go to state 173
    PLUS            reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    MINUS           reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    LT              reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    LTE             reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    GT              reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    GTE             reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    SIM             reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    NE              reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    OR              reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    AND             reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    RPARENT         reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    COMMA           reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    SEMI            reduce using rule 55 (expr_muldiv -> const term_muldiv .)
    TO              reduce using rule 55 (expr_muldiv -> const term_muldiv .)


state 143

    (61) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion .

    MAIN            reduce using rule 61 (funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion .)


state 144

    (13) func_vars -> memType ID vars_name vars_type param_type . COMMA func_vars
    (14) func_vars -> memType ID vars_name vars_type param_type .

    COMMA           shift and go to state 174
    RPARENT         reduce using rule 14 (func_vars -> memType ID vars_name vars_type param_type .)


state 145

    (34) statement_assign -> ID const_id EQ opera_add . expression add_tabla
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expression                     shift and go to state 175
    expr                           shift and go to state 114
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 146

    (35) statement_assign -> ID const_id save_var LSQUARE . const RSQUARE EQ opera_add expression add_tabla
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 176

state 147

    (67) statement_function -> ID existe_funcion crea_funcion LPARENT . funcion_aux verifica_param RPARENT crea_subfuncion
    (68) statement_function -> ID existe_funcion crea_funcion LPARENT . RPARENT crea_subfuncion
    (69) funcion_aux -> . expression revisar_parametro
    (70) funcion_aux -> . expression revisar_parametro cuenta_parametro COMMA funcion_aux
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    RPARENT         shift and go to state 178
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    funcion_aux                    shift and go to state 177
    expression                     shift and go to state 179
    expr                           shift and go to state 114
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 148

    (71) statement_condition -> IF LPARENT expression RPARENT . THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (72) statement_condition -> IF LPARENT expression RPARENT . THEN revisar_expression bloque condition_end

    THEN            shift and go to state 180


state 149

    (73) statement_while -> WHILE opera_while LPARENT expression . RPARENT condicion_while DO bloque loop_while

    RPARENT         shift and go to state 181


state 150

    (74) statement_for -> FOR opera_for statement_assign TO . const compara_for condicion_for DO bloque aumenta loop_for
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 182

state 151

    (75) statement_read -> READ LPARENT read_1 RPARENT .

    SEMI            reduce using rule 75 (statement_read -> READ LPARENT read_1 RPARENT .)


state 152

    (76) read_1 -> ID read_instr . read_1
    (77) read_1 -> ID read_instr .
    (76) read_1 -> . ID read_instr read_1
    (77) read_1 -> . ID read_instr

    RPARENT         reduce using rule 77 (read_1 -> ID read_instr .)
    ID              shift and go to state 131

    read_1                         shift and go to state 183

state 153

    (78) statement_write -> WRITE LPARENT write_1 RPARENT .

    SEMI            reduce using rule 78 (statement_write -> WRITE LPARENT write_1 RPARENT .)


state 154

    (79) write_1 -> expression write_instr . COMMA write_1
    (81) write_1 -> expression write_instr .

    COMMA           shift and go to state 184
    RPARENT         reduce using rule 81 (write_1 -> expression write_instr .)


state 155

    (80) write_1 -> STRINGCTE const_str . write_instr COMMA write_1
    (82) write_1 -> STRINGCTE const_str . write_instr
    (129) write_instr -> .

    COMMA           reduce using rule 129 (write_instr -> .)
    RPARENT         reduce using rule 129 (write_instr -> .)

    write_instr                    shift and go to state 185

state 156

    (83) write_1 -> ID const_id . find_id LSQUARE const change_address RSQUARE write_instr
    (60) const -> ID const_id .
    (127) find_id -> .

    TIMES           reduce using rule 60 (const -> ID const_id .)
    DIVENT          reduce using rule 60 (const -> ID const_id .)
    DIVIDE          reduce using rule 60 (const -> ID const_id .)
    MODULE          reduce using rule 60 (const -> ID const_id .)
    POWER           reduce using rule 60 (const -> ID const_id .)
    PLUS            reduce using rule 60 (const -> ID const_id .)
    MINUS           reduce using rule 60 (const -> ID const_id .)
    LT              reduce using rule 60 (const -> ID const_id .)
    LTE             reduce using rule 60 (const -> ID const_id .)
    GT              reduce using rule 60 (const -> ID const_id .)
    GTE             reduce using rule 60 (const -> ID const_id .)
    SIM             reduce using rule 60 (const -> ID const_id .)
    NE              reduce using rule 60 (const -> ID const_id .)
    OR              reduce using rule 60 (const -> ID const_id .)
    AND             reduce using rule 60 (const -> ID const_id .)
    COMMA           reduce using rule 60 (const -> ID const_id .)
    RPARENT         reduce using rule 60 (const -> ID const_id .)
    LSQUARE         reduce using rule 127 (find_id -> .)

    find_id                        shift and go to state 186

state 157

    (84) statement_return -> RETURN return_function LPARENT expression . RPARENT return_save_quadruple

    RPARENT         shift and go to state 187


state 158

    (56) const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .

    RSQUARE         reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    TIMES           reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    DIVENT          reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    DIVIDE          reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    MODULE          reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    POWER           reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    PLUS            reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    MINUS           reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    LT              reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    LTE             reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    GT              reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    GTE             reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    SIM             reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    NE              reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    OR              reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    AND             reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    RPARENT         reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    COMMA           reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    SEMI            reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    TO              reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    DO              reduce using rule 56 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)


state 159

    (36) expression -> expr oper_y AND . opera_add expression
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 188

state 160

    (38) expr -> expr_aux oper_o OR . opera_add expr
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 189

state 161

    (40) expr_aux -> expr_sumres expr_rel LT . opera_add expr_aux
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 190

state 162

    (41) expr_aux -> expr_sumres expr_rel LTE . opera_add expr_aux
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 191

state 163

    (42) expr_aux -> expr_sumres expr_rel GT . opera_add expr_aux
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 192

state 164

    (43) expr_aux -> expr_sumres expr_rel GTE . opera_add expr_aux
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 193

state 165

    (44) expr_aux -> expr_sumres expr_rel SIM . opera_add expr_aux
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 194

state 166

    (45) expr_aux -> expr_sumres expr_rel NE . opera_add expr_aux
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 195

state 167

    (47) expr_sumres -> expr_muldiv term_sumres PLUS . opera_add expr_sumres
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 196

state 168

    (48) expr_sumres -> expr_muldiv term_sumres MINUS . opera_add expr_sumres
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 197

state 169

    (50) expr_muldiv -> const term_muldiv TIMES . opera_add expr_muldiv
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 198

state 170

    (51) expr_muldiv -> const term_muldiv DIVENT . opera_add expr_muldiv
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 199

state 171

    (52) expr_muldiv -> const term_muldiv DIVIDE . opera_add expr_muldiv
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 200

state 172

    (53) expr_muldiv -> const term_muldiv MODULE . opera_add expr_muldiv
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 201

state 173

    (54) expr_muldiv -> const term_muldiv POWER . opera_add expr_muldiv
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 202

state 174

    (13) func_vars -> memType ID vars_name vars_type param_type COMMA . func_vars
    (13) func_vars -> . memType ID vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> . memType ID vars_name vars_type param_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    memType                        shift and go to state 53
    func_vars                      shift and go to state 203

state 175

    (34) statement_assign -> ID const_id EQ opera_add expression . add_tabla
    (94) add_tabla -> .

    SEMI            reduce using rule 94 (add_tabla -> .)
    TO              reduce using rule 94 (add_tabla -> .)

    add_tabla                      shift and go to state 204

state 176

    (35) statement_assign -> ID const_id save_var LSQUARE const . RSQUARE EQ opera_add expression add_tabla

    RSQUARE         shift and go to state 205


state 177

    (67) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux . verifica_param RPARENT crea_subfuncion
    (112) verifica_param -> .

    RPARENT         reduce using rule 112 (verifica_param -> .)

    verifica_param                 shift and go to state 206

state 178

    (68) statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT . crea_subfuncion
    (111) crea_subfuncion -> .

    SEMI            reduce using rule 111 (crea_subfuncion -> .)

    crea_subfuncion                shift and go to state 207

state 179

    (69) funcion_aux -> expression . revisar_parametro
    (70) funcion_aux -> expression . revisar_parametro cuenta_parametro COMMA funcion_aux
    (114) revisar_parametro -> .

    COMMA           reduce using rule 114 (revisar_parametro -> .)
    RPARENT         reduce using rule 114 (revisar_parametro -> .)

    revisar_parametro              shift and go to state 208

state 180

    (71) statement_condition -> IF LPARENT expression RPARENT THEN . revisar_expression bloque ELSE else_expression bloque condition_end
    (72) statement_condition -> IF LPARENT expression RPARENT THEN . revisar_expression bloque condition_end
    (115) revisar_expression -> .

    LBRACKET        reduce using rule 115 (revisar_expression -> .)

    revisar_expression             shift and go to state 209

state 181

    (73) statement_while -> WHILE opera_while LPARENT expression RPARENT . condicion_while DO bloque loop_while
    (119) condicion_while -> .

    DO              reduce using rule 119 (condicion_while -> .)

    condicion_while                shift and go to state 210

state 182

    (74) statement_for -> FOR opera_for statement_assign TO const . compara_for condicion_for DO bloque aumenta loop_for
    (122) compara_for -> .

    DO              reduce using rule 122 (compara_for -> .)

    compara_for                    shift and go to state 211

state 183

    (76) read_1 -> ID read_instr read_1 .

    RPARENT         reduce using rule 76 (read_1 -> ID read_instr read_1 .)


state 184

    (79) write_1 -> expression write_instr COMMA . write_1
    (79) write_1 -> . expression write_instr COMMA write_1
    (80) write_1 -> . STRINGCTE const_str write_instr COMMA write_1
    (81) write_1 -> . expression write_instr
    (82) write_1 -> . STRINGCTE const_str write_instr
    (83) write_1 -> . ID const_id find_id LSQUARE const change_address RSQUARE write_instr
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    STRINGCTE       shift and go to state 134
    ID              shift and go to state 135
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 133
    write_1                        shift and go to state 212
    const                          shift and go to state 118
    expr                           shift and go to state 114
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117

state 185

    (80) write_1 -> STRINGCTE const_str write_instr . COMMA write_1
    (82) write_1 -> STRINGCTE const_str write_instr .

    COMMA           shift and go to state 213
    RPARENT         reduce using rule 82 (write_1 -> STRINGCTE const_str write_instr .)


state 186

    (83) write_1 -> ID const_id find_id . LSQUARE const change_address RSQUARE write_instr

    LSQUARE         shift and go to state 214


state 187

    (84) statement_return -> RETURN return_function LPARENT expression RPARENT . return_save_quadruple
    (131) return_save_quadruple -> .

    SEMI            reduce using rule 131 (return_save_quadruple -> .)

    return_save_quadruple          shift and go to state 215

state 188

    (36) expression -> expr oper_y AND opera_add . expression
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr                           shift and go to state 114
    expression                     shift and go to state 216
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 189

    (38) expr -> expr_aux oper_o OR opera_add . expr
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_aux                       shift and go to state 115
    expr                           shift and go to state 217
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 190

    (40) expr_aux -> expr_sumres expr_rel LT opera_add . expr_aux
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 116
    expr_aux                       shift and go to state 218
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 191

    (41) expr_aux -> expr_sumres expr_rel LTE opera_add . expr_aux
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 116
    expr_aux                       shift and go to state 219
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 192

    (42) expr_aux -> expr_sumres expr_rel GT opera_add . expr_aux
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 116
    expr_aux                       shift and go to state 220
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 193

    (43) expr_aux -> expr_sumres expr_rel GTE opera_add . expr_aux
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 116
    expr_aux                       shift and go to state 221
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 194

    (44) expr_aux -> expr_sumres expr_rel SIM opera_add . expr_aux
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 116
    expr_aux                       shift and go to state 222
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 195

    (45) expr_aux -> expr_sumres expr_rel NE opera_add . expr_aux
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 116
    expr_aux                       shift and go to state 223
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 196

    (47) expr_sumres -> expr_muldiv term_sumres PLUS opera_add . expr_sumres
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_muldiv                    shift and go to state 117
    expr_sumres                    shift and go to state 224
    const                          shift and go to state 118

state 197

    (48) expr_sumres -> expr_muldiv term_sumres MINUS opera_add . expr_sumres
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_muldiv                    shift and go to state 117
    expr_sumres                    shift and go to state 225
    const                          shift and go to state 118

state 198

    (50) expr_muldiv -> const term_muldiv TIMES opera_add . expr_muldiv
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 118
    expr_muldiv                    shift and go to state 226

state 199

    (51) expr_muldiv -> const term_muldiv DIVENT opera_add . expr_muldiv
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 118
    expr_muldiv                    shift and go to state 227

state 200

    (52) expr_muldiv -> const term_muldiv DIVIDE opera_add . expr_muldiv
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 118
    expr_muldiv                    shift and go to state 228

state 201

    (53) expr_muldiv -> const term_muldiv MODULE opera_add . expr_muldiv
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 118
    expr_muldiv                    shift and go to state 229

state 202

    (54) expr_muldiv -> const term_muldiv POWER opera_add . expr_muldiv
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 118
    expr_muldiv                    shift and go to state 230

state 203

    (13) func_vars -> memType ID vars_name vars_type param_type COMMA func_vars .

    RPARENT         reduce using rule 13 (func_vars -> memType ID vars_name vars_type param_type COMMA func_vars .)


state 204

    (34) statement_assign -> ID const_id EQ opera_add expression add_tabla .

    SEMI            reduce using rule 34 (statement_assign -> ID const_id EQ opera_add expression add_tabla .)
    TO              reduce using rule 34 (statement_assign -> ID const_id EQ opera_add expression add_tabla .)


state 205

    (35) statement_assign -> ID const_id save_var LSQUARE const RSQUARE . EQ opera_add expression add_tabla

    EQ              shift and go to state 231


state 206

    (67) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param . RPARENT crea_subfuncion

    RPARENT         shift and go to state 232


state 207

    (68) statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion .

    SEMI            reduce using rule 68 (statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion .)


state 208

    (69) funcion_aux -> expression revisar_parametro .
    (70) funcion_aux -> expression revisar_parametro . cuenta_parametro COMMA funcion_aux
    (113) cuenta_parametro -> .

    RPARENT         reduce using rule 69 (funcion_aux -> expression revisar_parametro .)
    COMMA           reduce using rule 113 (cuenta_parametro -> .)

    cuenta_parametro               shift and go to state 233

state 209

    (71) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression . bloque ELSE else_expression bloque condition_end
    (72) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression . bloque condition_end
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 235

    bloque                         shift and go to state 234

state 210

    (73) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while . DO bloque loop_while

    DO              shift and go to state 236


state 211

    (74) statement_for -> FOR opera_for statement_assign TO const compara_for . condicion_for DO bloque aumenta loop_for
    (123) condicion_for -> .

    DO              reduce using rule 123 (condicion_for -> .)

    condicion_for                  shift and go to state 237

state 212

    (79) write_1 -> expression write_instr COMMA write_1 .

    RPARENT         reduce using rule 79 (write_1 -> expression write_instr COMMA write_1 .)


state 213

    (80) write_1 -> STRINGCTE const_str write_instr COMMA . write_1
    (79) write_1 -> . expression write_instr COMMA write_1
    (80) write_1 -> . STRINGCTE const_str write_instr COMMA write_1
    (81) write_1 -> . expression write_instr
    (82) write_1 -> . STRINGCTE const_str write_instr
    (83) write_1 -> . ID const_id find_id LSQUARE const change_address RSQUARE write_instr
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    STRINGCTE       shift and go to state 134
    ID              shift and go to state 135
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    write_1                        shift and go to state 238
    expression                     shift and go to state 133
    const                          shift and go to state 118
    expr                           shift and go to state 114
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117

state 214

    (83) write_1 -> ID const_id find_id LSQUARE . const change_address RSQUARE write_instr
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 239

state 215

    (84) statement_return -> RETURN return_function LPARENT expression RPARENT return_save_quadruple .

    SEMI            reduce using rule 84 (statement_return -> RETURN return_function LPARENT expression RPARENT return_save_quadruple .)


state 216

    (36) expression -> expr oper_y AND opera_add expression .

    RPARENT         reduce using rule 36 (expression -> expr oper_y AND opera_add expression .)
    COMMA           reduce using rule 36 (expression -> expr oper_y AND opera_add expression .)
    SEMI            reduce using rule 36 (expression -> expr oper_y AND opera_add expression .)
    TO              reduce using rule 36 (expression -> expr oper_y AND opera_add expression .)


state 217

    (38) expr -> expr_aux oper_o OR opera_add expr .

    AND             reduce using rule 38 (expr -> expr_aux oper_o OR opera_add expr .)
    RPARENT         reduce using rule 38 (expr -> expr_aux oper_o OR opera_add expr .)
    COMMA           reduce using rule 38 (expr -> expr_aux oper_o OR opera_add expr .)
    SEMI            reduce using rule 38 (expr -> expr_aux oper_o OR opera_add expr .)
    TO              reduce using rule 38 (expr -> expr_aux oper_o OR opera_add expr .)


state 218

    (40) expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .

    OR              reduce using rule 40 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    AND             reduce using rule 40 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    RPARENT         reduce using rule 40 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    COMMA           reduce using rule 40 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    SEMI            reduce using rule 40 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    TO              reduce using rule 40 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)


state 219

    (41) expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .

    OR              reduce using rule 41 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    AND             reduce using rule 41 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    RPARENT         reduce using rule 41 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    COMMA           reduce using rule 41 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    SEMI            reduce using rule 41 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    TO              reduce using rule 41 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)


state 220

    (42) expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .

    OR              reduce using rule 42 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    AND             reduce using rule 42 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    RPARENT         reduce using rule 42 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    COMMA           reduce using rule 42 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    SEMI            reduce using rule 42 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    TO              reduce using rule 42 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)


state 221

    (43) expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .

    OR              reduce using rule 43 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    AND             reduce using rule 43 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    RPARENT         reduce using rule 43 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    COMMA           reduce using rule 43 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    SEMI            reduce using rule 43 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    TO              reduce using rule 43 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)


state 222

    (44) expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .

    OR              reduce using rule 44 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    AND             reduce using rule 44 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    RPARENT         reduce using rule 44 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    COMMA           reduce using rule 44 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    SEMI            reduce using rule 44 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    TO              reduce using rule 44 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)


state 223

    (45) expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .

    OR              reduce using rule 45 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    AND             reduce using rule 45 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    RPARENT         reduce using rule 45 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    COMMA           reduce using rule 45 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    SEMI            reduce using rule 45 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    TO              reduce using rule 45 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)


state 224

    (47) expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .

    LT              reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    LTE             reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    GT              reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    GTE             reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    SIM             reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    NE              reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    OR              reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    AND             reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    RPARENT         reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    COMMA           reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    SEMI            reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    TO              reduce using rule 47 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)


state 225

    (48) expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .

    LT              reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    LTE             reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    GT              reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    GTE             reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    SIM             reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    NE              reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    OR              reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    AND             reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    RPARENT         reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    COMMA           reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    SEMI            reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    TO              reduce using rule 48 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)


state 226

    (50) expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .

    PLUS            reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    MINUS           reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    LT              reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    LTE             reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    GT              reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    GTE             reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    SIM             reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    NE              reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    OR              reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    AND             reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    RPARENT         reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    COMMA           reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    SEMI            reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    TO              reduce using rule 50 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)


state 227

    (51) expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .

    PLUS            reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    MINUS           reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    LT              reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    LTE             reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    GT              reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    GTE             reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    SIM             reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    NE              reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    OR              reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    AND             reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    RPARENT         reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    COMMA           reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    SEMI            reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    TO              reduce using rule 51 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)


state 228

    (52) expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .

    PLUS            reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    MINUS           reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    LT              reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    LTE             reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    GT              reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    GTE             reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    SIM             reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    NE              reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    OR              reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    AND             reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    RPARENT         reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    COMMA           reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    SEMI            reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    TO              reduce using rule 52 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)


state 229

    (53) expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .

    PLUS            reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    MINUS           reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    LT              reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    LTE             reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    GT              reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    GTE             reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    SIM             reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    NE              reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    OR              reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    AND             reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    RPARENT         reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    COMMA           reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    SEMI            reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    TO              reduce using rule 53 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)


state 230

    (54) expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .

    PLUS            reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    MINUS           reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    LT              reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    LTE             reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    GT              reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    GTE             reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    SIM             reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    NE              reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    OR              reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    AND             reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    RPARENT         reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    COMMA           reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    SEMI            reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    TO              reduce using rule 54 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)


state 231

    (35) statement_assign -> ID const_id save_var LSQUARE const RSQUARE EQ . opera_add expression add_tabla
    (96) opera_add -> .

    LPARENT         reduce using rule 96 (opera_add -> .)
    INTEGERCTE      reduce using rule 96 (opera_add -> .)
    FLOATCTE        reduce using rule 96 (opera_add -> .)
    CHARCTE         reduce using rule 96 (opera_add -> .)
    ID              reduce using rule 96 (opera_add -> .)

    opera_add                      shift and go to state 240

state 232

    (67) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT . crea_subfuncion
    (111) crea_subfuncion -> .

    SEMI            reduce using rule 111 (crea_subfuncion -> .)

    crea_subfuncion                shift and go to state 241

state 233

    (70) funcion_aux -> expression revisar_parametro cuenta_parametro . COMMA funcion_aux

    COMMA           shift and go to state 242


state 234

    (71) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque . ELSE else_expression bloque condition_end
    (72) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque . condition_end
    (117) condition_end -> .

    ELSE            shift and go to state 243
    ID              reduce using rule 117 (condition_end -> .)
    IF              reduce using rule 117 (condition_end -> .)
    WHILE           reduce using rule 117 (condition_end -> .)
    FOR             reduce using rule 117 (condition_end -> .)
    READ            reduce using rule 117 (condition_end -> .)
    WRITE           reduce using rule 117 (condition_end -> .)
    RETURN          reduce using rule 117 (condition_end -> .)
    RBRACKET        reduce using rule 117 (condition_end -> .)

    condition_end                  shift and go to state 244

state 235

    (22) bloque -> LBRACKET . statement_func RBRACKET
    (23) bloque -> LBRACKET . RBRACKET
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (34) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (35) statement_assign -> . ID const_id save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla
    (67) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (68) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (71) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (72) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (73) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (74) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (75) statement_read -> . READ LPARENT read_1 RPARENT
    (78) statement_write -> . WRITE LPARENT write_1 RPARENT
    (84) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple

    RBRACKET        shift and go to state 246
    ID              shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 81
    FOR             shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    RETURN          shift and go to state 85

    statement_func                 shift and go to state 245
    statement                      shift and go to state 70
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78

state 236

    (73) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO . bloque loop_while
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 235

    bloque                         shift and go to state 247

state 237

    (74) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for . DO bloque aumenta loop_for

    DO              shift and go to state 248


state 238

    (80) write_1 -> STRINGCTE const_str write_instr COMMA write_1 .

    RPARENT         reduce using rule 80 (write_1 -> STRINGCTE const_str write_instr COMMA write_1 .)


state 239

    (83) write_1 -> ID const_id find_id LSQUARE const . change_address RSQUARE write_instr
    (128) change_address -> .

    RSQUARE         reduce using rule 128 (change_address -> .)

    change_address                 shift and go to state 249

state 240

    (35) statement_assign -> ID const_id save_var LSQUARE const RSQUARE EQ opera_add . expression add_tabla
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 118
    expression                     shift and go to state 250
    expr                           shift and go to state 114
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117

state 241

    (67) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion .

    SEMI            reduce using rule 67 (statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion .)


state 242

    (70) funcion_aux -> expression revisar_parametro cuenta_parametro COMMA . funcion_aux
    (69) funcion_aux -> . expression revisar_parametro
    (70) funcion_aux -> . expression revisar_parametro cuenta_parametro COMMA funcion_aux
    (36) expression -> . expr oper_y AND opera_add expression
    (37) expression -> . expr oper_y
    (38) expr -> . expr_aux oper_o OR opera_add expr
    (39) expr -> . expr_aux oper_o
    (40) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (41) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (42) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (43) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel
    (47) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (48) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (49) expr_sumres -> . expr_muldiv term_sumres
    (50) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (51) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (52) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (53) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv
    (56) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (57) const -> . INTEGERCTE const_int
    (58) const -> . FLOATCTE const_float
    (59) const -> . CHARCTE const_char
    (60) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expression                     shift and go to state 179
    funcion_aux                    shift and go to state 251
    expr                           shift and go to state 114
    expr_aux                       shift and go to state 115
    expr_sumres                    shift and go to state 116
    expr_muldiv                    shift and go to state 117
    const                          shift and go to state 118

state 243

    (71) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE . else_expression bloque condition_end
    (116) else_expression -> .

    LBRACKET        reduce using rule 116 (else_expression -> .)

    else_expression                shift and go to state 252

state 244

    (72) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .

    ID              reduce using rule 72 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    IF              reduce using rule 72 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    WHILE           reduce using rule 72 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    FOR             reduce using rule 72 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    READ            reduce using rule 72 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    WRITE           reduce using rule 72 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    RETURN          reduce using rule 72 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    RBRACKET        reduce using rule 72 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)


state 245

    (22) bloque -> LBRACKET statement_func . RBRACKET

    RBRACKET        shift and go to state 253


state 246

    (23) bloque -> LBRACKET RBRACKET .

    ELSE            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    ID              reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    IF              reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    FOR             reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    READ            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    WRITE           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 23 (bloque -> LBRACKET RBRACKET .)


state 247

    (73) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque . loop_while
    (120) loop_while -> .

    ID              reduce using rule 120 (loop_while -> .)
    IF              reduce using rule 120 (loop_while -> .)
    WHILE           reduce using rule 120 (loop_while -> .)
    FOR             reduce using rule 120 (loop_while -> .)
    READ            reduce using rule 120 (loop_while -> .)
    WRITE           reduce using rule 120 (loop_while -> .)
    RETURN          reduce using rule 120 (loop_while -> .)
    RBRACKET        reduce using rule 120 (loop_while -> .)

    loop_while                     shift and go to state 254

state 248

    (74) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO . bloque aumenta loop_for
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 235

    bloque                         shift and go to state 255

state 249

    (83) write_1 -> ID const_id find_id LSQUARE const change_address . RSQUARE write_instr

    RSQUARE         shift and go to state 256


state 250

    (35) statement_assign -> ID const_id save_var LSQUARE const RSQUARE EQ opera_add expression . add_tabla
    (94) add_tabla -> .

    SEMI            reduce using rule 94 (add_tabla -> .)
    TO              reduce using rule 94 (add_tabla -> .)

    add_tabla                      shift and go to state 257

state 251

    (70) funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux .

    RPARENT         reduce using rule 70 (funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux .)


state 252

    (71) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression . bloque condition_end
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 235

    bloque                         shift and go to state 258

state 253

    (22) bloque -> LBRACKET statement_func RBRACKET .

    ELSE            reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    ID              reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    IF              reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    WHILE           reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    FOR             reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    READ            reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    WRITE           reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    RETURN          reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    RBRACKET        reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)


state 254

    (73) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .

    ID              reduce using rule 73 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    IF              reduce using rule 73 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    WHILE           reduce using rule 73 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    FOR             reduce using rule 73 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    READ            reduce using rule 73 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    WRITE           reduce using rule 73 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    RETURN          reduce using rule 73 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    RBRACKET        reduce using rule 73 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)


state 255

    (74) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque . aumenta loop_for
    (124) aumenta -> .

    ID              reduce using rule 124 (aumenta -> .)
    IF              reduce using rule 124 (aumenta -> .)
    WHILE           reduce using rule 124 (aumenta -> .)
    FOR             reduce using rule 124 (aumenta -> .)
    READ            reduce using rule 124 (aumenta -> .)
    WRITE           reduce using rule 124 (aumenta -> .)
    RETURN          reduce using rule 124 (aumenta -> .)
    RBRACKET        reduce using rule 124 (aumenta -> .)

    aumenta                        shift and go to state 259

state 256

    (83) write_1 -> ID const_id find_id LSQUARE const change_address RSQUARE . write_instr
    (129) write_instr -> .

    RPARENT         reduce using rule 129 (write_instr -> .)

    write_instr                    shift and go to state 260

state 257

    (35) statement_assign -> ID const_id save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla .

    SEMI            reduce using rule 35 (statement_assign -> ID const_id save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla .)
    TO              reduce using rule 35 (statement_assign -> ID const_id save_var LSQUARE const RSQUARE EQ opera_add expression add_tabla .)


state 258

    (71) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque . condition_end
    (117) condition_end -> .

    ID              reduce using rule 117 (condition_end -> .)
    IF              reduce using rule 117 (condition_end -> .)
    WHILE           reduce using rule 117 (condition_end -> .)
    FOR             reduce using rule 117 (condition_end -> .)
    READ            reduce using rule 117 (condition_end -> .)
    WRITE           reduce using rule 117 (condition_end -> .)
    RETURN          reduce using rule 117 (condition_end -> .)
    RBRACKET        reduce using rule 117 (condition_end -> .)

    condition_end                  shift and go to state 261

state 259

    (74) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta . loop_for
    (125) loop_for -> .

    ID              reduce using rule 125 (loop_for -> .)
    IF              reduce using rule 125 (loop_for -> .)
    WHILE           reduce using rule 125 (loop_for -> .)
    FOR             reduce using rule 125 (loop_for -> .)
    READ            reduce using rule 125 (loop_for -> .)
    WRITE           reduce using rule 125 (loop_for -> .)
    RETURN          reduce using rule 125 (loop_for -> .)
    RBRACKET        reduce using rule 125 (loop_for -> .)

    loop_for                       shift and go to state 262

state 260

    (83) write_1 -> ID const_id find_id LSQUARE const change_address RSQUARE write_instr .

    RPARENT         reduce using rule 83 (write_1 -> ID const_id find_id LSQUARE const change_address RSQUARE write_instr .)


state 261

    (71) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .

    ID              reduce using rule 71 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    IF              reduce using rule 71 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    WHILE           reduce using rule 71 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    FOR             reduce using rule 71 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    READ            reduce using rule 71 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    WRITE           reduce using rule 71 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    RETURN          reduce using rule 71 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    RBRACKET        reduce using rule 71 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)


state 262

    (74) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .

    ID              reduce using rule 74 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    IF              reduce using rule 74 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    WHILE           reduce using rule 74 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    FOR             reduce using rule 74 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    READ            reduce using rule 74 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    WRITE           reduce using rule 74 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    RETURN          reduce using rule 74 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    RBRACKET        reduce using rule 74 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)


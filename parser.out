Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    NEWLINE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMI vars funcion main
Rule 2     programa -> PROGRAM ID SEMI funcion main
Rule 3     programa -> PROGRAM ID SEMI vars main
Rule 4     programa -> PROGRAM ID SEMI main
Rule 5     main -> MAIN function_name verifica_name LPARENT RPARENT function_all end_main
Rule 6     vars -> vars list_vars SEMI
Rule 7     vars -> VAR list_vars SEMI
Rule 8     list_vars -> list_vars COMMA vars_array
Rule 9     list_vars -> list_vars COMMA ID vars_name vars_type
Rule 10    list_vars -> memType vars_array
Rule 11    list_vars -> memType ID vars_name vars_type
Rule 12    vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory
Rule 13    func_vars -> memType ID vars_name vars_type param_type COMMA func_vars
Rule 14    func_vars -> memType ID vars_name vars_type param_type
Rule 15    memType -> INT loType
Rule 16    memType -> FLOAT loType
Rule 17    memType -> CHAR loType
Rule 18    function_all -> LBRACKET vars statement_func RBRACKET
Rule 19    function_all -> LBRACKET vars RBRACKET
Rule 20    function_all -> LBRACKET statement_func RBRACKET
Rule 21    function_all -> LBRACKET RBRACKET
Rule 22    bloque -> LBRACKET statement_func RBRACKET
Rule 23    bloque -> LBRACKET RBRACKET
Rule 24    statement_func -> statement statement_func
Rule 25    statement_func -> statement
Rule 26    statement -> statement_assign SEMI
Rule 27    statement -> statement_function SEMI
Rule 28    statement -> statement_condition
Rule 29    statement -> statement_while
Rule 30    statement -> statement_for
Rule 31    statement -> statement_read SEMI
Rule 32    statement -> statement_write SEMI
Rule 33    statement -> statement_return SEMI
Rule 34    statement -> statement_statistics SEMI
Rule 35    statement -> statement_math SEMI
Rule 36    statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
Rule 37    statement_assign -> ID const_id EQ opera_add expression add_tabla
Rule 38    expression -> ID const_id LSQUARE const save_var RSQUARE
Rule 39    expression -> expr oper_y AND opera_add expression
Rule 40    expression -> expr oper_y
Rule 41    expr -> expr_aux oper_o OR opera_add expr
Rule 42    expr -> expr_aux oper_o
Rule 43    expr_aux -> expr_sumres expr_rel LT opera_add expr_aux
Rule 44    expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux
Rule 45    expr_aux -> expr_sumres expr_rel GT opera_add expr_aux
Rule 46    expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux
Rule 47    expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux
Rule 48    expr_aux -> expr_sumres expr_rel NE opera_add expr_aux
Rule 49    expr_aux -> expr_sumres expr_rel
Rule 50    expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres
Rule 51    expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres
Rule 52    expr_sumres -> expr_muldiv term_sumres
Rule 53    expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv
Rule 54    expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv
Rule 55    expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv
Rule 56    expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv
Rule 57    expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv
Rule 58    expr_muldiv -> const term_muldiv
Rule 59    const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
Rule 60    const -> INTEGERCTE const_int
Rule 61    const -> FLOATCTE const_float
Rule 62    const -> CHARCTE const_char
Rule 63    const -> ID const_id
Rule 64    funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
Rule 65    funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
Rule 66    funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
Rule 67    funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
Rule 68    parametro -> LPARENT func_vars RPARENT
Rule 69    parametro -> LPARENT RPARENT
Rule 70    statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
Rule 71    statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
Rule 72    funcion_aux -> expression revisar_parametro
Rule 73    funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux
Rule 74    statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
Rule 75    statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
Rule 76    statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
Rule 77    statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
Rule 78    statement_read -> READ LPARENT read_1 RPARENT
Rule 79    read_1 -> ID read_instr read_1
Rule 80    read_1 -> ID read_instr
Rule 81    statement_write -> WRITE LPARENT write_1 RPARENT
Rule 82    write_1 -> expression write_instr COMMA write_1
Rule 83    write_1 -> STRINGCTE const_str write_instr COMMA write_1
Rule 84    write_1 -> expression write_instr
Rule 85    write_1 -> STRINGCTE const_str write_instr
Rule 86    statement_return -> RETURN return_function LPARENT expression RPARENT return_save_quadruple
Rule 87    statement_statistics -> MEDIA LPARENT const read_arg_mean RPARENT
Rule 88    statement_statistics -> MEDIANA LPARENT const read_arg_median RPARENT
Rule 89    statement_statistics -> MODA LPARENT const read_arg_mode RPARENT
Rule 90    statement_statistics -> VARIANZA LPARENT const read_arg_varianza RPARENT
Rule 91    statement_statistics -> ESDEV LPARENT const read_arg_esdev RPARENT
Rule 92    statement_math -> ORDENAZ LPARENT const read_arg_sort RPARENT
Rule 93    statement_math -> ORDENZA LPARENT const read_arg_reverse RPARENT
Rule 94    loType -> <empty>
Rule 95    vars_name -> <empty>
Rule 96    vars_type -> <empty>
Rule 97    add_memory -> <empty>
Rule 98    const_id -> <empty>
Rule 99    const_int -> <empty>
Rule 100   const_float -> <empty>
Rule 101   const_char -> <empty>
Rule 102   const_str -> <empty>
Rule 103   add_tabla -> <empty>
Rule 104   save_var -> <empty>
Rule 105   opera_add -> <empty>
Rule 106   term_sumres -> <empty>
Rule 107   term_muldiv -> <empty>
Rule 108   expr_rel -> <empty>
Rule 109   oper_o -> <empty>
Rule 110   oper_y -> <empty>
Rule 111   fondo_virtual -> <empty>
Rule 112   pop_fondo_virtual -> <empty>
Rule 113   verifica_name -> <empty>
Rule 114   param_type -> <empty>
Rule 115   rev_quad -> <empty>
Rule 116   function_name -> <empty>
Rule 117   fin_funcion -> <empty>
Rule 118   existe_funcion -> <empty>
Rule 119   crea_funcion -> <empty>
Rule 120   crea_subfuncion -> <empty>
Rule 121   verifica_param -> <empty>
Rule 122   cuenta_parametro -> <empty>
Rule 123   revisar_parametro -> <empty>
Rule 124   revisar_expression -> <empty>
Rule 125   else_expression -> <empty>
Rule 126   condition_end -> <empty>
Rule 127   opera_while -> <empty>
Rule 128   condicion_while -> <empty>
Rule 129   loop_while -> <empty>
Rule 130   opera_for -> <empty>
Rule 131   compara_for -> <empty>
Rule 132   condicion_for -> <empty>
Rule 133   aumenta -> <empty>
Rule 134   loop_for -> <empty>
Rule 135   read_arg_mean -> <empty>
Rule 136   read_arg_median -> <empty>
Rule 137   read_arg_mode -> <empty>
Rule 138   read_arg_varianza -> <empty>
Rule 139   read_arg_esdev -> <empty>
Rule 140   read_arg_sort -> <empty>
Rule 141   read_arg_reverse -> <empty>
Rule 142   read_instr -> <empty>
Rule 143   write_instr -> <empty>
Rule 144   return_function -> <empty>
Rule 145   return_save_quadruple -> <empty>
Rule 146   end_main -> <empty>

Terminals, with rules where they appear

AND                  : 39
CHAR                 : 17
CHARCTE              : 62
COMMA                : 8 9 13 73 82 83
COMMENT              : 
DIVENT               : 54
DIVIDE               : 55
DO                   : 76 77
ELSE                 : 74
EQ                   : 36 37
ESDEV                : 91
FLOAT                : 16
FLOATCTE             : 61
FOR                  : 77
FUNCION              : 64 65 66 67
GT                   : 45
GTE                  : 46
ID                   : 1 2 3 4 9 11 12 13 14 36 37 38 63 64 65 66 67 70 71 79 80
IF                   : 74 75
INT                  : 15
INTEGERCTE           : 60
LBRACKET             : 18 19 20 21 22 23
LPARENT              : 5 59 68 69 70 71 74 75 76 78 81 86 87 88 89 90 91 92 93
LSQUARE              : 12 36 38
LT                   : 43
LTE                  : 44
MAIN                 : 5
MEDIA                : 87
MEDIANA              : 88
MINUS                : 51
MODA                 : 89
MODULE               : 56
NE                   : 48
NEWLINE              : 
OR                   : 41
ORDENAZ              : 92
ORDENZA              : 93
PLUS                 : 50
POWER                : 57
PROGRAM              : 1 2 3 4
RBRACKET             : 18 19 20 21 22 23
READ                 : 78
RETURN               : 86
RPARENT              : 5 59 68 69 70 71 74 75 76 78 81 86 87 88 89 90 91 92 93
RSQUARE              : 12 36 38
SEMI                 : 1 2 3 4 6 7 26 27 31 32 33 34 35
SIM                  : 47
STRINGCTE            : 83 85
THEN                 : 74 75
TIMES                : 53
TO                   : 77
VAR                  : 7
VARIANZA             : 90
VOID                 : 64 66
WHILE                : 76
WRITE                : 81
error                : 

Nonterminals, with rules where they appear

add_memory           : 12
add_tabla            : 36 37
aumenta              : 77
bloque               : 74 74 75 76 77
compara_for          : 77
condicion_for        : 77
condicion_while      : 76
condition_end        : 74 75
const                : 12 36 38 53 54 55 56 57 58 77 87 88 89 90 91 92 93
const_char           : 62
const_float          : 61
const_id             : 36 37 38 63
const_int            : 60
const_str            : 83 85
crea_funcion         : 70 71
crea_subfuncion      : 70 71
cuenta_parametro     : 73
else_expression      : 74
end_main             : 5
existe_funcion       : 70 71
expr                 : 39 40 41
expr_aux             : 41 42 43 44 45 46 47 48
expr_muldiv          : 50 51 52 53 54 55 56 57
expr_rel             : 43 44 45 46 47 48 49
expr_sumres          : 43 44 45 46 47 48 49 50 51
expression           : 36 37 39 59 72 73 74 75 76 82 84 86
fin_funcion          : 64 65 66 67
fondo_virtual        : 59
func_vars            : 13 68
funcion              : 1 2 64 65
funcion_aux          : 70 73
function_all         : 5 64 65 66 67
function_name        : 5 64 65 66 67
list_vars            : 6 7 8 9
loType               : 15 16 17 64 66
loop_for             : 77
loop_while           : 76
main                 : 1 2 3 4
memType              : 10 11 13 14 65 67
oper_o               : 41 42
oper_y               : 39 40
opera_add            : 36 37 39 41 43 44 45 46 47 48 50 51 53 54 55 56 57
opera_for            : 77
opera_while          : 76
param_type           : 13 14
parametro            : 64 65 66 67
pop_fondo_virtual    : 59
programa             : 0
read_1               : 78 79
read_arg_esdev       : 91
read_arg_mean        : 87
read_arg_median      : 88
read_arg_mode        : 89
read_arg_reverse     : 93
read_arg_sort        : 92
read_arg_varianza    : 90
read_instr           : 79 80
return_function      : 86
return_save_quadruple : 86
rev_quad             : 64 65 66 67
revisar_expression   : 74 75
revisar_parametro    : 72 73
save_var             : 36 38
statement            : 24 25
statement_assign     : 26 77
statement_condition  : 28
statement_for        : 30
statement_func       : 18 20 22 24
statement_function   : 27
statement_math       : 35
statement_read       : 31
statement_return     : 33
statement_statistics : 34
statement_while      : 29
statement_write      : 32
term_muldiv          : 53 54 55 56 57 58
term_sumres          : 50 51 52
vars                 : 1 3 6 18 19
vars_array           : 8 10
vars_name            : 9 11 12 13 14
vars_type            : 9 11 12 13 14
verifica_name        : 5
verifica_param       : 70
write_1              : 81 82 83
write_instr          : 82 83 84 85

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMI vars funcion main
    (2) programa -> . PROGRAM ID SEMI funcion main
    (3) programa -> . PROGRAM ID SEMI vars main
    (4) programa -> . PROGRAM ID SEMI main

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMI vars funcion main
    (2) programa -> PROGRAM . ID SEMI funcion main
    (3) programa -> PROGRAM . ID SEMI vars main
    (4) programa -> PROGRAM . ID SEMI main

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMI vars funcion main
    (2) programa -> PROGRAM ID . SEMI funcion main
    (3) programa -> PROGRAM ID . SEMI vars main
    (4) programa -> PROGRAM ID . SEMI main

    SEMI            shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMI . vars funcion main
    (2) programa -> PROGRAM ID SEMI . funcion main
    (3) programa -> PROGRAM ID SEMI . vars main
    (4) programa -> PROGRAM ID SEMI . main
    (6) vars -> . vars list_vars SEMI
    (7) vars -> . VAR list_vars SEMI
    (64) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (67) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main

    VAR             shift and go to state 8
    FUNCION         shift and go to state 9
    MAIN            shift and go to state 10

    vars                           shift and go to state 5
    funcion                        shift and go to state 6
    main                           shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMI vars . funcion main
    (3) programa -> PROGRAM ID SEMI vars . main
    (6) vars -> vars . list_vars SEMI
    (64) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (67) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main
    (8) list_vars -> . list_vars COMMA vars_array
    (9) list_vars -> . list_vars COMMA ID vars_name vars_type
    (10) list_vars -> . memType vars_array
    (11) list_vars -> . memType ID vars_name vars_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    FUNCION         shift and go to state 9
    MAIN            shift and go to state 10
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    funcion                        shift and go to state 11
    main                           shift and go to state 12
    list_vars                      shift and go to state 13
    memType                        shift and go to state 14

state 6

    (2) programa -> PROGRAM ID SEMI funcion . main
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main

    MAIN            shift and go to state 10

    main                           shift and go to state 18

state 7

    (4) programa -> PROGRAM ID SEMI main .

    $end            reduce using rule 4 (programa -> PROGRAM ID SEMI main .)


state 8

    (7) vars -> VAR . list_vars SEMI
    (8) list_vars -> . list_vars COMMA vars_array
    (9) list_vars -> . list_vars COMMA ID vars_name vars_type
    (10) list_vars -> . memType vars_array
    (11) list_vars -> . memType ID vars_name vars_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    list_vars                      shift and go to state 19
    memType                        shift and go to state 14

state 9

    (64) funcion -> FUNCION . VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> FUNCION . memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> FUNCION . VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (67) funcion -> FUNCION . memType ID function_name parametro rev_quad function_all fin_funcion
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    VOID            shift and go to state 20
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    memType                        shift and go to state 21

state 10

    (5) main -> MAIN . function_name verifica_name LPARENT RPARENT function_all end_main
    (116) function_name -> .

    LPARENT         reduce using rule 116 (function_name -> .)

    function_name                  shift and go to state 22

state 11

    (1) programa -> PROGRAM ID SEMI vars funcion . main
    (5) main -> . MAIN function_name verifica_name LPARENT RPARENT function_all end_main

    MAIN            shift and go to state 10

    main                           shift and go to state 23

state 12

    (3) programa -> PROGRAM ID SEMI vars main .

    $end            reduce using rule 3 (programa -> PROGRAM ID SEMI vars main .)


state 13

    (6) vars -> vars list_vars . SEMI
    (8) list_vars -> list_vars . COMMA vars_array
    (9) list_vars -> list_vars . COMMA ID vars_name vars_type

    SEMI            shift and go to state 24
    COMMA           shift and go to state 25


state 14

    (10) list_vars -> memType . vars_array
    (11) list_vars -> memType . ID vars_name vars_type
    (12) vars_array -> . ID vars_name vars_type LSQUARE const RSQUARE add_memory

    ID              shift and go to state 27

    vars_array                     shift and go to state 26

state 15

    (15) memType -> INT . loType
    (94) loType -> .

    ID              reduce using rule 94 (loType -> .)

    loType                         shift and go to state 28

state 16

    (16) memType -> FLOAT . loType
    (94) loType -> .

    ID              reduce using rule 94 (loType -> .)

    loType                         shift and go to state 29

state 17

    (17) memType -> CHAR . loType
    (94) loType -> .

    ID              reduce using rule 94 (loType -> .)

    loType                         shift and go to state 30

state 18

    (2) programa -> PROGRAM ID SEMI funcion main .

    $end            reduce using rule 2 (programa -> PROGRAM ID SEMI funcion main .)


state 19

    (7) vars -> VAR list_vars . SEMI
    (8) list_vars -> list_vars . COMMA vars_array
    (9) list_vars -> list_vars . COMMA ID vars_name vars_type

    SEMI            shift and go to state 31
    COMMA           shift and go to state 25


state 20

    (64) funcion -> FUNCION VOID . loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> FUNCION VOID . loType ID function_name parametro rev_quad function_all fin_funcion
    (94) loType -> .

    ID              reduce using rule 94 (loType -> .)

    loType                         shift and go to state 32

state 21

    (65) funcion -> FUNCION memType . ID function_name parametro rev_quad function_all fin_funcion funcion
    (67) funcion -> FUNCION memType . ID function_name parametro rev_quad function_all fin_funcion

    ID              shift and go to state 33


state 22

    (5) main -> MAIN function_name . verifica_name LPARENT RPARENT function_all end_main
    (113) verifica_name -> .

    LPARENT         reduce using rule 113 (verifica_name -> .)

    verifica_name                  shift and go to state 34

state 23

    (1) programa -> PROGRAM ID SEMI vars funcion main .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMI vars funcion main .)


state 24

    (6) vars -> vars list_vars SEMI .

    FUNCION         reduce using rule 6 (vars -> vars list_vars SEMI .)
    MAIN            reduce using rule 6 (vars -> vars list_vars SEMI .)
    INT             reduce using rule 6 (vars -> vars list_vars SEMI .)
    FLOAT           reduce using rule 6 (vars -> vars list_vars SEMI .)
    CHAR            reduce using rule 6 (vars -> vars list_vars SEMI .)
    RBRACKET        reduce using rule 6 (vars -> vars list_vars SEMI .)
    ID              reduce using rule 6 (vars -> vars list_vars SEMI .)
    IF              reduce using rule 6 (vars -> vars list_vars SEMI .)
    WHILE           reduce using rule 6 (vars -> vars list_vars SEMI .)
    FOR             reduce using rule 6 (vars -> vars list_vars SEMI .)
    READ            reduce using rule 6 (vars -> vars list_vars SEMI .)
    WRITE           reduce using rule 6 (vars -> vars list_vars SEMI .)
    RETURN          reduce using rule 6 (vars -> vars list_vars SEMI .)
    MEDIA           reduce using rule 6 (vars -> vars list_vars SEMI .)
    MEDIANA         reduce using rule 6 (vars -> vars list_vars SEMI .)
    MODA            reduce using rule 6 (vars -> vars list_vars SEMI .)
    VARIANZA        reduce using rule 6 (vars -> vars list_vars SEMI .)
    ESDEV           reduce using rule 6 (vars -> vars list_vars SEMI .)
    ORDENAZ         reduce using rule 6 (vars -> vars list_vars SEMI .)
    ORDENZA         reduce using rule 6 (vars -> vars list_vars SEMI .)


state 25

    (8) list_vars -> list_vars COMMA . vars_array
    (9) list_vars -> list_vars COMMA . ID vars_name vars_type
    (12) vars_array -> . ID vars_name vars_type LSQUARE const RSQUARE add_memory

    ID              shift and go to state 36

    vars_array                     shift and go to state 35

state 26

    (10) list_vars -> memType vars_array .

    SEMI            reduce using rule 10 (list_vars -> memType vars_array .)
    COMMA           reduce using rule 10 (list_vars -> memType vars_array .)


state 27

    (11) list_vars -> memType ID . vars_name vars_type
    (12) vars_array -> ID . vars_name vars_type LSQUARE const RSQUARE add_memory
    (95) vars_name -> .

    LSQUARE         reduce using rule 95 (vars_name -> .)
    SEMI            reduce using rule 95 (vars_name -> .)
    COMMA           reduce using rule 95 (vars_name -> .)

    vars_name                      shift and go to state 37

state 28

    (15) memType -> INT loType .

    ID              reduce using rule 15 (memType -> INT loType .)


state 29

    (16) memType -> FLOAT loType .

    ID              reduce using rule 16 (memType -> FLOAT loType .)


state 30

    (17) memType -> CHAR loType .

    ID              reduce using rule 17 (memType -> CHAR loType .)


state 31

    (7) vars -> VAR list_vars SEMI .

    FUNCION         reduce using rule 7 (vars -> VAR list_vars SEMI .)
    MAIN            reduce using rule 7 (vars -> VAR list_vars SEMI .)
    INT             reduce using rule 7 (vars -> VAR list_vars SEMI .)
    FLOAT           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    CHAR            reduce using rule 7 (vars -> VAR list_vars SEMI .)
    RBRACKET        reduce using rule 7 (vars -> VAR list_vars SEMI .)
    ID              reduce using rule 7 (vars -> VAR list_vars SEMI .)
    IF              reduce using rule 7 (vars -> VAR list_vars SEMI .)
    WHILE           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    FOR             reduce using rule 7 (vars -> VAR list_vars SEMI .)
    READ            reduce using rule 7 (vars -> VAR list_vars SEMI .)
    WRITE           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    RETURN          reduce using rule 7 (vars -> VAR list_vars SEMI .)
    MEDIA           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    MEDIANA         reduce using rule 7 (vars -> VAR list_vars SEMI .)
    MODA            reduce using rule 7 (vars -> VAR list_vars SEMI .)
    VARIANZA        reduce using rule 7 (vars -> VAR list_vars SEMI .)
    ESDEV           reduce using rule 7 (vars -> VAR list_vars SEMI .)
    ORDENAZ         reduce using rule 7 (vars -> VAR list_vars SEMI .)
    ORDENZA         reduce using rule 7 (vars -> VAR list_vars SEMI .)


state 32

    (64) funcion -> FUNCION VOID loType . ID function_name parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> FUNCION VOID loType . ID function_name parametro rev_quad function_all fin_funcion

    ID              shift and go to state 38


state 33

    (65) funcion -> FUNCION memType ID . function_name parametro rev_quad function_all fin_funcion funcion
    (67) funcion -> FUNCION memType ID . function_name parametro rev_quad function_all fin_funcion
    (116) function_name -> .

    LPARENT         reduce using rule 116 (function_name -> .)

    function_name                  shift and go to state 39

state 34

    (5) main -> MAIN function_name verifica_name . LPARENT RPARENT function_all end_main

    LPARENT         shift and go to state 40


state 35

    (8) list_vars -> list_vars COMMA vars_array .

    SEMI            reduce using rule 8 (list_vars -> list_vars COMMA vars_array .)
    COMMA           reduce using rule 8 (list_vars -> list_vars COMMA vars_array .)


state 36

    (9) list_vars -> list_vars COMMA ID . vars_name vars_type
    (12) vars_array -> ID . vars_name vars_type LSQUARE const RSQUARE add_memory
    (95) vars_name -> .

    LSQUARE         reduce using rule 95 (vars_name -> .)
    SEMI            reduce using rule 95 (vars_name -> .)
    COMMA           reduce using rule 95 (vars_name -> .)

    vars_name                      shift and go to state 41

state 37

    (11) list_vars -> memType ID vars_name . vars_type
    (12) vars_array -> ID vars_name . vars_type LSQUARE const RSQUARE add_memory
    (96) vars_type -> .

    LSQUARE         reduce using rule 96 (vars_type -> .)
    SEMI            reduce using rule 96 (vars_type -> .)
    COMMA           reduce using rule 96 (vars_type -> .)

    vars_type                      shift and go to state 42

state 38

    (64) funcion -> FUNCION VOID loType ID . function_name parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> FUNCION VOID loType ID . function_name parametro rev_quad function_all fin_funcion
    (116) function_name -> .

    LPARENT         reduce using rule 116 (function_name -> .)

    function_name                  shift and go to state 43

state 39

    (65) funcion -> FUNCION memType ID function_name . parametro rev_quad function_all fin_funcion funcion
    (67) funcion -> FUNCION memType ID function_name . parametro rev_quad function_all fin_funcion
    (68) parametro -> . LPARENT func_vars RPARENT
    (69) parametro -> . LPARENT RPARENT

    LPARENT         shift and go to state 45

    parametro                      shift and go to state 44

state 40

    (5) main -> MAIN function_name verifica_name LPARENT . RPARENT function_all end_main

    RPARENT         shift and go to state 46


state 41

    (9) list_vars -> list_vars COMMA ID vars_name . vars_type
    (12) vars_array -> ID vars_name . vars_type LSQUARE const RSQUARE add_memory
    (96) vars_type -> .

    LSQUARE         reduce using rule 96 (vars_type -> .)
    SEMI            reduce using rule 96 (vars_type -> .)
    COMMA           reduce using rule 96 (vars_type -> .)

    vars_type                      shift and go to state 47

state 42

    (11) list_vars -> memType ID vars_name vars_type .
    (12) vars_array -> ID vars_name vars_type . LSQUARE const RSQUARE add_memory

    SEMI            reduce using rule 11 (list_vars -> memType ID vars_name vars_type .)
    COMMA           reduce using rule 11 (list_vars -> memType ID vars_name vars_type .)
    LSQUARE         shift and go to state 48


state 43

    (64) funcion -> FUNCION VOID loType ID function_name . parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> FUNCION VOID loType ID function_name . parametro rev_quad function_all fin_funcion
    (68) parametro -> . LPARENT func_vars RPARENT
    (69) parametro -> . LPARENT RPARENT

    LPARENT         shift and go to state 45

    parametro                      shift and go to state 49

state 44

    (65) funcion -> FUNCION memType ID function_name parametro . rev_quad function_all fin_funcion funcion
    (67) funcion -> FUNCION memType ID function_name parametro . rev_quad function_all fin_funcion
    (115) rev_quad -> .

    LBRACKET        reduce using rule 115 (rev_quad -> .)

    rev_quad                       shift and go to state 50

state 45

    (68) parametro -> LPARENT . func_vars RPARENT
    (69) parametro -> LPARENT . RPARENT
    (13) func_vars -> . memType ID vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> . memType ID vars_name vars_type param_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    RPARENT         shift and go to state 52
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    func_vars                      shift and go to state 51
    memType                        shift and go to state 53

state 46

    (5) main -> MAIN function_name verifica_name LPARENT RPARENT . function_all end_main
    (18) function_all -> . LBRACKET vars statement_func RBRACKET
    (19) function_all -> . LBRACKET vars RBRACKET
    (20) function_all -> . LBRACKET statement_func RBRACKET
    (21) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 55

    function_all                   shift and go to state 54

state 47

    (9) list_vars -> list_vars COMMA ID vars_name vars_type .
    (12) vars_array -> ID vars_name vars_type . LSQUARE const RSQUARE add_memory

    SEMI            reduce using rule 9 (list_vars -> list_vars COMMA ID vars_name vars_type .)
    COMMA           reduce using rule 9 (list_vars -> list_vars COMMA ID vars_name vars_type .)
    LSQUARE         shift and go to state 48


state 48

    (12) vars_array -> ID vars_name vars_type LSQUARE . const RSQUARE add_memory
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 57

state 49

    (64) funcion -> FUNCION VOID loType ID function_name parametro . rev_quad function_all fin_funcion funcion
    (66) funcion -> FUNCION VOID loType ID function_name parametro . rev_quad function_all fin_funcion
    (115) rev_quad -> .

    LBRACKET        reduce using rule 115 (rev_quad -> .)

    rev_quad                       shift and go to state 62

state 50

    (65) funcion -> FUNCION memType ID function_name parametro rev_quad . function_all fin_funcion funcion
    (67) funcion -> FUNCION memType ID function_name parametro rev_quad . function_all fin_funcion
    (18) function_all -> . LBRACKET vars statement_func RBRACKET
    (19) function_all -> . LBRACKET vars RBRACKET
    (20) function_all -> . LBRACKET statement_func RBRACKET
    (21) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 55

    function_all                   shift and go to state 63

state 51

    (68) parametro -> LPARENT func_vars . RPARENT

    RPARENT         shift and go to state 64


state 52

    (69) parametro -> LPARENT RPARENT .

    LBRACKET        reduce using rule 69 (parametro -> LPARENT RPARENT .)


state 53

    (13) func_vars -> memType . ID vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> memType . ID vars_name vars_type param_type

    ID              shift and go to state 65


state 54

    (5) main -> MAIN function_name verifica_name LPARENT RPARENT function_all . end_main
    (146) end_main -> .

    $end            reduce using rule 146 (end_main -> .)

    end_main                       shift and go to state 66

state 55

    (18) function_all -> LBRACKET . vars statement_func RBRACKET
    (19) function_all -> LBRACKET . vars RBRACKET
    (20) function_all -> LBRACKET . statement_func RBRACKET
    (21) function_all -> LBRACKET . RBRACKET
    (6) vars -> . vars list_vars SEMI
    (7) vars -> . VAR list_vars SEMI
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (34) statement -> . statement_statistics SEMI
    (35) statement -> . statement_math SEMI
    (36) statement_assign -> . ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (37) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (70) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (71) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (74) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (75) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (76) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (77) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (78) statement_read -> . READ LPARENT read_1 RPARENT
    (81) statement_write -> . WRITE LPARENT write_1 RPARENT
    (86) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple
    (87) statement_statistics -> . MEDIA LPARENT const read_arg_mean RPARENT
    (88) statement_statistics -> . MEDIANA LPARENT const read_arg_median RPARENT
    (89) statement_statistics -> . MODA LPARENT const read_arg_mode RPARENT
    (90) statement_statistics -> . VARIANZA LPARENT const read_arg_varianza RPARENT
    (91) statement_statistics -> . ESDEV LPARENT const read_arg_esdev RPARENT
    (92) statement_math -> . ORDENAZ LPARENT const read_arg_sort RPARENT
    (93) statement_math -> . ORDENZA LPARENT const read_arg_reverse RPARENT

    RBRACKET        shift and go to state 69
    VAR             shift and go to state 8
    ID              shift and go to state 81
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    READ            shift and go to state 85
    WRITE           shift and go to state 86
    RETURN          shift and go to state 87
    MEDIA           shift and go to state 88
    MEDIANA         shift and go to state 89
    MODA            shift and go to state 90
    VARIANZA        shift and go to state 91
    ESDEV           shift and go to state 92
    ORDENAZ         shift and go to state 93
    ORDENZA         shift and go to state 94

    vars                           shift and go to state 67
    statement_func                 shift and go to state 68
    statement                      shift and go to state 70
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78
    statement_statistics           shift and go to state 79
    statement_math                 shift and go to state 80

state 56

    (63) const -> ID . const_id
    (98) const_id -> .

    RSQUARE         reduce using rule 98 (const_id -> .)
    RPARENT         reduce using rule 98 (const_id -> .)
    DO              reduce using rule 98 (const_id -> .)
    TIMES           reduce using rule 98 (const_id -> .)
    DIVENT          reduce using rule 98 (const_id -> .)
    DIVIDE          reduce using rule 98 (const_id -> .)
    MODULE          reduce using rule 98 (const_id -> .)
    POWER           reduce using rule 98 (const_id -> .)
    PLUS            reduce using rule 98 (const_id -> .)
    MINUS           reduce using rule 98 (const_id -> .)
    LT              reduce using rule 98 (const_id -> .)
    LTE             reduce using rule 98 (const_id -> .)
    GT              reduce using rule 98 (const_id -> .)
    GTE             reduce using rule 98 (const_id -> .)
    SIM             reduce using rule 98 (const_id -> .)
    NE              reduce using rule 98 (const_id -> .)
    OR              reduce using rule 98 (const_id -> .)
    AND             reduce using rule 98 (const_id -> .)
    COMMA           reduce using rule 98 (const_id -> .)
    SEMI            reduce using rule 98 (const_id -> .)
    TO              reduce using rule 98 (const_id -> .)

    const_id                       shift and go to state 95

state 57

    (12) vars_array -> ID vars_name vars_type LSQUARE const . RSQUARE add_memory

    RSQUARE         shift and go to state 96


state 58

    (59) const -> LPARENT . fondo_virtual expression RPARENT pop_fondo_virtual
    (111) fondo_virtual -> .

    ID              reduce using rule 111 (fondo_virtual -> .)
    LPARENT         reduce using rule 111 (fondo_virtual -> .)
    INTEGERCTE      reduce using rule 111 (fondo_virtual -> .)
    FLOATCTE        reduce using rule 111 (fondo_virtual -> .)
    CHARCTE         reduce using rule 111 (fondo_virtual -> .)

    fondo_virtual                  shift and go to state 97

state 59

    (60) const -> INTEGERCTE . const_int
    (99) const_int -> .

    RSQUARE         reduce using rule 99 (const_int -> .)
    TIMES           reduce using rule 99 (const_int -> .)
    DIVENT          reduce using rule 99 (const_int -> .)
    DIVIDE          reduce using rule 99 (const_int -> .)
    MODULE          reduce using rule 99 (const_int -> .)
    POWER           reduce using rule 99 (const_int -> .)
    PLUS            reduce using rule 99 (const_int -> .)
    MINUS           reduce using rule 99 (const_int -> .)
    LT              reduce using rule 99 (const_int -> .)
    LTE             reduce using rule 99 (const_int -> .)
    GT              reduce using rule 99 (const_int -> .)
    GTE             reduce using rule 99 (const_int -> .)
    SIM             reduce using rule 99 (const_int -> .)
    NE              reduce using rule 99 (const_int -> .)
    OR              reduce using rule 99 (const_int -> .)
    AND             reduce using rule 99 (const_int -> .)
    RPARENT         reduce using rule 99 (const_int -> .)
    COMMA           reduce using rule 99 (const_int -> .)
    SEMI            reduce using rule 99 (const_int -> .)
    TO              reduce using rule 99 (const_int -> .)
    DO              reduce using rule 99 (const_int -> .)

    const_int                      shift and go to state 98

state 60

    (61) const -> FLOATCTE . const_float
    (100) const_float -> .

    RSQUARE         reduce using rule 100 (const_float -> .)
    TIMES           reduce using rule 100 (const_float -> .)
    DIVENT          reduce using rule 100 (const_float -> .)
    DIVIDE          reduce using rule 100 (const_float -> .)
    MODULE          reduce using rule 100 (const_float -> .)
    POWER           reduce using rule 100 (const_float -> .)
    PLUS            reduce using rule 100 (const_float -> .)
    MINUS           reduce using rule 100 (const_float -> .)
    LT              reduce using rule 100 (const_float -> .)
    LTE             reduce using rule 100 (const_float -> .)
    GT              reduce using rule 100 (const_float -> .)
    GTE             reduce using rule 100 (const_float -> .)
    SIM             reduce using rule 100 (const_float -> .)
    NE              reduce using rule 100 (const_float -> .)
    OR              reduce using rule 100 (const_float -> .)
    AND             reduce using rule 100 (const_float -> .)
    RPARENT         reduce using rule 100 (const_float -> .)
    COMMA           reduce using rule 100 (const_float -> .)
    SEMI            reduce using rule 100 (const_float -> .)
    TO              reduce using rule 100 (const_float -> .)
    DO              reduce using rule 100 (const_float -> .)

    const_float                    shift and go to state 99

state 61

    (62) const -> CHARCTE . const_char
    (101) const_char -> .

    RSQUARE         reduce using rule 101 (const_char -> .)
    TIMES           reduce using rule 101 (const_char -> .)
    DIVENT          reduce using rule 101 (const_char -> .)
    DIVIDE          reduce using rule 101 (const_char -> .)
    MODULE          reduce using rule 101 (const_char -> .)
    POWER           reduce using rule 101 (const_char -> .)
    PLUS            reduce using rule 101 (const_char -> .)
    MINUS           reduce using rule 101 (const_char -> .)
    LT              reduce using rule 101 (const_char -> .)
    LTE             reduce using rule 101 (const_char -> .)
    GT              reduce using rule 101 (const_char -> .)
    GTE             reduce using rule 101 (const_char -> .)
    SIM             reduce using rule 101 (const_char -> .)
    NE              reduce using rule 101 (const_char -> .)
    OR              reduce using rule 101 (const_char -> .)
    AND             reduce using rule 101 (const_char -> .)
    RPARENT         reduce using rule 101 (const_char -> .)
    COMMA           reduce using rule 101 (const_char -> .)
    SEMI            reduce using rule 101 (const_char -> .)
    TO              reduce using rule 101 (const_char -> .)
    DO              reduce using rule 101 (const_char -> .)

    const_char                     shift and go to state 100

state 62

    (64) funcion -> FUNCION VOID loType ID function_name parametro rev_quad . function_all fin_funcion funcion
    (66) funcion -> FUNCION VOID loType ID function_name parametro rev_quad . function_all fin_funcion
    (18) function_all -> . LBRACKET vars statement_func RBRACKET
    (19) function_all -> . LBRACKET vars RBRACKET
    (20) function_all -> . LBRACKET statement_func RBRACKET
    (21) function_all -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 55

    function_all                   shift and go to state 101

state 63

    (65) funcion -> FUNCION memType ID function_name parametro rev_quad function_all . fin_funcion funcion
    (67) funcion -> FUNCION memType ID function_name parametro rev_quad function_all . fin_funcion
    (117) fin_funcion -> .

    FUNCION         reduce using rule 117 (fin_funcion -> .)
    MAIN            reduce using rule 117 (fin_funcion -> .)

    fin_funcion                    shift and go to state 102

state 64

    (68) parametro -> LPARENT func_vars RPARENT .

    LBRACKET        reduce using rule 68 (parametro -> LPARENT func_vars RPARENT .)


state 65

    (13) func_vars -> memType ID . vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> memType ID . vars_name vars_type param_type
    (95) vars_name -> .

    COMMA           reduce using rule 95 (vars_name -> .)
    RPARENT         reduce using rule 95 (vars_name -> .)

    vars_name                      shift and go to state 103

state 66

    (5) main -> MAIN function_name verifica_name LPARENT RPARENT function_all end_main .

    $end            reduce using rule 5 (main -> MAIN function_name verifica_name LPARENT RPARENT function_all end_main .)


state 67

    (18) function_all -> LBRACKET vars . statement_func RBRACKET
    (19) function_all -> LBRACKET vars . RBRACKET
    (6) vars -> vars . list_vars SEMI
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (8) list_vars -> . list_vars COMMA vars_array
    (9) list_vars -> . list_vars COMMA ID vars_name vars_type
    (10) list_vars -> . memType vars_array
    (11) list_vars -> . memType ID vars_name vars_type
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (34) statement -> . statement_statistics SEMI
    (35) statement -> . statement_math SEMI
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType
    (36) statement_assign -> . ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (37) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (70) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (71) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (74) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (75) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (76) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (77) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (78) statement_read -> . READ LPARENT read_1 RPARENT
    (81) statement_write -> . WRITE LPARENT write_1 RPARENT
    (86) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple
    (87) statement_statistics -> . MEDIA LPARENT const read_arg_mean RPARENT
    (88) statement_statistics -> . MEDIANA LPARENT const read_arg_median RPARENT
    (89) statement_statistics -> . MODA LPARENT const read_arg_mode RPARENT
    (90) statement_statistics -> . VARIANZA LPARENT const read_arg_varianza RPARENT
    (91) statement_statistics -> . ESDEV LPARENT const read_arg_esdev RPARENT
    (92) statement_math -> . ORDENAZ LPARENT const read_arg_sort RPARENT
    (93) statement_math -> . ORDENZA LPARENT const read_arg_reverse RPARENT

    RBRACKET        shift and go to state 105
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    ID              shift and go to state 81
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    READ            shift and go to state 85
    WRITE           shift and go to state 86
    RETURN          shift and go to state 87
    MEDIA           shift and go to state 88
    MEDIANA         shift and go to state 89
    MODA            shift and go to state 90
    VARIANZA        shift and go to state 91
    ESDEV           shift and go to state 92
    ORDENAZ         shift and go to state 93
    ORDENZA         shift and go to state 94

    statement_func                 shift and go to state 104
    list_vars                      shift and go to state 13
    statement                      shift and go to state 70
    memType                        shift and go to state 14
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78
    statement_statistics           shift and go to state 79
    statement_math                 shift and go to state 80

state 68

    (20) function_all -> LBRACKET statement_func . RBRACKET

    RBRACKET        shift and go to state 106


state 69

    (21) function_all -> LBRACKET RBRACKET .

    $end            reduce using rule 21 (function_all -> LBRACKET RBRACKET .)
    FUNCION         reduce using rule 21 (function_all -> LBRACKET RBRACKET .)
    MAIN            reduce using rule 21 (function_all -> LBRACKET RBRACKET .)


state 70

    (24) statement_func -> statement . statement_func
    (25) statement_func -> statement .
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (34) statement -> . statement_statistics SEMI
    (35) statement -> . statement_math SEMI
    (36) statement_assign -> . ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (37) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (70) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (71) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (74) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (75) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (76) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (77) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (78) statement_read -> . READ LPARENT read_1 RPARENT
    (81) statement_write -> . WRITE LPARENT write_1 RPARENT
    (86) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple
    (87) statement_statistics -> . MEDIA LPARENT const read_arg_mean RPARENT
    (88) statement_statistics -> . MEDIANA LPARENT const read_arg_median RPARENT
    (89) statement_statistics -> . MODA LPARENT const read_arg_mode RPARENT
    (90) statement_statistics -> . VARIANZA LPARENT const read_arg_varianza RPARENT
    (91) statement_statistics -> . ESDEV LPARENT const read_arg_esdev RPARENT
    (92) statement_math -> . ORDENAZ LPARENT const read_arg_sort RPARENT
    (93) statement_math -> . ORDENZA LPARENT const read_arg_reverse RPARENT

    RBRACKET        reduce using rule 25 (statement_func -> statement .)
    ID              shift and go to state 81
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    READ            shift and go to state 85
    WRITE           shift and go to state 86
    RETURN          shift and go to state 87
    MEDIA           shift and go to state 88
    MEDIANA         shift and go to state 89
    MODA            shift and go to state 90
    VARIANZA        shift and go to state 91
    ESDEV           shift and go to state 92
    ORDENAZ         shift and go to state 93
    ORDENZA         shift and go to state 94

    statement                      shift and go to state 70
    statement_func                 shift and go to state 107
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78
    statement_statistics           shift and go to state 79
    statement_math                 shift and go to state 80

state 71

    (26) statement -> statement_assign . SEMI

    SEMI            shift and go to state 108


state 72

    (27) statement -> statement_function . SEMI

    SEMI            shift and go to state 109


state 73

    (28) statement -> statement_condition .

    ID              reduce using rule 28 (statement -> statement_condition .)
    IF              reduce using rule 28 (statement -> statement_condition .)
    WHILE           reduce using rule 28 (statement -> statement_condition .)
    FOR             reduce using rule 28 (statement -> statement_condition .)
    READ            reduce using rule 28 (statement -> statement_condition .)
    WRITE           reduce using rule 28 (statement -> statement_condition .)
    RETURN          reduce using rule 28 (statement -> statement_condition .)
    MEDIA           reduce using rule 28 (statement -> statement_condition .)
    MEDIANA         reduce using rule 28 (statement -> statement_condition .)
    MODA            reduce using rule 28 (statement -> statement_condition .)
    VARIANZA        reduce using rule 28 (statement -> statement_condition .)
    ESDEV           reduce using rule 28 (statement -> statement_condition .)
    ORDENAZ         reduce using rule 28 (statement -> statement_condition .)
    ORDENZA         reduce using rule 28 (statement -> statement_condition .)
    RBRACKET        reduce using rule 28 (statement -> statement_condition .)


state 74

    (29) statement -> statement_while .

    ID              reduce using rule 29 (statement -> statement_while .)
    IF              reduce using rule 29 (statement -> statement_while .)
    WHILE           reduce using rule 29 (statement -> statement_while .)
    FOR             reduce using rule 29 (statement -> statement_while .)
    READ            reduce using rule 29 (statement -> statement_while .)
    WRITE           reduce using rule 29 (statement -> statement_while .)
    RETURN          reduce using rule 29 (statement -> statement_while .)
    MEDIA           reduce using rule 29 (statement -> statement_while .)
    MEDIANA         reduce using rule 29 (statement -> statement_while .)
    MODA            reduce using rule 29 (statement -> statement_while .)
    VARIANZA        reduce using rule 29 (statement -> statement_while .)
    ESDEV           reduce using rule 29 (statement -> statement_while .)
    ORDENAZ         reduce using rule 29 (statement -> statement_while .)
    ORDENZA         reduce using rule 29 (statement -> statement_while .)
    RBRACKET        reduce using rule 29 (statement -> statement_while .)


state 75

    (30) statement -> statement_for .

    ID              reduce using rule 30 (statement -> statement_for .)
    IF              reduce using rule 30 (statement -> statement_for .)
    WHILE           reduce using rule 30 (statement -> statement_for .)
    FOR             reduce using rule 30 (statement -> statement_for .)
    READ            reduce using rule 30 (statement -> statement_for .)
    WRITE           reduce using rule 30 (statement -> statement_for .)
    RETURN          reduce using rule 30 (statement -> statement_for .)
    MEDIA           reduce using rule 30 (statement -> statement_for .)
    MEDIANA         reduce using rule 30 (statement -> statement_for .)
    MODA            reduce using rule 30 (statement -> statement_for .)
    VARIANZA        reduce using rule 30 (statement -> statement_for .)
    ESDEV           reduce using rule 30 (statement -> statement_for .)
    ORDENAZ         reduce using rule 30 (statement -> statement_for .)
    ORDENZA         reduce using rule 30 (statement -> statement_for .)
    RBRACKET        reduce using rule 30 (statement -> statement_for .)


state 76

    (31) statement -> statement_read . SEMI

    SEMI            shift and go to state 110


state 77

    (32) statement -> statement_write . SEMI

    SEMI            shift and go to state 111


state 78

    (33) statement -> statement_return . SEMI

    SEMI            shift and go to state 112


state 79

    (34) statement -> statement_statistics . SEMI

    SEMI            shift and go to state 113


state 80

    (35) statement -> statement_math . SEMI

    SEMI            shift and go to state 114


state 81

    (36) statement_assign -> ID . const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (37) statement_assign -> ID . const_id EQ opera_add expression add_tabla
    (70) statement_function -> ID . existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (71) statement_function -> ID . existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (98) const_id -> .
    (118) existe_funcion -> .

    LSQUARE         reduce using rule 98 (const_id -> .)
    EQ              reduce using rule 98 (const_id -> .)
    LPARENT         reduce using rule 118 (existe_funcion -> .)

    const_id                       shift and go to state 115
    existe_funcion                 shift and go to state 116

state 82

    (74) statement_condition -> IF . LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (75) statement_condition -> IF . LPARENT expression RPARENT THEN revisar_expression bloque condition_end

    LPARENT         shift and go to state 117


state 83

    (76) statement_while -> WHILE . opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (127) opera_while -> .

    LPARENT         reduce using rule 127 (opera_while -> .)

    opera_while                    shift and go to state 118

state 84

    (77) statement_for -> FOR . opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (130) opera_for -> .

    ID              reduce using rule 130 (opera_for -> .)

    opera_for                      shift and go to state 119

state 85

    (78) statement_read -> READ . LPARENT read_1 RPARENT

    LPARENT         shift and go to state 120


state 86

    (81) statement_write -> WRITE . LPARENT write_1 RPARENT

    LPARENT         shift and go to state 121


state 87

    (86) statement_return -> RETURN . return_function LPARENT expression RPARENT return_save_quadruple
    (144) return_function -> .

    LPARENT         reduce using rule 144 (return_function -> .)

    return_function                shift and go to state 122

state 88

    (87) statement_statistics -> MEDIA . LPARENT const read_arg_mean RPARENT

    LPARENT         shift and go to state 123


state 89

    (88) statement_statistics -> MEDIANA . LPARENT const read_arg_median RPARENT

    LPARENT         shift and go to state 124


state 90

    (89) statement_statistics -> MODA . LPARENT const read_arg_mode RPARENT

    LPARENT         shift and go to state 125


state 91

    (90) statement_statistics -> VARIANZA . LPARENT const read_arg_varianza RPARENT

    LPARENT         shift and go to state 126


state 92

    (91) statement_statistics -> ESDEV . LPARENT const read_arg_esdev RPARENT

    LPARENT         shift and go to state 127


state 93

    (92) statement_math -> ORDENAZ . LPARENT const read_arg_sort RPARENT

    LPARENT         shift and go to state 128


state 94

    (93) statement_math -> ORDENZA . LPARENT const read_arg_reverse RPARENT

    LPARENT         shift and go to state 129


state 95

    (63) const -> ID const_id .

    RSQUARE         reduce using rule 63 (const -> ID const_id .)
    RPARENT         reduce using rule 63 (const -> ID const_id .)
    DO              reduce using rule 63 (const -> ID const_id .)
    TIMES           reduce using rule 63 (const -> ID const_id .)
    DIVENT          reduce using rule 63 (const -> ID const_id .)
    DIVIDE          reduce using rule 63 (const -> ID const_id .)
    MODULE          reduce using rule 63 (const -> ID const_id .)
    POWER           reduce using rule 63 (const -> ID const_id .)
    PLUS            reduce using rule 63 (const -> ID const_id .)
    MINUS           reduce using rule 63 (const -> ID const_id .)
    LT              reduce using rule 63 (const -> ID const_id .)
    LTE             reduce using rule 63 (const -> ID const_id .)
    GT              reduce using rule 63 (const -> ID const_id .)
    GTE             reduce using rule 63 (const -> ID const_id .)
    SIM             reduce using rule 63 (const -> ID const_id .)
    NE              reduce using rule 63 (const -> ID const_id .)
    OR              reduce using rule 63 (const -> ID const_id .)
    AND             reduce using rule 63 (const -> ID const_id .)
    COMMA           reduce using rule 63 (const -> ID const_id .)
    SEMI            reduce using rule 63 (const -> ID const_id .)
    TO              reduce using rule 63 (const -> ID const_id .)


state 96

    (12) vars_array -> ID vars_name vars_type LSQUARE const RSQUARE . add_memory
    (97) add_memory -> .

    SEMI            reduce using rule 97 (add_memory -> .)
    COMMA           reduce using rule 97 (add_memory -> .)

    add_memory                     shift and go to state 130

state 97

    (59) const -> LPARENT fondo_virtual . expression RPARENT pop_fondo_virtual
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 131
    const                          shift and go to state 133
    expr                           shift and go to state 134
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 98

    (60) const -> INTEGERCTE const_int .

    RSQUARE         reduce using rule 60 (const -> INTEGERCTE const_int .)
    TIMES           reduce using rule 60 (const -> INTEGERCTE const_int .)
    DIVENT          reduce using rule 60 (const -> INTEGERCTE const_int .)
    DIVIDE          reduce using rule 60 (const -> INTEGERCTE const_int .)
    MODULE          reduce using rule 60 (const -> INTEGERCTE const_int .)
    POWER           reduce using rule 60 (const -> INTEGERCTE const_int .)
    PLUS            reduce using rule 60 (const -> INTEGERCTE const_int .)
    MINUS           reduce using rule 60 (const -> INTEGERCTE const_int .)
    LT              reduce using rule 60 (const -> INTEGERCTE const_int .)
    LTE             reduce using rule 60 (const -> INTEGERCTE const_int .)
    GT              reduce using rule 60 (const -> INTEGERCTE const_int .)
    GTE             reduce using rule 60 (const -> INTEGERCTE const_int .)
    SIM             reduce using rule 60 (const -> INTEGERCTE const_int .)
    NE              reduce using rule 60 (const -> INTEGERCTE const_int .)
    OR              reduce using rule 60 (const -> INTEGERCTE const_int .)
    AND             reduce using rule 60 (const -> INTEGERCTE const_int .)
    RPARENT         reduce using rule 60 (const -> INTEGERCTE const_int .)
    COMMA           reduce using rule 60 (const -> INTEGERCTE const_int .)
    SEMI            reduce using rule 60 (const -> INTEGERCTE const_int .)
    TO              reduce using rule 60 (const -> INTEGERCTE const_int .)
    DO              reduce using rule 60 (const -> INTEGERCTE const_int .)


state 99

    (61) const -> FLOATCTE const_float .

    RSQUARE         reduce using rule 61 (const -> FLOATCTE const_float .)
    TIMES           reduce using rule 61 (const -> FLOATCTE const_float .)
    DIVENT          reduce using rule 61 (const -> FLOATCTE const_float .)
    DIVIDE          reduce using rule 61 (const -> FLOATCTE const_float .)
    MODULE          reduce using rule 61 (const -> FLOATCTE const_float .)
    POWER           reduce using rule 61 (const -> FLOATCTE const_float .)
    PLUS            reduce using rule 61 (const -> FLOATCTE const_float .)
    MINUS           reduce using rule 61 (const -> FLOATCTE const_float .)
    LT              reduce using rule 61 (const -> FLOATCTE const_float .)
    LTE             reduce using rule 61 (const -> FLOATCTE const_float .)
    GT              reduce using rule 61 (const -> FLOATCTE const_float .)
    GTE             reduce using rule 61 (const -> FLOATCTE const_float .)
    SIM             reduce using rule 61 (const -> FLOATCTE const_float .)
    NE              reduce using rule 61 (const -> FLOATCTE const_float .)
    OR              reduce using rule 61 (const -> FLOATCTE const_float .)
    AND             reduce using rule 61 (const -> FLOATCTE const_float .)
    RPARENT         reduce using rule 61 (const -> FLOATCTE const_float .)
    COMMA           reduce using rule 61 (const -> FLOATCTE const_float .)
    SEMI            reduce using rule 61 (const -> FLOATCTE const_float .)
    TO              reduce using rule 61 (const -> FLOATCTE const_float .)
    DO              reduce using rule 61 (const -> FLOATCTE const_float .)


state 100

    (62) const -> CHARCTE const_char .

    RSQUARE         reduce using rule 62 (const -> CHARCTE const_char .)
    TIMES           reduce using rule 62 (const -> CHARCTE const_char .)
    DIVENT          reduce using rule 62 (const -> CHARCTE const_char .)
    DIVIDE          reduce using rule 62 (const -> CHARCTE const_char .)
    MODULE          reduce using rule 62 (const -> CHARCTE const_char .)
    POWER           reduce using rule 62 (const -> CHARCTE const_char .)
    PLUS            reduce using rule 62 (const -> CHARCTE const_char .)
    MINUS           reduce using rule 62 (const -> CHARCTE const_char .)
    LT              reduce using rule 62 (const -> CHARCTE const_char .)
    LTE             reduce using rule 62 (const -> CHARCTE const_char .)
    GT              reduce using rule 62 (const -> CHARCTE const_char .)
    GTE             reduce using rule 62 (const -> CHARCTE const_char .)
    SIM             reduce using rule 62 (const -> CHARCTE const_char .)
    NE              reduce using rule 62 (const -> CHARCTE const_char .)
    OR              reduce using rule 62 (const -> CHARCTE const_char .)
    AND             reduce using rule 62 (const -> CHARCTE const_char .)
    RPARENT         reduce using rule 62 (const -> CHARCTE const_char .)
    COMMA           reduce using rule 62 (const -> CHARCTE const_char .)
    SEMI            reduce using rule 62 (const -> CHARCTE const_char .)
    TO              reduce using rule 62 (const -> CHARCTE const_char .)
    DO              reduce using rule 62 (const -> CHARCTE const_char .)


state 101

    (64) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all . fin_funcion funcion
    (66) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all . fin_funcion
    (117) fin_funcion -> .

    FUNCION         reduce using rule 117 (fin_funcion -> .)
    MAIN            reduce using rule 117 (fin_funcion -> .)

    fin_funcion                    shift and go to state 138

state 102

    (65) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion . funcion
    (67) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion .
    (64) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (67) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion

    MAIN            reduce using rule 67 (funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion .)
    FUNCION         shift and go to state 9

    funcion                        shift and go to state 139

state 103

    (13) func_vars -> memType ID vars_name . vars_type param_type COMMA func_vars
    (14) func_vars -> memType ID vars_name . vars_type param_type
    (96) vars_type -> .

    COMMA           reduce using rule 96 (vars_type -> .)
    RPARENT         reduce using rule 96 (vars_type -> .)

    vars_type                      shift and go to state 140

state 104

    (18) function_all -> LBRACKET vars statement_func . RBRACKET

    RBRACKET        shift and go to state 141


state 105

    (19) function_all -> LBRACKET vars RBRACKET .

    $end            reduce using rule 19 (function_all -> LBRACKET vars RBRACKET .)
    FUNCION         reduce using rule 19 (function_all -> LBRACKET vars RBRACKET .)
    MAIN            reduce using rule 19 (function_all -> LBRACKET vars RBRACKET .)


state 106

    (20) function_all -> LBRACKET statement_func RBRACKET .

    $end            reduce using rule 20 (function_all -> LBRACKET statement_func RBRACKET .)
    FUNCION         reduce using rule 20 (function_all -> LBRACKET statement_func RBRACKET .)
    MAIN            reduce using rule 20 (function_all -> LBRACKET statement_func RBRACKET .)


state 107

    (24) statement_func -> statement statement_func .

    RBRACKET        reduce using rule 24 (statement_func -> statement statement_func .)


state 108

    (26) statement -> statement_assign SEMI .

    ID              reduce using rule 26 (statement -> statement_assign SEMI .)
    IF              reduce using rule 26 (statement -> statement_assign SEMI .)
    WHILE           reduce using rule 26 (statement -> statement_assign SEMI .)
    FOR             reduce using rule 26 (statement -> statement_assign SEMI .)
    READ            reduce using rule 26 (statement -> statement_assign SEMI .)
    WRITE           reduce using rule 26 (statement -> statement_assign SEMI .)
    RETURN          reduce using rule 26 (statement -> statement_assign SEMI .)
    MEDIA           reduce using rule 26 (statement -> statement_assign SEMI .)
    MEDIANA         reduce using rule 26 (statement -> statement_assign SEMI .)
    MODA            reduce using rule 26 (statement -> statement_assign SEMI .)
    VARIANZA        reduce using rule 26 (statement -> statement_assign SEMI .)
    ESDEV           reduce using rule 26 (statement -> statement_assign SEMI .)
    ORDENAZ         reduce using rule 26 (statement -> statement_assign SEMI .)
    ORDENZA         reduce using rule 26 (statement -> statement_assign SEMI .)
    RBRACKET        reduce using rule 26 (statement -> statement_assign SEMI .)


state 109

    (27) statement -> statement_function SEMI .

    ID              reduce using rule 27 (statement -> statement_function SEMI .)
    IF              reduce using rule 27 (statement -> statement_function SEMI .)
    WHILE           reduce using rule 27 (statement -> statement_function SEMI .)
    FOR             reduce using rule 27 (statement -> statement_function SEMI .)
    READ            reduce using rule 27 (statement -> statement_function SEMI .)
    WRITE           reduce using rule 27 (statement -> statement_function SEMI .)
    RETURN          reduce using rule 27 (statement -> statement_function SEMI .)
    MEDIA           reduce using rule 27 (statement -> statement_function SEMI .)
    MEDIANA         reduce using rule 27 (statement -> statement_function SEMI .)
    MODA            reduce using rule 27 (statement -> statement_function SEMI .)
    VARIANZA        reduce using rule 27 (statement -> statement_function SEMI .)
    ESDEV           reduce using rule 27 (statement -> statement_function SEMI .)
    ORDENAZ         reduce using rule 27 (statement -> statement_function SEMI .)
    ORDENZA         reduce using rule 27 (statement -> statement_function SEMI .)
    RBRACKET        reduce using rule 27 (statement -> statement_function SEMI .)


state 110

    (31) statement -> statement_read SEMI .

    ID              reduce using rule 31 (statement -> statement_read SEMI .)
    IF              reduce using rule 31 (statement -> statement_read SEMI .)
    WHILE           reduce using rule 31 (statement -> statement_read SEMI .)
    FOR             reduce using rule 31 (statement -> statement_read SEMI .)
    READ            reduce using rule 31 (statement -> statement_read SEMI .)
    WRITE           reduce using rule 31 (statement -> statement_read SEMI .)
    RETURN          reduce using rule 31 (statement -> statement_read SEMI .)
    MEDIA           reduce using rule 31 (statement -> statement_read SEMI .)
    MEDIANA         reduce using rule 31 (statement -> statement_read SEMI .)
    MODA            reduce using rule 31 (statement -> statement_read SEMI .)
    VARIANZA        reduce using rule 31 (statement -> statement_read SEMI .)
    ESDEV           reduce using rule 31 (statement -> statement_read SEMI .)
    ORDENAZ         reduce using rule 31 (statement -> statement_read SEMI .)
    ORDENZA         reduce using rule 31 (statement -> statement_read SEMI .)
    RBRACKET        reduce using rule 31 (statement -> statement_read SEMI .)


state 111

    (32) statement -> statement_write SEMI .

    ID              reduce using rule 32 (statement -> statement_write SEMI .)
    IF              reduce using rule 32 (statement -> statement_write SEMI .)
    WHILE           reduce using rule 32 (statement -> statement_write SEMI .)
    FOR             reduce using rule 32 (statement -> statement_write SEMI .)
    READ            reduce using rule 32 (statement -> statement_write SEMI .)
    WRITE           reduce using rule 32 (statement -> statement_write SEMI .)
    RETURN          reduce using rule 32 (statement -> statement_write SEMI .)
    MEDIA           reduce using rule 32 (statement -> statement_write SEMI .)
    MEDIANA         reduce using rule 32 (statement -> statement_write SEMI .)
    MODA            reduce using rule 32 (statement -> statement_write SEMI .)
    VARIANZA        reduce using rule 32 (statement -> statement_write SEMI .)
    ESDEV           reduce using rule 32 (statement -> statement_write SEMI .)
    ORDENAZ         reduce using rule 32 (statement -> statement_write SEMI .)
    ORDENZA         reduce using rule 32 (statement -> statement_write SEMI .)
    RBRACKET        reduce using rule 32 (statement -> statement_write SEMI .)


state 112

    (33) statement -> statement_return SEMI .

    ID              reduce using rule 33 (statement -> statement_return SEMI .)
    IF              reduce using rule 33 (statement -> statement_return SEMI .)
    WHILE           reduce using rule 33 (statement -> statement_return SEMI .)
    FOR             reduce using rule 33 (statement -> statement_return SEMI .)
    READ            reduce using rule 33 (statement -> statement_return SEMI .)
    WRITE           reduce using rule 33 (statement -> statement_return SEMI .)
    RETURN          reduce using rule 33 (statement -> statement_return SEMI .)
    MEDIA           reduce using rule 33 (statement -> statement_return SEMI .)
    MEDIANA         reduce using rule 33 (statement -> statement_return SEMI .)
    MODA            reduce using rule 33 (statement -> statement_return SEMI .)
    VARIANZA        reduce using rule 33 (statement -> statement_return SEMI .)
    ESDEV           reduce using rule 33 (statement -> statement_return SEMI .)
    ORDENAZ         reduce using rule 33 (statement -> statement_return SEMI .)
    ORDENZA         reduce using rule 33 (statement -> statement_return SEMI .)
    RBRACKET        reduce using rule 33 (statement -> statement_return SEMI .)


state 113

    (34) statement -> statement_statistics SEMI .

    ID              reduce using rule 34 (statement -> statement_statistics SEMI .)
    IF              reduce using rule 34 (statement -> statement_statistics SEMI .)
    WHILE           reduce using rule 34 (statement -> statement_statistics SEMI .)
    FOR             reduce using rule 34 (statement -> statement_statistics SEMI .)
    READ            reduce using rule 34 (statement -> statement_statistics SEMI .)
    WRITE           reduce using rule 34 (statement -> statement_statistics SEMI .)
    RETURN          reduce using rule 34 (statement -> statement_statistics SEMI .)
    MEDIA           reduce using rule 34 (statement -> statement_statistics SEMI .)
    MEDIANA         reduce using rule 34 (statement -> statement_statistics SEMI .)
    MODA            reduce using rule 34 (statement -> statement_statistics SEMI .)
    VARIANZA        reduce using rule 34 (statement -> statement_statistics SEMI .)
    ESDEV           reduce using rule 34 (statement -> statement_statistics SEMI .)
    ORDENAZ         reduce using rule 34 (statement -> statement_statistics SEMI .)
    ORDENZA         reduce using rule 34 (statement -> statement_statistics SEMI .)
    RBRACKET        reduce using rule 34 (statement -> statement_statistics SEMI .)


state 114

    (35) statement -> statement_math SEMI .

    ID              reduce using rule 35 (statement -> statement_math SEMI .)
    IF              reduce using rule 35 (statement -> statement_math SEMI .)
    WHILE           reduce using rule 35 (statement -> statement_math SEMI .)
    FOR             reduce using rule 35 (statement -> statement_math SEMI .)
    READ            reduce using rule 35 (statement -> statement_math SEMI .)
    WRITE           reduce using rule 35 (statement -> statement_math SEMI .)
    RETURN          reduce using rule 35 (statement -> statement_math SEMI .)
    MEDIA           reduce using rule 35 (statement -> statement_math SEMI .)
    MEDIANA         reduce using rule 35 (statement -> statement_math SEMI .)
    MODA            reduce using rule 35 (statement -> statement_math SEMI .)
    VARIANZA        reduce using rule 35 (statement -> statement_math SEMI .)
    ESDEV           reduce using rule 35 (statement -> statement_math SEMI .)
    ORDENAZ         reduce using rule 35 (statement -> statement_math SEMI .)
    ORDENZA         reduce using rule 35 (statement -> statement_math SEMI .)
    RBRACKET        reduce using rule 35 (statement -> statement_math SEMI .)


state 115

    (36) statement_assign -> ID const_id . LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (37) statement_assign -> ID const_id . EQ opera_add expression add_tabla

    LSQUARE         shift and go to state 142
    EQ              shift and go to state 143


state 116

    (70) statement_function -> ID existe_funcion . crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (71) statement_function -> ID existe_funcion . crea_funcion LPARENT RPARENT crea_subfuncion
    (119) crea_funcion -> .

    LPARENT         reduce using rule 119 (crea_funcion -> .)

    crea_funcion                   shift and go to state 144

state 117

    (74) statement_condition -> IF LPARENT . expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (75) statement_condition -> IF LPARENT . expression RPARENT THEN revisar_expression bloque condition_end
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 145
    const                          shift and go to state 133
    expr                           shift and go to state 134
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 118

    (76) statement_while -> WHILE opera_while . LPARENT expression RPARENT condicion_while DO bloque loop_while

    LPARENT         shift and go to state 146


state 119

    (77) statement_for -> FOR opera_for . statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (36) statement_assign -> . ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (37) statement_assign -> . ID const_id EQ opera_add expression add_tabla

    ID              shift and go to state 148

    statement_assign               shift and go to state 147

state 120

    (78) statement_read -> READ LPARENT . read_1 RPARENT
    (79) read_1 -> . ID read_instr read_1
    (80) read_1 -> . ID read_instr

    ID              shift and go to state 150

    read_1                         shift and go to state 149

state 121

    (81) statement_write -> WRITE LPARENT . write_1 RPARENT
    (82) write_1 -> . expression write_instr COMMA write_1
    (83) write_1 -> . STRINGCTE const_str write_instr COMMA write_1
    (84) write_1 -> . expression write_instr
    (85) write_1 -> . STRINGCTE const_str write_instr
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    STRINGCTE       shift and go to state 153
    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    write_1                        shift and go to state 151
    expression                     shift and go to state 152
    const                          shift and go to state 133
    expr                           shift and go to state 134
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 122

    (86) statement_return -> RETURN return_function . LPARENT expression RPARENT return_save_quadruple

    LPARENT         shift and go to state 154


state 123

    (87) statement_statistics -> MEDIA LPARENT . const read_arg_mean RPARENT
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 155

state 124

    (88) statement_statistics -> MEDIANA LPARENT . const read_arg_median RPARENT
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 156

state 125

    (89) statement_statistics -> MODA LPARENT . const read_arg_mode RPARENT
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 157

state 126

    (90) statement_statistics -> VARIANZA LPARENT . const read_arg_varianza RPARENT
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 158

state 127

    (91) statement_statistics -> ESDEV LPARENT . const read_arg_esdev RPARENT
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 159

state 128

    (92) statement_math -> ORDENAZ LPARENT . const read_arg_sort RPARENT
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 160

state 129

    (93) statement_math -> ORDENZA LPARENT . const read_arg_reverse RPARENT
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 161

state 130

    (12) vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory .

    SEMI            reduce using rule 12 (vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory .)
    COMMA           reduce using rule 12 (vars_array -> ID vars_name vars_type LSQUARE const RSQUARE add_memory .)


state 131

    (59) const -> LPARENT fondo_virtual expression . RPARENT pop_fondo_virtual

    RPARENT         shift and go to state 162


state 132

    (38) expression -> ID . const_id LSQUARE const save_var RSQUARE
    (63) const -> ID . const_id
    (98) const_id -> .

    LSQUARE         reduce using rule 98 (const_id -> .)
    TIMES           reduce using rule 98 (const_id -> .)
    DIVENT          reduce using rule 98 (const_id -> .)
    DIVIDE          reduce using rule 98 (const_id -> .)
    MODULE          reduce using rule 98 (const_id -> .)
    POWER           reduce using rule 98 (const_id -> .)
    PLUS            reduce using rule 98 (const_id -> .)
    MINUS           reduce using rule 98 (const_id -> .)
    LT              reduce using rule 98 (const_id -> .)
    LTE             reduce using rule 98 (const_id -> .)
    GT              reduce using rule 98 (const_id -> .)
    GTE             reduce using rule 98 (const_id -> .)
    SIM             reduce using rule 98 (const_id -> .)
    NE              reduce using rule 98 (const_id -> .)
    OR              reduce using rule 98 (const_id -> .)
    AND             reduce using rule 98 (const_id -> .)
    RPARENT         reduce using rule 98 (const_id -> .)
    COMMA           reduce using rule 98 (const_id -> .)
    SEMI            reduce using rule 98 (const_id -> .)
    TO              reduce using rule 98 (const_id -> .)

    const_id                       shift and go to state 163

state 133

    (53) expr_muldiv -> const . term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> const . term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> const . term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> const . term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> const . term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> const . term_muldiv
    (107) term_muldiv -> .

    TIMES           reduce using rule 107 (term_muldiv -> .)
    DIVENT          reduce using rule 107 (term_muldiv -> .)
    DIVIDE          reduce using rule 107 (term_muldiv -> .)
    MODULE          reduce using rule 107 (term_muldiv -> .)
    POWER           reduce using rule 107 (term_muldiv -> .)
    PLUS            reduce using rule 107 (term_muldiv -> .)
    MINUS           reduce using rule 107 (term_muldiv -> .)
    LT              reduce using rule 107 (term_muldiv -> .)
    LTE             reduce using rule 107 (term_muldiv -> .)
    GT              reduce using rule 107 (term_muldiv -> .)
    GTE             reduce using rule 107 (term_muldiv -> .)
    SIM             reduce using rule 107 (term_muldiv -> .)
    NE              reduce using rule 107 (term_muldiv -> .)
    OR              reduce using rule 107 (term_muldiv -> .)
    AND             reduce using rule 107 (term_muldiv -> .)
    RPARENT         reduce using rule 107 (term_muldiv -> .)
    COMMA           reduce using rule 107 (term_muldiv -> .)
    SEMI            reduce using rule 107 (term_muldiv -> .)
    TO              reduce using rule 107 (term_muldiv -> .)

    term_muldiv                    shift and go to state 164

state 134

    (39) expression -> expr . oper_y AND opera_add expression
    (40) expression -> expr . oper_y
    (110) oper_y -> .

    AND             reduce using rule 110 (oper_y -> .)
    RPARENT         reduce using rule 110 (oper_y -> .)
    COMMA           reduce using rule 110 (oper_y -> .)
    SEMI            reduce using rule 110 (oper_y -> .)
    TO              reduce using rule 110 (oper_y -> .)

    oper_y                         shift and go to state 165

state 135

    (41) expr -> expr_aux . oper_o OR opera_add expr
    (42) expr -> expr_aux . oper_o
    (109) oper_o -> .

    OR              reduce using rule 109 (oper_o -> .)
    AND             reduce using rule 109 (oper_o -> .)
    RPARENT         reduce using rule 109 (oper_o -> .)
    COMMA           reduce using rule 109 (oper_o -> .)
    SEMI            reduce using rule 109 (oper_o -> .)
    TO              reduce using rule 109 (oper_o -> .)

    oper_o                         shift and go to state 166

state 136

    (43) expr_aux -> expr_sumres . expr_rel LT opera_add expr_aux
    (44) expr_aux -> expr_sumres . expr_rel LTE opera_add expr_aux
    (45) expr_aux -> expr_sumres . expr_rel GT opera_add expr_aux
    (46) expr_aux -> expr_sumres . expr_rel GTE opera_add expr_aux
    (47) expr_aux -> expr_sumres . expr_rel SIM opera_add expr_aux
    (48) expr_aux -> expr_sumres . expr_rel NE opera_add expr_aux
    (49) expr_aux -> expr_sumres . expr_rel
    (108) expr_rel -> .

    LT              reduce using rule 108 (expr_rel -> .)
    LTE             reduce using rule 108 (expr_rel -> .)
    GT              reduce using rule 108 (expr_rel -> .)
    GTE             reduce using rule 108 (expr_rel -> .)
    SIM             reduce using rule 108 (expr_rel -> .)
    NE              reduce using rule 108 (expr_rel -> .)
    OR              reduce using rule 108 (expr_rel -> .)
    AND             reduce using rule 108 (expr_rel -> .)
    RPARENT         reduce using rule 108 (expr_rel -> .)
    COMMA           reduce using rule 108 (expr_rel -> .)
    SEMI            reduce using rule 108 (expr_rel -> .)
    TO              reduce using rule 108 (expr_rel -> .)

    expr_rel                       shift and go to state 167

state 137

    (50) expr_sumres -> expr_muldiv . term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> expr_muldiv . term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> expr_muldiv . term_sumres
    (106) term_sumres -> .

    PLUS            reduce using rule 106 (term_sumres -> .)
    MINUS           reduce using rule 106 (term_sumres -> .)
    LT              reduce using rule 106 (term_sumres -> .)
    LTE             reduce using rule 106 (term_sumres -> .)
    GT              reduce using rule 106 (term_sumres -> .)
    GTE             reduce using rule 106 (term_sumres -> .)
    SIM             reduce using rule 106 (term_sumres -> .)
    NE              reduce using rule 106 (term_sumres -> .)
    OR              reduce using rule 106 (term_sumres -> .)
    AND             reduce using rule 106 (term_sumres -> .)
    RPARENT         reduce using rule 106 (term_sumres -> .)
    COMMA           reduce using rule 106 (term_sumres -> .)
    SEMI            reduce using rule 106 (term_sumres -> .)
    TO              reduce using rule 106 (term_sumres -> .)

    term_sumres                    shift and go to state 168

state 138

    (64) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion . funcion
    (66) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion .
    (64) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion
    (65) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion
    (66) funcion -> . FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion
    (67) funcion -> . FUNCION memType ID function_name parametro rev_quad function_all fin_funcion

    MAIN            reduce using rule 66 (funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion .)
    FUNCION         shift and go to state 9

    funcion                        shift and go to state 169

state 139

    (65) funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion .

    MAIN            reduce using rule 65 (funcion -> FUNCION memType ID function_name parametro rev_quad function_all fin_funcion funcion .)


state 140

    (13) func_vars -> memType ID vars_name vars_type . param_type COMMA func_vars
    (14) func_vars -> memType ID vars_name vars_type . param_type
    (114) param_type -> .

    COMMA           reduce using rule 114 (param_type -> .)
    RPARENT         reduce using rule 114 (param_type -> .)

    param_type                     shift and go to state 170

state 141

    (18) function_all -> LBRACKET vars statement_func RBRACKET .

    $end            reduce using rule 18 (function_all -> LBRACKET vars statement_func RBRACKET .)
    FUNCION         reduce using rule 18 (function_all -> LBRACKET vars statement_func RBRACKET .)
    MAIN            reduce using rule 18 (function_all -> LBRACKET vars statement_func RBRACKET .)


state 142

    (36) statement_assign -> ID const_id LSQUARE . const save_var RSQUARE EQ opera_add expression add_tabla
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 171

state 143

    (37) statement_assign -> ID const_id EQ . opera_add expression add_tabla
    (105) opera_add -> .

    ID              reduce using rule 105 (opera_add -> .)
    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 172

state 144

    (70) statement_function -> ID existe_funcion crea_funcion . LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (71) statement_function -> ID existe_funcion crea_funcion . LPARENT RPARENT crea_subfuncion

    LPARENT         shift and go to state 173


state 145

    (74) statement_condition -> IF LPARENT expression . RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (75) statement_condition -> IF LPARENT expression . RPARENT THEN revisar_expression bloque condition_end

    RPARENT         shift and go to state 174


state 146

    (76) statement_while -> WHILE opera_while LPARENT . expression RPARENT condicion_while DO bloque loop_while
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 175
    const                          shift and go to state 133
    expr                           shift and go to state 134
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 147

    (77) statement_for -> FOR opera_for statement_assign . TO const compara_for condicion_for DO bloque aumenta loop_for

    TO              shift and go to state 176


state 148

    (36) statement_assign -> ID . const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (37) statement_assign -> ID . const_id EQ opera_add expression add_tabla
    (98) const_id -> .

    LSQUARE         reduce using rule 98 (const_id -> .)
    EQ              reduce using rule 98 (const_id -> .)

    const_id                       shift and go to state 115

state 149

    (78) statement_read -> READ LPARENT read_1 . RPARENT

    RPARENT         shift and go to state 177


state 150

    (79) read_1 -> ID . read_instr read_1
    (80) read_1 -> ID . read_instr
    (142) read_instr -> .

    ID              reduce using rule 142 (read_instr -> .)
    RPARENT         reduce using rule 142 (read_instr -> .)

    read_instr                     shift and go to state 178

state 151

    (81) statement_write -> WRITE LPARENT write_1 . RPARENT

    RPARENT         shift and go to state 179


state 152

    (82) write_1 -> expression . write_instr COMMA write_1
    (84) write_1 -> expression . write_instr
    (143) write_instr -> .

    COMMA           reduce using rule 143 (write_instr -> .)
    RPARENT         reduce using rule 143 (write_instr -> .)

    write_instr                    shift and go to state 180

state 153

    (83) write_1 -> STRINGCTE . const_str write_instr COMMA write_1
    (85) write_1 -> STRINGCTE . const_str write_instr
    (102) const_str -> .

    COMMA           reduce using rule 102 (const_str -> .)
    RPARENT         reduce using rule 102 (const_str -> .)

    const_str                      shift and go to state 181

state 154

    (86) statement_return -> RETURN return_function LPARENT . expression RPARENT return_save_quadruple
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 182
    const                          shift and go to state 133
    expr                           shift and go to state 134
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 155

    (87) statement_statistics -> MEDIA LPARENT const . read_arg_mean RPARENT
    (135) read_arg_mean -> .

    RPARENT         reduce using rule 135 (read_arg_mean -> .)

    read_arg_mean                  shift and go to state 183

state 156

    (88) statement_statistics -> MEDIANA LPARENT const . read_arg_median RPARENT
    (136) read_arg_median -> .

    RPARENT         reduce using rule 136 (read_arg_median -> .)

    read_arg_median                shift and go to state 184

state 157

    (89) statement_statistics -> MODA LPARENT const . read_arg_mode RPARENT
    (137) read_arg_mode -> .

    RPARENT         reduce using rule 137 (read_arg_mode -> .)

    read_arg_mode                  shift and go to state 185

state 158

    (90) statement_statistics -> VARIANZA LPARENT const . read_arg_varianza RPARENT
    (138) read_arg_varianza -> .

    RPARENT         reduce using rule 138 (read_arg_varianza -> .)

    read_arg_varianza              shift and go to state 186

state 159

    (91) statement_statistics -> ESDEV LPARENT const . read_arg_esdev RPARENT
    (139) read_arg_esdev -> .

    RPARENT         reduce using rule 139 (read_arg_esdev -> .)

    read_arg_esdev                 shift and go to state 187

state 160

    (92) statement_math -> ORDENAZ LPARENT const . read_arg_sort RPARENT
    (140) read_arg_sort -> .

    RPARENT         reduce using rule 140 (read_arg_sort -> .)

    read_arg_sort                  shift and go to state 188

state 161

    (93) statement_math -> ORDENZA LPARENT const . read_arg_reverse RPARENT
    (141) read_arg_reverse -> .

    RPARENT         reduce using rule 141 (read_arg_reverse -> .)

    read_arg_reverse               shift and go to state 189

state 162

    (59) const -> LPARENT fondo_virtual expression RPARENT . pop_fondo_virtual
    (112) pop_fondo_virtual -> .

    RSQUARE         reduce using rule 112 (pop_fondo_virtual -> .)
    TIMES           reduce using rule 112 (pop_fondo_virtual -> .)
    DIVENT          reduce using rule 112 (pop_fondo_virtual -> .)
    DIVIDE          reduce using rule 112 (pop_fondo_virtual -> .)
    MODULE          reduce using rule 112 (pop_fondo_virtual -> .)
    POWER           reduce using rule 112 (pop_fondo_virtual -> .)
    PLUS            reduce using rule 112 (pop_fondo_virtual -> .)
    MINUS           reduce using rule 112 (pop_fondo_virtual -> .)
    LT              reduce using rule 112 (pop_fondo_virtual -> .)
    LTE             reduce using rule 112 (pop_fondo_virtual -> .)
    GT              reduce using rule 112 (pop_fondo_virtual -> .)
    GTE             reduce using rule 112 (pop_fondo_virtual -> .)
    SIM             reduce using rule 112 (pop_fondo_virtual -> .)
    NE              reduce using rule 112 (pop_fondo_virtual -> .)
    OR              reduce using rule 112 (pop_fondo_virtual -> .)
    AND             reduce using rule 112 (pop_fondo_virtual -> .)
    RPARENT         reduce using rule 112 (pop_fondo_virtual -> .)
    COMMA           reduce using rule 112 (pop_fondo_virtual -> .)
    SEMI            reduce using rule 112 (pop_fondo_virtual -> .)
    TO              reduce using rule 112 (pop_fondo_virtual -> .)
    DO              reduce using rule 112 (pop_fondo_virtual -> .)

    pop_fondo_virtual              shift and go to state 190

state 163

    (38) expression -> ID const_id . LSQUARE const save_var RSQUARE
    (63) const -> ID const_id .

    LSQUARE         shift and go to state 191
    TIMES           reduce using rule 63 (const -> ID const_id .)
    DIVENT          reduce using rule 63 (const -> ID const_id .)
    DIVIDE          reduce using rule 63 (const -> ID const_id .)
    MODULE          reduce using rule 63 (const -> ID const_id .)
    POWER           reduce using rule 63 (const -> ID const_id .)
    PLUS            reduce using rule 63 (const -> ID const_id .)
    MINUS           reduce using rule 63 (const -> ID const_id .)
    LT              reduce using rule 63 (const -> ID const_id .)
    LTE             reduce using rule 63 (const -> ID const_id .)
    GT              reduce using rule 63 (const -> ID const_id .)
    GTE             reduce using rule 63 (const -> ID const_id .)
    SIM             reduce using rule 63 (const -> ID const_id .)
    NE              reduce using rule 63 (const -> ID const_id .)
    OR              reduce using rule 63 (const -> ID const_id .)
    AND             reduce using rule 63 (const -> ID const_id .)
    RPARENT         reduce using rule 63 (const -> ID const_id .)
    COMMA           reduce using rule 63 (const -> ID const_id .)
    SEMI            reduce using rule 63 (const -> ID const_id .)
    TO              reduce using rule 63 (const -> ID const_id .)


state 164

    (53) expr_muldiv -> const term_muldiv . TIMES opera_add expr_muldiv
    (54) expr_muldiv -> const term_muldiv . DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> const term_muldiv . DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> const term_muldiv . MODULE opera_add expr_muldiv
    (57) expr_muldiv -> const term_muldiv . POWER opera_add expr_muldiv
    (58) expr_muldiv -> const term_muldiv .

    TIMES           shift and go to state 192
    DIVENT          shift and go to state 193
    DIVIDE          shift and go to state 194
    MODULE          shift and go to state 195
    POWER           shift and go to state 196
    PLUS            reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    MINUS           reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    LT              reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    LTE             reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    GT              reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    GTE             reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    SIM             reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    NE              reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    OR              reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    AND             reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    RPARENT         reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    COMMA           reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    SEMI            reduce using rule 58 (expr_muldiv -> const term_muldiv .)
    TO              reduce using rule 58 (expr_muldiv -> const term_muldiv .)


state 165

    (39) expression -> expr oper_y . AND opera_add expression
    (40) expression -> expr oper_y .

    AND             shift and go to state 197
    RPARENT         reduce using rule 40 (expression -> expr oper_y .)
    COMMA           reduce using rule 40 (expression -> expr oper_y .)
    SEMI            reduce using rule 40 (expression -> expr oper_y .)
    TO              reduce using rule 40 (expression -> expr oper_y .)


state 166

    (41) expr -> expr_aux oper_o . OR opera_add expr
    (42) expr -> expr_aux oper_o .

    OR              shift and go to state 198
    AND             reduce using rule 42 (expr -> expr_aux oper_o .)
    RPARENT         reduce using rule 42 (expr -> expr_aux oper_o .)
    COMMA           reduce using rule 42 (expr -> expr_aux oper_o .)
    SEMI            reduce using rule 42 (expr -> expr_aux oper_o .)
    TO              reduce using rule 42 (expr -> expr_aux oper_o .)


state 167

    (43) expr_aux -> expr_sumres expr_rel . LT opera_add expr_aux
    (44) expr_aux -> expr_sumres expr_rel . LTE opera_add expr_aux
    (45) expr_aux -> expr_sumres expr_rel . GT opera_add expr_aux
    (46) expr_aux -> expr_sumres expr_rel . GTE opera_add expr_aux
    (47) expr_aux -> expr_sumres expr_rel . SIM opera_add expr_aux
    (48) expr_aux -> expr_sumres expr_rel . NE opera_add expr_aux
    (49) expr_aux -> expr_sumres expr_rel .

    LT              shift and go to state 199
    LTE             shift and go to state 200
    GT              shift and go to state 201
    GTE             shift and go to state 202
    SIM             shift and go to state 203
    NE              shift and go to state 204
    OR              reduce using rule 49 (expr_aux -> expr_sumres expr_rel .)
    AND             reduce using rule 49 (expr_aux -> expr_sumres expr_rel .)
    RPARENT         reduce using rule 49 (expr_aux -> expr_sumres expr_rel .)
    COMMA           reduce using rule 49 (expr_aux -> expr_sumres expr_rel .)
    SEMI            reduce using rule 49 (expr_aux -> expr_sumres expr_rel .)
    TO              reduce using rule 49 (expr_aux -> expr_sumres expr_rel .)


state 168

    (50) expr_sumres -> expr_muldiv term_sumres . PLUS opera_add expr_sumres
    (51) expr_sumres -> expr_muldiv term_sumres . MINUS opera_add expr_sumres
    (52) expr_sumres -> expr_muldiv term_sumres .

    PLUS            shift and go to state 205
    MINUS           shift and go to state 206
    LT              reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)
    LTE             reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)
    GT              reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)
    GTE             reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)
    SIM             reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)
    NE              reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)
    OR              reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)
    AND             reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)
    RPARENT         reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)
    COMMA           reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)
    SEMI            reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)
    TO              reduce using rule 52 (expr_sumres -> expr_muldiv term_sumres .)


state 169

    (64) funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion .

    MAIN            reduce using rule 64 (funcion -> FUNCION VOID loType ID function_name parametro rev_quad function_all fin_funcion funcion .)


state 170

    (13) func_vars -> memType ID vars_name vars_type param_type . COMMA func_vars
    (14) func_vars -> memType ID vars_name vars_type param_type .

    COMMA           shift and go to state 207
    RPARENT         reduce using rule 14 (func_vars -> memType ID vars_name vars_type param_type .)


state 171

    (36) statement_assign -> ID const_id LSQUARE const . save_var RSQUARE EQ opera_add expression add_tabla
    (104) save_var -> .

    RSQUARE         reduce using rule 104 (save_var -> .)

    save_var                       shift and go to state 208

state 172

    (37) statement_assign -> ID const_id EQ opera_add . expression add_tabla
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 209
    const                          shift and go to state 133
    expr                           shift and go to state 134
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 173

    (70) statement_function -> ID existe_funcion crea_funcion LPARENT . funcion_aux verifica_param RPARENT crea_subfuncion
    (71) statement_function -> ID existe_funcion crea_funcion LPARENT . RPARENT crea_subfuncion
    (72) funcion_aux -> . expression revisar_parametro
    (73) funcion_aux -> . expression revisar_parametro cuenta_parametro COMMA funcion_aux
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    RPARENT         shift and go to state 211
    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    funcion_aux                    shift and go to state 210
    expression                     shift and go to state 212
    const                          shift and go to state 133
    expr                           shift and go to state 134
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 174

    (74) statement_condition -> IF LPARENT expression RPARENT . THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (75) statement_condition -> IF LPARENT expression RPARENT . THEN revisar_expression bloque condition_end

    THEN            shift and go to state 213


state 175

    (76) statement_while -> WHILE opera_while LPARENT expression . RPARENT condicion_while DO bloque loop_while

    RPARENT         shift and go to state 214


state 176

    (77) statement_for -> FOR opera_for statement_assign TO . const compara_for condicion_for DO bloque aumenta loop_for
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 215

state 177

    (78) statement_read -> READ LPARENT read_1 RPARENT .

    SEMI            reduce using rule 78 (statement_read -> READ LPARENT read_1 RPARENT .)


state 178

    (79) read_1 -> ID read_instr . read_1
    (80) read_1 -> ID read_instr .
    (79) read_1 -> . ID read_instr read_1
    (80) read_1 -> . ID read_instr

    RPARENT         reduce using rule 80 (read_1 -> ID read_instr .)
    ID              shift and go to state 150

    read_1                         shift and go to state 216

state 179

    (81) statement_write -> WRITE LPARENT write_1 RPARENT .

    SEMI            reduce using rule 81 (statement_write -> WRITE LPARENT write_1 RPARENT .)


state 180

    (82) write_1 -> expression write_instr . COMMA write_1
    (84) write_1 -> expression write_instr .

    COMMA           shift and go to state 217
    RPARENT         reduce using rule 84 (write_1 -> expression write_instr .)


state 181

    (83) write_1 -> STRINGCTE const_str . write_instr COMMA write_1
    (85) write_1 -> STRINGCTE const_str . write_instr
    (143) write_instr -> .

    COMMA           reduce using rule 143 (write_instr -> .)
    RPARENT         reduce using rule 143 (write_instr -> .)

    write_instr                    shift and go to state 218

state 182

    (86) statement_return -> RETURN return_function LPARENT expression . RPARENT return_save_quadruple

    RPARENT         shift and go to state 219


state 183

    (87) statement_statistics -> MEDIA LPARENT const read_arg_mean . RPARENT

    RPARENT         shift and go to state 220


state 184

    (88) statement_statistics -> MEDIANA LPARENT const read_arg_median . RPARENT

    RPARENT         shift and go to state 221


state 185

    (89) statement_statistics -> MODA LPARENT const read_arg_mode . RPARENT

    RPARENT         shift and go to state 222


state 186

    (90) statement_statistics -> VARIANZA LPARENT const read_arg_varianza . RPARENT

    RPARENT         shift and go to state 223


state 187

    (91) statement_statistics -> ESDEV LPARENT const read_arg_esdev . RPARENT

    RPARENT         shift and go to state 224


state 188

    (92) statement_math -> ORDENAZ LPARENT const read_arg_sort . RPARENT

    RPARENT         shift and go to state 225


state 189

    (93) statement_math -> ORDENZA LPARENT const read_arg_reverse . RPARENT

    RPARENT         shift and go to state 226


state 190

    (59) const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .

    RSQUARE         reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    TIMES           reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    DIVENT          reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    DIVIDE          reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    MODULE          reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    POWER           reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    PLUS            reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    MINUS           reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    LT              reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    LTE             reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    GT              reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    GTE             reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    SIM             reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    NE              reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    OR              reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    AND             reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    RPARENT         reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    COMMA           reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    SEMI            reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    TO              reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)
    DO              reduce using rule 59 (const -> LPARENT fondo_virtual expression RPARENT pop_fondo_virtual .)


state 191

    (38) expression -> ID const_id LSQUARE . const save_var RSQUARE
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 227

state 192

    (53) expr_muldiv -> const term_muldiv TIMES . opera_add expr_muldiv
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 228

state 193

    (54) expr_muldiv -> const term_muldiv DIVENT . opera_add expr_muldiv
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 229

state 194

    (55) expr_muldiv -> const term_muldiv DIVIDE . opera_add expr_muldiv
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 230

state 195

    (56) expr_muldiv -> const term_muldiv MODULE . opera_add expr_muldiv
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 231

state 196

    (57) expr_muldiv -> const term_muldiv POWER . opera_add expr_muldiv
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 232

state 197

    (39) expression -> expr oper_y AND . opera_add expression
    (105) opera_add -> .

    ID              reduce using rule 105 (opera_add -> .)
    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 233

state 198

    (41) expr -> expr_aux oper_o OR . opera_add expr
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 234

state 199

    (43) expr_aux -> expr_sumres expr_rel LT . opera_add expr_aux
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 235

state 200

    (44) expr_aux -> expr_sumres expr_rel LTE . opera_add expr_aux
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 236

state 201

    (45) expr_aux -> expr_sumres expr_rel GT . opera_add expr_aux
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 237

state 202

    (46) expr_aux -> expr_sumres expr_rel GTE . opera_add expr_aux
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 238

state 203

    (47) expr_aux -> expr_sumres expr_rel SIM . opera_add expr_aux
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 239

state 204

    (48) expr_aux -> expr_sumres expr_rel NE . opera_add expr_aux
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 240

state 205

    (50) expr_sumres -> expr_muldiv term_sumres PLUS . opera_add expr_sumres
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 241

state 206

    (51) expr_sumres -> expr_muldiv term_sumres MINUS . opera_add expr_sumres
    (105) opera_add -> .

    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)
    ID              reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 242

state 207

    (13) func_vars -> memType ID vars_name vars_type param_type COMMA . func_vars
    (13) func_vars -> . memType ID vars_name vars_type param_type COMMA func_vars
    (14) func_vars -> . memType ID vars_name vars_type param_type
    (15) memType -> . INT loType
    (16) memType -> . FLOAT loType
    (17) memType -> . CHAR loType

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    memType                        shift and go to state 53
    func_vars                      shift and go to state 243

state 208

    (36) statement_assign -> ID const_id LSQUARE const save_var . RSQUARE EQ opera_add expression add_tabla

    RSQUARE         shift and go to state 244


state 209

    (37) statement_assign -> ID const_id EQ opera_add expression . add_tabla
    (103) add_tabla -> .

    SEMI            reduce using rule 103 (add_tabla -> .)
    TO              reduce using rule 103 (add_tabla -> .)

    add_tabla                      shift and go to state 245

state 210

    (70) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux . verifica_param RPARENT crea_subfuncion
    (121) verifica_param -> .

    RPARENT         reduce using rule 121 (verifica_param -> .)

    verifica_param                 shift and go to state 246

state 211

    (71) statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT . crea_subfuncion
    (120) crea_subfuncion -> .

    SEMI            reduce using rule 120 (crea_subfuncion -> .)

    crea_subfuncion                shift and go to state 247

state 212

    (72) funcion_aux -> expression . revisar_parametro
    (73) funcion_aux -> expression . revisar_parametro cuenta_parametro COMMA funcion_aux
    (123) revisar_parametro -> .

    COMMA           reduce using rule 123 (revisar_parametro -> .)
    RPARENT         reduce using rule 123 (revisar_parametro -> .)

    revisar_parametro              shift and go to state 248

state 213

    (74) statement_condition -> IF LPARENT expression RPARENT THEN . revisar_expression bloque ELSE else_expression bloque condition_end
    (75) statement_condition -> IF LPARENT expression RPARENT THEN . revisar_expression bloque condition_end
    (124) revisar_expression -> .

    LBRACKET        reduce using rule 124 (revisar_expression -> .)

    revisar_expression             shift and go to state 249

state 214

    (76) statement_while -> WHILE opera_while LPARENT expression RPARENT . condicion_while DO bloque loop_while
    (128) condicion_while -> .

    DO              reduce using rule 128 (condicion_while -> .)

    condicion_while                shift and go to state 250

state 215

    (77) statement_for -> FOR opera_for statement_assign TO const . compara_for condicion_for DO bloque aumenta loop_for
    (131) compara_for -> .

    DO              reduce using rule 131 (compara_for -> .)

    compara_for                    shift and go to state 251

state 216

    (79) read_1 -> ID read_instr read_1 .

    RPARENT         reduce using rule 79 (read_1 -> ID read_instr read_1 .)


state 217

    (82) write_1 -> expression write_instr COMMA . write_1
    (82) write_1 -> . expression write_instr COMMA write_1
    (83) write_1 -> . STRINGCTE const_str write_instr COMMA write_1
    (84) write_1 -> . expression write_instr
    (85) write_1 -> . STRINGCTE const_str write_instr
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    STRINGCTE       shift and go to state 153
    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 152
    write_1                        shift and go to state 252
    const                          shift and go to state 133
    expr                           shift and go to state 134
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 218

    (83) write_1 -> STRINGCTE const_str write_instr . COMMA write_1
    (85) write_1 -> STRINGCTE const_str write_instr .

    COMMA           shift and go to state 253
    RPARENT         reduce using rule 85 (write_1 -> STRINGCTE const_str write_instr .)


state 219

    (86) statement_return -> RETURN return_function LPARENT expression RPARENT . return_save_quadruple
    (145) return_save_quadruple -> .

    SEMI            reduce using rule 145 (return_save_quadruple -> .)

    return_save_quadruple          shift and go to state 254

state 220

    (87) statement_statistics -> MEDIA LPARENT const read_arg_mean RPARENT .

    SEMI            reduce using rule 87 (statement_statistics -> MEDIA LPARENT const read_arg_mean RPARENT .)


state 221

    (88) statement_statistics -> MEDIANA LPARENT const read_arg_median RPARENT .

    SEMI            reduce using rule 88 (statement_statistics -> MEDIANA LPARENT const read_arg_median RPARENT .)


state 222

    (89) statement_statistics -> MODA LPARENT const read_arg_mode RPARENT .

    SEMI            reduce using rule 89 (statement_statistics -> MODA LPARENT const read_arg_mode RPARENT .)


state 223

    (90) statement_statistics -> VARIANZA LPARENT const read_arg_varianza RPARENT .

    SEMI            reduce using rule 90 (statement_statistics -> VARIANZA LPARENT const read_arg_varianza RPARENT .)


state 224

    (91) statement_statistics -> ESDEV LPARENT const read_arg_esdev RPARENT .

    SEMI            reduce using rule 91 (statement_statistics -> ESDEV LPARENT const read_arg_esdev RPARENT .)


state 225

    (92) statement_math -> ORDENAZ LPARENT const read_arg_sort RPARENT .

    SEMI            reduce using rule 92 (statement_math -> ORDENAZ LPARENT const read_arg_sort RPARENT .)


state 226

    (93) statement_math -> ORDENZA LPARENT const read_arg_reverse RPARENT .

    SEMI            reduce using rule 93 (statement_math -> ORDENZA LPARENT const read_arg_reverse RPARENT .)


state 227

    (38) expression -> ID const_id LSQUARE const . save_var RSQUARE
    (104) save_var -> .

    RSQUARE         reduce using rule 104 (save_var -> .)

    save_var                       shift and go to state 255

state 228

    (53) expr_muldiv -> const term_muldiv TIMES opera_add . expr_muldiv
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 133
    expr_muldiv                    shift and go to state 256

state 229

    (54) expr_muldiv -> const term_muldiv DIVENT opera_add . expr_muldiv
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 133
    expr_muldiv                    shift and go to state 257

state 230

    (55) expr_muldiv -> const term_muldiv DIVIDE opera_add . expr_muldiv
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 133
    expr_muldiv                    shift and go to state 258

state 231

    (56) expr_muldiv -> const term_muldiv MODULE opera_add . expr_muldiv
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 133
    expr_muldiv                    shift and go to state 259

state 232

    (57) expr_muldiv -> const term_muldiv POWER opera_add . expr_muldiv
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    const                          shift and go to state 133
    expr_muldiv                    shift and go to state 260

state 233

    (39) expression -> expr oper_y AND opera_add . expression
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expr                           shift and go to state 134
    expression                     shift and go to state 261
    const                          shift and go to state 133
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 234

    (41) expr -> expr_aux oper_o OR opera_add . expr
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_aux                       shift and go to state 135
    expr                           shift and go to state 262
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137
    const                          shift and go to state 133

state 235

    (43) expr_aux -> expr_sumres expr_rel LT opera_add . expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 136
    expr_aux                       shift and go to state 263
    expr_muldiv                    shift and go to state 137
    const                          shift and go to state 133

state 236

    (44) expr_aux -> expr_sumres expr_rel LTE opera_add . expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 136
    expr_aux                       shift and go to state 264
    expr_muldiv                    shift and go to state 137
    const                          shift and go to state 133

state 237

    (45) expr_aux -> expr_sumres expr_rel GT opera_add . expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 136
    expr_aux                       shift and go to state 265
    expr_muldiv                    shift and go to state 137
    const                          shift and go to state 133

state 238

    (46) expr_aux -> expr_sumres expr_rel GTE opera_add . expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 136
    expr_aux                       shift and go to state 266
    expr_muldiv                    shift and go to state 137
    const                          shift and go to state 133

state 239

    (47) expr_aux -> expr_sumres expr_rel SIM opera_add . expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 136
    expr_aux                       shift and go to state 267
    expr_muldiv                    shift and go to state 137
    const                          shift and go to state 133

state 240

    (48) expr_aux -> expr_sumres expr_rel NE opera_add . expr_aux
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_sumres                    shift and go to state 136
    expr_aux                       shift and go to state 268
    expr_muldiv                    shift and go to state 137
    const                          shift and go to state 133

state 241

    (50) expr_sumres -> expr_muldiv term_sumres PLUS opera_add . expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_muldiv                    shift and go to state 137
    expr_sumres                    shift and go to state 269
    const                          shift and go to state 133

state 242

    (51) expr_sumres -> expr_muldiv term_sumres MINUS opera_add . expr_sumres
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61
    ID              shift and go to state 56

    expr_muldiv                    shift and go to state 137
    expr_sumres                    shift and go to state 270
    const                          shift and go to state 133

state 243

    (13) func_vars -> memType ID vars_name vars_type param_type COMMA func_vars .

    RPARENT         reduce using rule 13 (func_vars -> memType ID vars_name vars_type param_type COMMA func_vars .)


state 244

    (36) statement_assign -> ID const_id LSQUARE const save_var RSQUARE . EQ opera_add expression add_tabla

    EQ              shift and go to state 271


state 245

    (37) statement_assign -> ID const_id EQ opera_add expression add_tabla .

    SEMI            reduce using rule 37 (statement_assign -> ID const_id EQ opera_add expression add_tabla .)
    TO              reduce using rule 37 (statement_assign -> ID const_id EQ opera_add expression add_tabla .)


state 246

    (70) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param . RPARENT crea_subfuncion

    RPARENT         shift and go to state 272


state 247

    (71) statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion .

    SEMI            reduce using rule 71 (statement_function -> ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion .)


state 248

    (72) funcion_aux -> expression revisar_parametro .
    (73) funcion_aux -> expression revisar_parametro . cuenta_parametro COMMA funcion_aux
    (122) cuenta_parametro -> .

    RPARENT         reduce using rule 72 (funcion_aux -> expression revisar_parametro .)
    COMMA           reduce using rule 122 (cuenta_parametro -> .)

    cuenta_parametro               shift and go to state 273

state 249

    (74) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression . bloque ELSE else_expression bloque condition_end
    (75) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression . bloque condition_end
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 275

    bloque                         shift and go to state 274

state 250

    (76) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while . DO bloque loop_while

    DO              shift and go to state 276


state 251

    (77) statement_for -> FOR opera_for statement_assign TO const compara_for . condicion_for DO bloque aumenta loop_for
    (132) condicion_for -> .

    DO              reduce using rule 132 (condicion_for -> .)

    condicion_for                  shift and go to state 277

state 252

    (82) write_1 -> expression write_instr COMMA write_1 .

    RPARENT         reduce using rule 82 (write_1 -> expression write_instr COMMA write_1 .)


state 253

    (83) write_1 -> STRINGCTE const_str write_instr COMMA . write_1
    (82) write_1 -> . expression write_instr COMMA write_1
    (83) write_1 -> . STRINGCTE const_str write_instr COMMA write_1
    (84) write_1 -> . expression write_instr
    (85) write_1 -> . STRINGCTE const_str write_instr
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    STRINGCTE       shift and go to state 153
    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    write_1                        shift and go to state 278
    expression                     shift and go to state 152
    const                          shift and go to state 133
    expr                           shift and go to state 134
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 254

    (86) statement_return -> RETURN return_function LPARENT expression RPARENT return_save_quadruple .

    SEMI            reduce using rule 86 (statement_return -> RETURN return_function LPARENT expression RPARENT return_save_quadruple .)


state 255

    (38) expression -> ID const_id LSQUARE const save_var . RSQUARE

    RSQUARE         shift and go to state 279


state 256

    (53) expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .

    PLUS            reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    MINUS           reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    LT              reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    LTE             reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    GT              reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    GTE             reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    SIM             reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    NE              reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    OR              reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    AND             reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    RPARENT         reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    COMMA           reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    SEMI            reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)
    TO              reduce using rule 53 (expr_muldiv -> const term_muldiv TIMES opera_add expr_muldiv .)


state 257

    (54) expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .

    PLUS            reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    MINUS           reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    LT              reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    LTE             reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    GT              reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    GTE             reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    SIM             reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    NE              reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    OR              reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    AND             reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    RPARENT         reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    COMMA           reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    SEMI            reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)
    TO              reduce using rule 54 (expr_muldiv -> const term_muldiv DIVENT opera_add expr_muldiv .)


state 258

    (55) expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .

    PLUS            reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    MINUS           reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    LT              reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    LTE             reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    GT              reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    GTE             reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    SIM             reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    NE              reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    OR              reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    AND             reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    RPARENT         reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    COMMA           reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    SEMI            reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)
    TO              reduce using rule 55 (expr_muldiv -> const term_muldiv DIVIDE opera_add expr_muldiv .)


state 259

    (56) expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .

    PLUS            reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    MINUS           reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    LT              reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    LTE             reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    GT              reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    GTE             reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    SIM             reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    NE              reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    OR              reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    AND             reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    RPARENT         reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    COMMA           reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    SEMI            reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)
    TO              reduce using rule 56 (expr_muldiv -> const term_muldiv MODULE opera_add expr_muldiv .)


state 260

    (57) expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .

    PLUS            reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    MINUS           reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    LT              reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    LTE             reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    GT              reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    GTE             reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    SIM             reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    NE              reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    OR              reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    AND             reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    RPARENT         reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    COMMA           reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    SEMI            reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)
    TO              reduce using rule 57 (expr_muldiv -> const term_muldiv POWER opera_add expr_muldiv .)


state 261

    (39) expression -> expr oper_y AND opera_add expression .

    RPARENT         reduce using rule 39 (expression -> expr oper_y AND opera_add expression .)
    COMMA           reduce using rule 39 (expression -> expr oper_y AND opera_add expression .)
    SEMI            reduce using rule 39 (expression -> expr oper_y AND opera_add expression .)
    TO              reduce using rule 39 (expression -> expr oper_y AND opera_add expression .)


state 262

    (41) expr -> expr_aux oper_o OR opera_add expr .

    AND             reduce using rule 41 (expr -> expr_aux oper_o OR opera_add expr .)
    RPARENT         reduce using rule 41 (expr -> expr_aux oper_o OR opera_add expr .)
    COMMA           reduce using rule 41 (expr -> expr_aux oper_o OR opera_add expr .)
    SEMI            reduce using rule 41 (expr -> expr_aux oper_o OR opera_add expr .)
    TO              reduce using rule 41 (expr -> expr_aux oper_o OR opera_add expr .)


state 263

    (43) expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .

    OR              reduce using rule 43 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    AND             reduce using rule 43 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    RPARENT         reduce using rule 43 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    COMMA           reduce using rule 43 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    SEMI            reduce using rule 43 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)
    TO              reduce using rule 43 (expr_aux -> expr_sumres expr_rel LT opera_add expr_aux .)


state 264

    (44) expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .

    OR              reduce using rule 44 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    AND             reduce using rule 44 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    RPARENT         reduce using rule 44 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    COMMA           reduce using rule 44 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    SEMI            reduce using rule 44 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)
    TO              reduce using rule 44 (expr_aux -> expr_sumres expr_rel LTE opera_add expr_aux .)


state 265

    (45) expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .

    OR              reduce using rule 45 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    AND             reduce using rule 45 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    RPARENT         reduce using rule 45 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    COMMA           reduce using rule 45 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    SEMI            reduce using rule 45 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)
    TO              reduce using rule 45 (expr_aux -> expr_sumres expr_rel GT opera_add expr_aux .)


state 266

    (46) expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .

    OR              reduce using rule 46 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    AND             reduce using rule 46 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    RPARENT         reduce using rule 46 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    COMMA           reduce using rule 46 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    SEMI            reduce using rule 46 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)
    TO              reduce using rule 46 (expr_aux -> expr_sumres expr_rel GTE opera_add expr_aux .)


state 267

    (47) expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .

    OR              reduce using rule 47 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    AND             reduce using rule 47 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    RPARENT         reduce using rule 47 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    COMMA           reduce using rule 47 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    SEMI            reduce using rule 47 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)
    TO              reduce using rule 47 (expr_aux -> expr_sumres expr_rel SIM opera_add expr_aux .)


state 268

    (48) expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .

    OR              reduce using rule 48 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    AND             reduce using rule 48 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    RPARENT         reduce using rule 48 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    COMMA           reduce using rule 48 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    SEMI            reduce using rule 48 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)
    TO              reduce using rule 48 (expr_aux -> expr_sumres expr_rel NE opera_add expr_aux .)


state 269

    (50) expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .

    LT              reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    LTE             reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    GT              reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    GTE             reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    SIM             reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    NE              reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    OR              reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    AND             reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    RPARENT         reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    COMMA           reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    SEMI            reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)
    TO              reduce using rule 50 (expr_sumres -> expr_muldiv term_sumres PLUS opera_add expr_sumres .)


state 270

    (51) expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .

    LT              reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    LTE             reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    GT              reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    GTE             reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    SIM             reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    NE              reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    OR              reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    AND             reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    RPARENT         reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    COMMA           reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    SEMI            reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)
    TO              reduce using rule 51 (expr_sumres -> expr_muldiv term_sumres MINUS opera_add expr_sumres .)


state 271

    (36) statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ . opera_add expression add_tabla
    (105) opera_add -> .

    ID              reduce using rule 105 (opera_add -> .)
    LPARENT         reduce using rule 105 (opera_add -> .)
    INTEGERCTE      reduce using rule 105 (opera_add -> .)
    FLOATCTE        reduce using rule 105 (opera_add -> .)
    CHARCTE         reduce using rule 105 (opera_add -> .)

    opera_add                      shift and go to state 280

state 272

    (70) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT . crea_subfuncion
    (120) crea_subfuncion -> .

    SEMI            reduce using rule 120 (crea_subfuncion -> .)

    crea_subfuncion                shift and go to state 281

state 273

    (73) funcion_aux -> expression revisar_parametro cuenta_parametro . COMMA funcion_aux

    COMMA           shift and go to state 282


state 274

    (74) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque . ELSE else_expression bloque condition_end
    (75) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque . condition_end
    (126) condition_end -> .

    ELSE            shift and go to state 283
    ID              reduce using rule 126 (condition_end -> .)
    IF              reduce using rule 126 (condition_end -> .)
    WHILE           reduce using rule 126 (condition_end -> .)
    FOR             reduce using rule 126 (condition_end -> .)
    READ            reduce using rule 126 (condition_end -> .)
    WRITE           reduce using rule 126 (condition_end -> .)
    RETURN          reduce using rule 126 (condition_end -> .)
    MEDIA           reduce using rule 126 (condition_end -> .)
    MEDIANA         reduce using rule 126 (condition_end -> .)
    MODA            reduce using rule 126 (condition_end -> .)
    VARIANZA        reduce using rule 126 (condition_end -> .)
    ESDEV           reduce using rule 126 (condition_end -> .)
    ORDENAZ         reduce using rule 126 (condition_end -> .)
    ORDENZA         reduce using rule 126 (condition_end -> .)
    RBRACKET        reduce using rule 126 (condition_end -> .)

    condition_end                  shift and go to state 284

state 275

    (22) bloque -> LBRACKET . statement_func RBRACKET
    (23) bloque -> LBRACKET . RBRACKET
    (24) statement_func -> . statement statement_func
    (25) statement_func -> . statement
    (26) statement -> . statement_assign SEMI
    (27) statement -> . statement_function SEMI
    (28) statement -> . statement_condition
    (29) statement -> . statement_while
    (30) statement -> . statement_for
    (31) statement -> . statement_read SEMI
    (32) statement -> . statement_write SEMI
    (33) statement -> . statement_return SEMI
    (34) statement -> . statement_statistics SEMI
    (35) statement -> . statement_math SEMI
    (36) statement_assign -> . ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla
    (37) statement_assign -> . ID const_id EQ opera_add expression add_tabla
    (70) statement_function -> . ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion
    (71) statement_function -> . ID existe_funcion crea_funcion LPARENT RPARENT crea_subfuncion
    (74) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end
    (75) statement_condition -> . IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end
    (76) statement_while -> . WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while
    (77) statement_for -> . FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for
    (78) statement_read -> . READ LPARENT read_1 RPARENT
    (81) statement_write -> . WRITE LPARENT write_1 RPARENT
    (86) statement_return -> . RETURN return_function LPARENT expression RPARENT return_save_quadruple
    (87) statement_statistics -> . MEDIA LPARENT const read_arg_mean RPARENT
    (88) statement_statistics -> . MEDIANA LPARENT const read_arg_median RPARENT
    (89) statement_statistics -> . MODA LPARENT const read_arg_mode RPARENT
    (90) statement_statistics -> . VARIANZA LPARENT const read_arg_varianza RPARENT
    (91) statement_statistics -> . ESDEV LPARENT const read_arg_esdev RPARENT
    (92) statement_math -> . ORDENAZ LPARENT const read_arg_sort RPARENT
    (93) statement_math -> . ORDENZA LPARENT const read_arg_reverse RPARENT

    RBRACKET        shift and go to state 286
    ID              shift and go to state 81
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    READ            shift and go to state 85
    WRITE           shift and go to state 86
    RETURN          shift and go to state 87
    MEDIA           shift and go to state 88
    MEDIANA         shift and go to state 89
    MODA            shift and go to state 90
    VARIANZA        shift and go to state 91
    ESDEV           shift and go to state 92
    ORDENAZ         shift and go to state 93
    ORDENZA         shift and go to state 94

    statement_func                 shift and go to state 285
    statement                      shift and go to state 70
    statement_assign               shift and go to state 71
    statement_function             shift and go to state 72
    statement_condition            shift and go to state 73
    statement_while                shift and go to state 74
    statement_for                  shift and go to state 75
    statement_read                 shift and go to state 76
    statement_write                shift and go to state 77
    statement_return               shift and go to state 78
    statement_statistics           shift and go to state 79
    statement_math                 shift and go to state 80

state 276

    (76) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO . bloque loop_while
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 275

    bloque                         shift and go to state 287

state 277

    (77) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for . DO bloque aumenta loop_for

    DO              shift and go to state 288


state 278

    (83) write_1 -> STRINGCTE const_str write_instr COMMA write_1 .

    RPARENT         reduce using rule 83 (write_1 -> STRINGCTE const_str write_instr COMMA write_1 .)


state 279

    (38) expression -> ID const_id LSQUARE const save_var RSQUARE .

    RPARENT         reduce using rule 38 (expression -> ID const_id LSQUARE const save_var RSQUARE .)
    COMMA           reduce using rule 38 (expression -> ID const_id LSQUARE const save_var RSQUARE .)
    SEMI            reduce using rule 38 (expression -> ID const_id LSQUARE const save_var RSQUARE .)
    TO              reduce using rule 38 (expression -> ID const_id LSQUARE const save_var RSQUARE .)


state 280

    (36) statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add . expression add_tabla
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    const                          shift and go to state 133
    expression                     shift and go to state 289
    expr                           shift and go to state 134
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 281

    (70) statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion .

    SEMI            reduce using rule 70 (statement_function -> ID existe_funcion crea_funcion LPARENT funcion_aux verifica_param RPARENT crea_subfuncion .)


state 282

    (73) funcion_aux -> expression revisar_parametro cuenta_parametro COMMA . funcion_aux
    (72) funcion_aux -> . expression revisar_parametro
    (73) funcion_aux -> . expression revisar_parametro cuenta_parametro COMMA funcion_aux
    (38) expression -> . ID const_id LSQUARE const save_var RSQUARE
    (39) expression -> . expr oper_y AND opera_add expression
    (40) expression -> . expr oper_y
    (41) expr -> . expr_aux oper_o OR opera_add expr
    (42) expr -> . expr_aux oper_o
    (43) expr_aux -> . expr_sumres expr_rel LT opera_add expr_aux
    (44) expr_aux -> . expr_sumres expr_rel LTE opera_add expr_aux
    (45) expr_aux -> . expr_sumres expr_rel GT opera_add expr_aux
    (46) expr_aux -> . expr_sumres expr_rel GTE opera_add expr_aux
    (47) expr_aux -> . expr_sumres expr_rel SIM opera_add expr_aux
    (48) expr_aux -> . expr_sumres expr_rel NE opera_add expr_aux
    (49) expr_aux -> . expr_sumres expr_rel
    (50) expr_sumres -> . expr_muldiv term_sumres PLUS opera_add expr_sumres
    (51) expr_sumres -> . expr_muldiv term_sumres MINUS opera_add expr_sumres
    (52) expr_sumres -> . expr_muldiv term_sumres
    (53) expr_muldiv -> . const term_muldiv TIMES opera_add expr_muldiv
    (54) expr_muldiv -> . const term_muldiv DIVENT opera_add expr_muldiv
    (55) expr_muldiv -> . const term_muldiv DIVIDE opera_add expr_muldiv
    (56) expr_muldiv -> . const term_muldiv MODULE opera_add expr_muldiv
    (57) expr_muldiv -> . const term_muldiv POWER opera_add expr_muldiv
    (58) expr_muldiv -> . const term_muldiv
    (59) const -> . LPARENT fondo_virtual expression RPARENT pop_fondo_virtual
    (60) const -> . INTEGERCTE const_int
    (61) const -> . FLOATCTE const_float
    (62) const -> . CHARCTE const_char
    (63) const -> . ID const_id

    ID              shift and go to state 132
    LPARENT         shift and go to state 58
    INTEGERCTE      shift and go to state 59
    FLOATCTE        shift and go to state 60
    CHARCTE         shift and go to state 61

    expression                     shift and go to state 212
    funcion_aux                    shift and go to state 290
    const                          shift and go to state 133
    expr                           shift and go to state 134
    expr_aux                       shift and go to state 135
    expr_sumres                    shift and go to state 136
    expr_muldiv                    shift and go to state 137

state 283

    (74) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE . else_expression bloque condition_end
    (125) else_expression -> .

    LBRACKET        reduce using rule 125 (else_expression -> .)

    else_expression                shift and go to state 291

state 284

    (75) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .

    ID              reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    IF              reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    WHILE           reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    FOR             reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    READ            reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    WRITE           reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    RETURN          reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    MEDIA           reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    MEDIANA         reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    MODA            reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    VARIANZA        reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    ESDEV           reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    ORDENAZ         reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    ORDENZA         reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)
    RBRACKET        reduce using rule 75 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque condition_end .)


state 285

    (22) bloque -> LBRACKET statement_func . RBRACKET

    RBRACKET        shift and go to state 292


state 286

    (23) bloque -> LBRACKET RBRACKET .

    ELSE            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    ID              reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    IF              reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    FOR             reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    READ            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    WRITE           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    MEDIA           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    MEDIANA         reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    MODA            reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    VARIANZA        reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    ESDEV           reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    ORDENAZ         reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    ORDENZA         reduce using rule 23 (bloque -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 23 (bloque -> LBRACKET RBRACKET .)


state 287

    (76) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque . loop_while
    (129) loop_while -> .

    ID              reduce using rule 129 (loop_while -> .)
    IF              reduce using rule 129 (loop_while -> .)
    WHILE           reduce using rule 129 (loop_while -> .)
    FOR             reduce using rule 129 (loop_while -> .)
    READ            reduce using rule 129 (loop_while -> .)
    WRITE           reduce using rule 129 (loop_while -> .)
    RETURN          reduce using rule 129 (loop_while -> .)
    MEDIA           reduce using rule 129 (loop_while -> .)
    MEDIANA         reduce using rule 129 (loop_while -> .)
    MODA            reduce using rule 129 (loop_while -> .)
    VARIANZA        reduce using rule 129 (loop_while -> .)
    ESDEV           reduce using rule 129 (loop_while -> .)
    ORDENAZ         reduce using rule 129 (loop_while -> .)
    ORDENZA         reduce using rule 129 (loop_while -> .)
    RBRACKET        reduce using rule 129 (loop_while -> .)

    loop_while                     shift and go to state 293

state 288

    (77) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO . bloque aumenta loop_for
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 275

    bloque                         shift and go to state 294

state 289

    (36) statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression . add_tabla
    (103) add_tabla -> .

    SEMI            reduce using rule 103 (add_tabla -> .)
    TO              reduce using rule 103 (add_tabla -> .)

    add_tabla                      shift and go to state 295

state 290

    (73) funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux .

    RPARENT         reduce using rule 73 (funcion_aux -> expression revisar_parametro cuenta_parametro COMMA funcion_aux .)


state 291

    (74) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression . bloque condition_end
    (22) bloque -> . LBRACKET statement_func RBRACKET
    (23) bloque -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 275

    bloque                         shift and go to state 296

state 292

    (22) bloque -> LBRACKET statement_func RBRACKET .

    ELSE            reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    ID              reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    IF              reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    WHILE           reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    FOR             reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    READ            reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    WRITE           reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    RETURN          reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    MEDIA           reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    MEDIANA         reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    MODA            reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    VARIANZA        reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    ESDEV           reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    ORDENAZ         reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    ORDENZA         reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)
    RBRACKET        reduce using rule 22 (bloque -> LBRACKET statement_func RBRACKET .)


state 293

    (76) statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .

    ID              reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    IF              reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    WHILE           reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    FOR             reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    READ            reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    WRITE           reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    RETURN          reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    MEDIA           reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    MEDIANA         reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    MODA            reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    VARIANZA        reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    ESDEV           reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    ORDENAZ         reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    ORDENZA         reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)
    RBRACKET        reduce using rule 76 (statement_while -> WHILE opera_while LPARENT expression RPARENT condicion_while DO bloque loop_while .)


state 294

    (77) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque . aumenta loop_for
    (133) aumenta -> .

    ID              reduce using rule 133 (aumenta -> .)
    IF              reduce using rule 133 (aumenta -> .)
    WHILE           reduce using rule 133 (aumenta -> .)
    FOR             reduce using rule 133 (aumenta -> .)
    READ            reduce using rule 133 (aumenta -> .)
    WRITE           reduce using rule 133 (aumenta -> .)
    RETURN          reduce using rule 133 (aumenta -> .)
    MEDIA           reduce using rule 133 (aumenta -> .)
    MEDIANA         reduce using rule 133 (aumenta -> .)
    MODA            reduce using rule 133 (aumenta -> .)
    VARIANZA        reduce using rule 133 (aumenta -> .)
    ESDEV           reduce using rule 133 (aumenta -> .)
    ORDENAZ         reduce using rule 133 (aumenta -> .)
    ORDENZA         reduce using rule 133 (aumenta -> .)
    RBRACKET        reduce using rule 133 (aumenta -> .)

    aumenta                        shift and go to state 297

state 295

    (36) statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla .

    SEMI            reduce using rule 36 (statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla .)
    TO              reduce using rule 36 (statement_assign -> ID const_id LSQUARE const save_var RSQUARE EQ opera_add expression add_tabla .)


state 296

    (74) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque . condition_end
    (126) condition_end -> .

    ID              reduce using rule 126 (condition_end -> .)
    IF              reduce using rule 126 (condition_end -> .)
    WHILE           reduce using rule 126 (condition_end -> .)
    FOR             reduce using rule 126 (condition_end -> .)
    READ            reduce using rule 126 (condition_end -> .)
    WRITE           reduce using rule 126 (condition_end -> .)
    RETURN          reduce using rule 126 (condition_end -> .)
    MEDIA           reduce using rule 126 (condition_end -> .)
    MEDIANA         reduce using rule 126 (condition_end -> .)
    MODA            reduce using rule 126 (condition_end -> .)
    VARIANZA        reduce using rule 126 (condition_end -> .)
    ESDEV           reduce using rule 126 (condition_end -> .)
    ORDENAZ         reduce using rule 126 (condition_end -> .)
    ORDENZA         reduce using rule 126 (condition_end -> .)
    RBRACKET        reduce using rule 126 (condition_end -> .)

    condition_end                  shift and go to state 298

state 297

    (77) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta . loop_for
    (134) loop_for -> .

    ID              reduce using rule 134 (loop_for -> .)
    IF              reduce using rule 134 (loop_for -> .)
    WHILE           reduce using rule 134 (loop_for -> .)
    FOR             reduce using rule 134 (loop_for -> .)
    READ            reduce using rule 134 (loop_for -> .)
    WRITE           reduce using rule 134 (loop_for -> .)
    RETURN          reduce using rule 134 (loop_for -> .)
    MEDIA           reduce using rule 134 (loop_for -> .)
    MEDIANA         reduce using rule 134 (loop_for -> .)
    MODA            reduce using rule 134 (loop_for -> .)
    VARIANZA        reduce using rule 134 (loop_for -> .)
    ESDEV           reduce using rule 134 (loop_for -> .)
    ORDENAZ         reduce using rule 134 (loop_for -> .)
    ORDENZA         reduce using rule 134 (loop_for -> .)
    RBRACKET        reduce using rule 134 (loop_for -> .)

    loop_for                       shift and go to state 299

state 298

    (74) statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .

    ID              reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    IF              reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    WHILE           reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    FOR             reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    READ            reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    WRITE           reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    RETURN          reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    MEDIA           reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    MEDIANA         reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    MODA            reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    VARIANZA        reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    ESDEV           reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    ORDENAZ         reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    ORDENZA         reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)
    RBRACKET        reduce using rule 74 (statement_condition -> IF LPARENT expression RPARENT THEN revisar_expression bloque ELSE else_expression bloque condition_end .)


state 299

    (77) statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .

    ID              reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    IF              reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    WHILE           reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    FOR             reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    READ            reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    WRITE           reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    RETURN          reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    MEDIA           reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    MEDIANA         reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    MODA            reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    VARIANZA        reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    ESDEV           reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    ORDENAZ         reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    ORDENZA         reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)
    RBRACKET        reduce using rule 77 (statement_for -> FOR opera_for statement_assign TO const compara_for condicion_for DO bloque aumenta loop_for .)

